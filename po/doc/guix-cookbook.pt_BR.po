# SOME DESCRIPTIVE TITLE
# Copyright (C) 2021 the authors of Guix (msgids) and the following authors (msgstr)
# This file is distributed under the same license as the guix manual package.
# Rafael Fontenelle <rafaelff@gnome.org>, 2021.
# Camila Flores Granella <cgranell@redhat.com>, 2022, 2023.
# Fábio Rodrigues Ribeiro <farribeiro@gmail.com>, 2022, 2023.
# Alexandre de Siqueira <alex.desiqueira@igdore.org>, 2023.
# Florian Pelz <pelzflorian@pelzflorian.de>, 2023, 2024.
# Frank McCay <frank.mccay@outlook.com.br>, 2024.
# Weblate Translation Memory <noreply-mt-weblate-translation-memory@weblate.org>, 2024.
msgid ""
msgstr ""
"Project-Id-Version: guix manual checkout\n"
"Report-Msgid-Bugs-To: bug-guix@gnu.org\n"
"POT-Creation-Date: \n"
"PO-Revision-Date: 2024-06-02 16:00+0000\n"
"Last-Translator: Florian Pelz <pelzflorian@pelzflorian.de>\n"
"Language-Team: Portuguese (Brazil) <https://translate.fedoraproject.org/projects/guix/documentation-cookbook/pt_BR/>\n"
"Language: pt_BR\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=n > 1;\n"
"X-Generator: Weblate 5.5.5\n"

#. type: Plain text
#: doc/guix-cookbook.texi:7
msgid "@documentencoding UTF-8"
msgstr ""
"@documentencoding UTF-8\n"
"@documentlanguage pt_BR\n"
"@frenchspacing on"

#. type: top
#: doc/guix-cookbook.texi:7 doc/guix-cookbook.texi:43 doc/guix-cookbook.texi:57
#, no-wrap
msgid "GNU Guix Cookbook"
msgstr "Livro de Receitas do GNU Guix"

#. type: copying
#: doc/guix-cookbook.texi:28
#, fuzzy
#| msgid "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022, 2023 Maxim Cournoyer@* Copyright @copyright{} 2023 Ludovic Courtès@* Copyright @copyright{} 2023 Thomas Ieong"
msgid "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022, 2023 Maxim Cournoyer@* Copyright @copyright{} 2023-2024 Ludovic Courtès@* Copyright @copyright{} 2023 Thomas Ieong@* Copyright @copyright{} 2024 Florian Pelz@*"
msgstr "Copyright @copyright{} 2019, 2022 Ricardo Wurmus@* Copyright @copyright{} 2019 Efraim Flashner@* Copyright @copyright{} 2019 Pierre Neidhardt@* Copyright @copyright{} 2020 Oleg Pykhalov@* Copyright @copyright{} 2020 Matthew Brooks@* Copyright @copyright{} 2020 Marcin Karpezo@* Copyright @copyright{} 2020 Brice Waegeneire@* Copyright @copyright{} 2020 André Batista@* Copyright @copyright{} 2020 Christine Lemmer-Webber@* Copyright @copyright{} 2021 Joshua Branson@* Copyright @copyright{} 2022, 2023 Maxim Cournoyer@* Copyright @copyright{} 2023 Ludovic Courtès@* Copyright @copyright{} 2023 Thomas Ieong"

#. type: copying
#: doc/guix-cookbook.texi:35
msgid "Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license is included in the section entitled ``GNU Free Documentation License''."
msgstr "Permissão concedida para copiar, distribuir e/ou modificar este documento sob os termos da Licença de Documentação Livre GNU, Versão 1.3 ou qualquer versão mais recente publicada pela Free Software Foundation; sem Seções Invariantes, Textos de Capa Frontal, e sem Textos de Contracapa. Uma cópia da licença está incluída na seção intitulada ``GNU Free Documentation License''."

#. type: dircategory
#: doc/guix-cookbook.texi:37
#, no-wrap
msgid "System administration"
msgstr "Administração do Sistema"

#. type: menuentry
#: doc/guix-cookbook.texi:40
msgid "Guix cookbook: (guix-cookbook)"
msgstr "Livro de receitas do Guix: (guix-cookbook.pt_br)"

#. type: menuentry
#: doc/guix-cookbook.texi:40
msgid "Tutorials and examples for GNU Guix."
msgstr "Tutoriais e exemplos para o GNU Guix."

#. type: subtitle
#: doc/guix-cookbook.texi:44
#, no-wrap
msgid "Tutorials and examples for using the GNU Guix Functional Package Manager"
msgstr "Tutoriais e exemplos para usar o Gerenciador de Pacotes Funcional do GNU Guix"

#. type: author
#: doc/guix-cookbook.texi:45
#, no-wrap
msgid "The GNU Guix Developers"
msgstr "Desenvolvedores do GNU Guix"

#. type: node
#: doc/guix-cookbook.texi:56
#, no-wrap
msgid "Top"
msgstr "Top"

#. type: Plain text
#: doc/guix-cookbook.texi:63
msgid "This document presents tutorials and detailed examples for GNU@tie{}Guix, a functional package management tool written for the GNU system.  Please @pxref{Top,,, guix, GNU Guix reference manual} for details about the system, its API, and related concepts."
msgstr "Este documento apresenta tutoriais e exemplos detalhados para o GNU@tie{}Guix, uma ferramenta funcional de gerenciamento de pacotes escrita para o sistema GNU. Por favor, acesse o @pxref{Top,,, guix.pt_BR, GNU Guix reference manual} para mais detalhes sobre o sistema, sua API, e conceitos relacionados."

#.  You can replace the following paragraph with information on
#. type: Plain text
#: doc/guix-cookbook.texi:78
msgid "This manual is also available in French (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}), German (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}), Korean (@pxref{Top,,, guix-cookbook.ko, GNU Guix 쿡북}), Brazilian Portuguese (@pxref{Top,,, guix-cookbook.pt_BR, Livro de Receitas do GNU Guix}), Slovak (@pxref{Top,,, guix-cookbook.sk, Receptár GNU Guix}), and Swedish (@pxref{Top,,, guix-cookbook.sv, Kokbok för GNU Guix}).  If you would like to translate this document in your native language, consider joining @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Translating Guix,,, guix, GNU Guix reference manual})."
msgstr "Esse manual também está disponível em Inglês (@pxref{Top,,, guix-cookbook, GNU Guix Cookbook}), Francês (@pxref{Top,,, guix-cookbook.fr, Livre de recettes de GNU Guix}), Alemão (@pxref{Top,,, guix-cookbook.de, GNU-Guix-Kochbuch}), na Língua Coreana (@pxref{Top,,, guix-cookbook.ko, GNU Guix 쿡북}), em Eslovaco (@pxref{Top,,, guix-cookbook.sk, Receptár GNU Guix}) e Sueco (@pxref{Top,,, guix-cookbook.sv, Kokbok för GNU Guix}). Se você gostaria de contribuir com a tradução deste documento em sua língua nativa, considere se juntar a nós @uref{https://translate.fedoraproject.org/projects/guix/documentation-cookbook, Weblate} (@pxref{Traduzindo o Guix,,, guix.pt_BR, GNU Guix reference manual})."

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:98
#: doc/guix-cookbook.texi:206 doc/guix-cookbook.texi:207
#, no-wrap
msgid "Scheme tutorials"
msgstr "Tutoriais sobre Scheme"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Meet your new favorite language!"
msgstr "Conheça sua nova linguagem favorita!"

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:102
#: doc/guix-cookbook.texi:499 doc/guix-cookbook.texi:500
#, no-wrap
msgid "Packaging"
msgstr "Empacotamento"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Packaging tutorials"
msgstr "Tutoriais sobre empacotamento"

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:129
#: doc/guix-cookbook.texi:1582 doc/guix-cookbook.texi:1583
#, no-wrap
msgid "System Configuration"
msgstr "Configuração do sistema"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Customizing the GNU System"
msgstr "Customizando o Sistema GNU"

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:154
#: doc/guix-cookbook.texi:3322 doc/guix-cookbook.texi:3323
#, no-wrap
msgid "Containers"
msgstr "Contêineres"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Isolated environments and nested systems"
msgstr "Ambientes isolados e sistemas aninhados"

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:164
#: doc/guix-cookbook.texi:3725 doc/guix-cookbook.texi:3726
#, no-wrap
msgid "Virtual Machines"
msgstr "Máquinas Virtuais"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Virtual machines usage and configuration"
msgstr "Uso e configuração de máquinas virtuais"

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:169
#: doc/guix-cookbook.texi:3956 doc/guix-cookbook.texi:3957
#, no-wrap
msgid "Advanced package management"
msgstr "Gerenciamento avançado de pacotes"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Power to the users!"
msgstr "Poder aos usuários!"

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:181
#: doc/guix-cookbook.texi:4364 doc/guix-cookbook.texi:4365
#, no-wrap
msgid "Software Development"
msgstr "Desenvolvimento de software X"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Environments, continuous integration, etc."
msgstr "Ambientes, integração contínua, etc."

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:191
#: doc/guix-cookbook.texi:5013 doc/guix-cookbook.texi:5014
#, no-wrap
msgid "Environment management"
msgstr "Gerenciamento de ambientes"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "Control environment"
msgstr "Ambiente de controle"

#. type: chapter
#: doc/guix-cookbook.texi:89 doc/guix-cookbook.texi:195
#: doc/guix-cookbook.texi:5139 doc/guix-cookbook.texi:5140
#, no-wrap
msgid "Installing Guix on a Cluster"
msgstr "Instalando Guix em um Cluster"

#. type: menuentry
#: doc/guix-cookbook.texi:89
msgid "High-performance computing."
msgstr "Computação de alta performance."

#. type: chapter
#: doc/guix-cookbook.texi:93 doc/guix-cookbook.texi:5527
#: doc/guix-cookbook.texi:5528
#, no-wrap
msgid "Acknowledgments"
msgstr "Agradecimentos"

#. type: menuentry
#: doc/guix-cookbook.texi:93
msgid "Thanks!"
msgstr "Obrigado!"

#. type: appendix
#: doc/guix-cookbook.texi:93 doc/guix-cookbook.texi:5554
#: doc/guix-cookbook.texi:5555
#, no-wrap
msgid "GNU Free Documentation License"
msgstr "Licença de Documentação Livre GNU"

#. type: menuentry
#: doc/guix-cookbook.texi:93
msgid "The license of this document."
msgstr "A licença deste documento."

#. type: unnumbered
#: doc/guix-cookbook.texi:93 doc/guix-cookbook.texi:5560
#: doc/guix-cookbook.texi:5561
#, no-wrap
msgid "Concept Index"
msgstr "Índice de conceitos"

#. type: menuentry
#: doc/guix-cookbook.texi:93
msgid "Concepts."
msgstr "Conceitos."

#. type: menuentry
#: doc/guix-cookbook.texi:96
msgid "--- The Detailed Node Listing ---"
msgstr "--- A listagem detalhada de nós ---"

#. type: section
#: doc/guix-cookbook.texi:100 doc/guix-cookbook.texi:222
#: doc/guix-cookbook.texi:224 doc/guix-cookbook.texi:225
#, no-wrap
msgid "A Scheme Crash Course"
msgstr "Um curso intensivo de Scheme"

#. type: section
#: doc/guix-cookbook.texi:104 doc/guix-cookbook.texi:106
#: doc/guix-cookbook.texi:511 doc/guix-cookbook.texi:513
#: doc/guix-cookbook.texi:514
#, no-wrap
msgid "Packaging Tutorial"
msgstr "Tutorial sobre empacotamento"

#. type: menuentry
#: doc/guix-cookbook.texi:104 doc/guix-cookbook.texi:511
msgid "A tutorial on how to add packages to Guix."
msgstr "Um tutorial sobre como adicionar pacotes ao Guix."

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:561
#: doc/guix-cookbook.texi:563 doc/guix-cookbook.texi:564
#, no-wrap
msgid "A ``Hello World'' package"
msgstr "Um pacote ``Hello World''"

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:117
#: doc/guix-cookbook.texi:561 doc/guix-cookbook.texi:754
#: doc/guix-cookbook.texi:755
#, no-wrap
msgid "Setup"
msgstr "Configuração"

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:561
#: doc/guix-cookbook.texi:994 doc/guix-cookbook.texi:995
#, no-wrap
msgid "Extended example"
msgstr "Exemplo estendido"

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:561
#: doc/guix-cookbook.texi:1398 doc/guix-cookbook.texi:1399
#, no-wrap
msgid "Other build systems"
msgstr "Outros sistemas de construção"

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:123
#: doc/guix-cookbook.texi:561 doc/guix-cookbook.texi:1416
#: doc/guix-cookbook.texi:1417
#, no-wrap
msgid "Programmable and automated package definition"
msgstr "Definição de pacote programável e automatizada"

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:561
#: doc/guix-cookbook.texi:1533 doc/guix-cookbook.texi:1534
#, no-wrap
msgid "Getting help"
msgstr "Obtendo ajuda"

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:561
#: doc/guix-cookbook.texi:1546 doc/guix-cookbook.texi:1547
#, no-wrap
msgid "Conclusion"
msgstr "Conclusão"

#. type: subsection
#: doc/guix-cookbook.texi:115 doc/guix-cookbook.texi:561
#: doc/guix-cookbook.texi:1567 doc/guix-cookbook.texi:1568
#, no-wrap
msgid "References"
msgstr "Referências"

#. type: subsubsection
#: doc/guix-cookbook.texi:121 doc/guix-cookbook.texi:772
#: doc/guix-cookbook.texi:774 doc/guix-cookbook.texi:775
#, no-wrap
msgid "Local file"
msgstr "Arquivo local"

#. type: subsubsection
#: doc/guix-cookbook.texi:121 doc/guix-cookbook.texi:772
#: doc/guix-cookbook.texi:794 doc/guix-cookbook.texi:795
#, no-wrap
msgid "Channels"
msgstr "Canais"

#. type: subsubsection
#: doc/guix-cookbook.texi:121 doc/guix-cookbook.texi:772
#: doc/guix-cookbook.texi:908 doc/guix-cookbook.texi:909
#, no-wrap
msgid "Direct checkout hacking"
msgstr "Direct checkout hacking"

#. type: subsubsection
#: doc/guix-cookbook.texi:127 doc/guix-cookbook.texi:1428
#: doc/guix-cookbook.texi:1430 doc/guix-cookbook.texi:1431
#, no-wrap
msgid "Recursive importers"
msgstr "Importadores recursivos"

#. type: subsubsection
#: doc/guix-cookbook.texi:127 doc/guix-cookbook.texi:1428
#: doc/guix-cookbook.texi:1489 doc/guix-cookbook.texi:1490
#, no-wrap
msgid "Automatic update"
msgstr "Atualização automática"

#. type: subsubsection
#: doc/guix-cookbook.texi:127 doc/guix-cookbook.texi:1428
#: doc/guix-cookbook.texi:1507 doc/guix-cookbook.texi:1508
#, no-wrap
msgid "Inheritance"
msgstr "Herança"

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:1608 doc/guix-cookbook.texi:1609
#, no-wrap
msgid "Auto-Login to a Specific TTY"
msgstr "Login automático em um TTY específico"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Automatically Login a User to a Specific TTY"
msgstr "Faça login automaticamente de um usuário em um TTY específico"

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:1653 doc/guix-cookbook.texi:1654
#, no-wrap
msgid "Customizing the Kernel"
msgstr "Customizando o Kernel"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Creating and using a custom Linux kernel on Guix System."
msgstr "Criando e usando um kernel Linux customizado no Sistema Guix."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:1893 doc/guix-cookbook.texi:1894
#, no-wrap
msgid "Guix System Image API"
msgstr "API de imagem do sistema Guix"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Customizing images to target specific platforms."
msgstr "Customizando imagens visando plataformas específicas."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:2110 doc/guix-cookbook.texi:2111
#, no-wrap
msgid "Using security keys"
msgstr "Usando chaves de segurança"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "How to use security keys with Guix System."
msgstr "Como usar chaves de segurança com o Sistema Guix."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:2232 doc/guix-cookbook.texi:2233
#, no-wrap
msgid "Dynamic DNS mcron job"
msgstr "Trabalho mcron de DNS dinâmico"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Job to update the IP address behind a DuckDNS host name."
msgstr "Tarefa para atualizar o endereço IP por trás de um nome de host DuckDNS."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:2285 doc/guix-cookbook.texi:2286
#, no-wrap
msgid "Connecting to Wireguard VPN"
msgstr "Conectando-se à VPN Wireguard"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Connecting to a Wireguard VPN."
msgstr "Conectando-se a uma VPN Wireguard."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:145
#: doc/guix-cookbook.texi:1606 doc/guix-cookbook.texi:2362
#: doc/guix-cookbook.texi:2363
#, no-wrap
msgid "Customizing a Window Manager"
msgstr "Customizando um Gerenciador de Janelas"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Handle customization of a Window manager on Guix System."
msgstr "Customização de um gerenciador de janelas no Sistema Guix."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:2467 doc/guix-cookbook.texi:2468
#, no-wrap
msgid "Running Guix on a Linode Server"
msgstr "Executando Guix em um Servidor Linode"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Running Guix on a Linode Server."
msgstr "Executando Guix em um Servidor Linode."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:2708 doc/guix-cookbook.texi:2709
#, fuzzy, no-wrap
#| msgid "Running Guix on a Linode Server"
msgid "Running Guix on a Kimsufi Server"
msgstr "Executando Guix em um Servidor Linode"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Running Guix on a Kimsufi Server."
msgstr "Executando Guix em um servidor Kimsufi."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:2955 doc/guix-cookbook.texi:2956
#, no-wrap
msgid "Setting up a bind mount"
msgstr "Configurando uma montagem vinculada"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Setting up a bind mount in the file-systems definition."
msgstr "Configurando uma montagem vinculada na definição de sistemas de arquivos."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:3009 doc/guix-cookbook.texi:3010
#, no-wrap
msgid "Getting substitutes from Tor"
msgstr "Obtendo substitutos pelo Tor"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Configuring Guix daemon to get substitutes through Tor."
msgstr "Configurando o daemon Guix para obter substitutos através do Tor."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:3073 doc/guix-cookbook.texi:3074
#, no-wrap
msgid "Setting up NGINX with Lua"
msgstr "Configurando NGINX com Lua"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Configuring NGINX web-server to load Lua modules."
msgstr "Configurando o servidor web NGINX para carregar módulos Lua."

#. type: section
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
#: doc/guix-cookbook.texi:3130 doc/guix-cookbook.texi:3131
#, no-wrap
msgid "Music Server with Bluetooth Audio"
msgstr "Servidor de música com áudio Bluetooth"

#. type: menuentry
#: doc/guix-cookbook.texi:143 doc/guix-cookbook.texi:1606
msgid "Headless music player with Bluetooth output."
msgstr "Leitor de música com saída Bluetooth."

#. type: subsection
#: doc/guix-cookbook.texi:148 doc/guix-cookbook.texi:2369
#: doc/guix-cookbook.texi:2371 doc/guix-cookbook.texi:2372
#, no-wrap
msgid "StumpWM"
msgstr "StumpWM"

#. type: subsection
#: doc/guix-cookbook.texi:148 doc/guix-cookbook.texi:150
#: doc/guix-cookbook.texi:2369 doc/guix-cookbook.texi:2419
#: doc/guix-cookbook.texi:2420
#, no-wrap
msgid "Session lock"
msgstr "Bloqueio de sessão"

#. type: subsubsection
#: doc/guix-cookbook.texi:152 doc/guix-cookbook.texi:2430
#: doc/guix-cookbook.texi:2432 doc/guix-cookbook.texi:2433
#, no-wrap
msgid "Xorg"
msgstr "Xorg"

#. type: section
#: doc/guix-cookbook.texi:157 doc/guix-cookbook.texi:3349
#: doc/guix-cookbook.texi:3351 doc/guix-cookbook.texi:3352
#, no-wrap
msgid "Guix Containers"
msgstr "Contêineres Guix"

#. type: menuentry
#: doc/guix-cookbook.texi:157 doc/guix-cookbook.texi:3349
msgid "Perfectly isolated environments"
msgstr "Ambientes perfeitamente isolados"

#. type: section
#: doc/guix-cookbook.texi:157 doc/guix-cookbook.texi:159
#: doc/guix-cookbook.texi:3349 doc/guix-cookbook.texi:3500
#: doc/guix-cookbook.texi:3501
#, no-wrap
msgid "Guix System Containers"
msgstr "Contêineres do Sistema Guix"

#. type: menuentry
#: doc/guix-cookbook.texi:157 doc/guix-cookbook.texi:3349
msgid "A system inside your system"
msgstr "Um sistema dentro do seu sistema"

#. type: subsection
#: doc/guix-cookbook.texi:162 doc/guix-cookbook.texi:3535
#: doc/guix-cookbook.texi:3537 doc/guix-cookbook.texi:3538
#, no-wrap
msgid "A Database Container"
msgstr "Um banco de dados de contêineres"

#. type: subsection
#: doc/guix-cookbook.texi:162 doc/guix-cookbook.texi:3535
#: doc/guix-cookbook.texi:3649 doc/guix-cookbook.texi:3650
#, no-wrap
msgid "Container Networking"
msgstr "Rede em contêineres"

#. type: section
#: doc/guix-cookbook.texi:167 doc/guix-cookbook.texi:3738
#: doc/guix-cookbook.texi:3740 doc/guix-cookbook.texi:3741
#, no-wrap
msgid "Network bridge for QEMU"
msgstr "Ponte de rede para QEMU"

#. type: section
#: doc/guix-cookbook.texi:167 doc/guix-cookbook.texi:3738
#: doc/guix-cookbook.texi:3861 doc/guix-cookbook.texi:3862
#, no-wrap
msgid "Routed network for libvirt"
msgstr "Roteamento de rede para libvirt"

#. type: section
#: doc/guix-cookbook.texi:171 doc/guix-cookbook.texi:173
#: doc/guix-cookbook.texi:3970 doc/guix-cookbook.texi:3972
#: doc/guix-cookbook.texi:3973
#, no-wrap
msgid "Guix Profiles in Practice"
msgstr "Perfis Guix na Prática"

#. type: menuentry
#: doc/guix-cookbook.texi:171 doc/guix-cookbook.texi:3970
msgid "Strategies for multiple profiles and manifests."
msgstr "Estratégias para múltiplos perfis e manifestos."

#. type: subsection
#: doc/guix-cookbook.texi:179 doc/guix-cookbook.texi:4064
#: doc/guix-cookbook.texi:4066 doc/guix-cookbook.texi:4067
#, no-wrap
msgid "Basic setup with manifests"
msgstr "Configuração básica com manifestos"

#. type: subsection
#: doc/guix-cookbook.texi:179 doc/guix-cookbook.texi:4064
#: doc/guix-cookbook.texi:4202 doc/guix-cookbook.texi:4203
#, no-wrap
msgid "Required packages"
msgstr "Pacotes necessários"

#. type: subsection
#: doc/guix-cookbook.texi:179 doc/guix-cookbook.texi:4064
#: doc/guix-cookbook.texi:4230 doc/guix-cookbook.texi:4231
#, no-wrap
msgid "Default profile"
msgstr "Perfil padrão"

#. type: subsection
#: doc/guix-cookbook.texi:179 doc/guix-cookbook.texi:4064
#: doc/guix-cookbook.texi:4249 doc/guix-cookbook.texi:4250
#, no-wrap
msgid "The benefits of manifests"
msgstr "Os benefícios dos manifestos"

#. type: subsection
#: doc/guix-cookbook.texi:179 doc/guix-cookbook.texi:4064
#: doc/guix-cookbook.texi:4324 doc/guix-cookbook.texi:4325
#, no-wrap
msgid "Reproducible profiles"
msgstr "Perfis reproduzíveis"

#. type: section
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
#: doc/guix-cookbook.texi:4399 doc/guix-cookbook.texi:4400
#, no-wrap
msgid "Getting Started"
msgstr "Começando"

#. type: menuentry
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
msgid "Step 0: using `guix shell'."
msgstr "Passo 0: usando `guix shell'."

#. type: node
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
#: doc/guix-cookbook.texi:4519
#, no-wrap
msgid "Building with Guix"
msgstr "Construindo com Guix"

#. type: menuentry
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
msgid "Step 1: building your code."
msgstr "Etapa 1: construindo seu código."

#. type: node
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
#: doc/guix-cookbook.texi:4609
#, no-wrap
msgid "The Repository as a Channel"
msgstr "O Repositório como um Canal"

#. type: menuentry
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
msgid "Step 2: turning the repo in a channel."
msgstr "Passo 2: transformar o repositório em um canal."

#. type: node
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
#: doc/guix-cookbook.texi:4745
#, fuzzy, no-wrap
#| msgid "Packaging"
msgid "Package Variants"
msgstr "Empacotamento"

#. type: menuentry
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
msgid "Bonus: Defining variants."
msgstr "Bônus: definição de variantes."

#. type: node
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
#: doc/guix-cookbook.texi:4797
#, no-wrap
msgid "Setting Up Continuous Integration"
msgstr "Configurando Integração Contínua"

#. type: menuentry
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
msgid "Step 3: continuous integration."
msgstr "Etapa 3: integração contínua."

#. type: node
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
#: doc/guix-cookbook.texi:4872
#, no-wrap
msgid "Build Manifest"
msgstr "Construir Manifesto"

#. type: menuentry
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
msgid "Bonus: Manifest."
msgstr "Bônus: Manifesto."

#. type: section
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
#: doc/guix-cookbook.texi:4965 doc/guix-cookbook.texi:4966
#, no-wrap
msgid "Wrapping Up"
msgstr "Empacotando"

#. type: menuentry
#: doc/guix-cookbook.texi:189 doc/guix-cookbook.texi:4397
msgid "Recap."
msgstr "Recapitular."

#. type: section
#: doc/guix-cookbook.texi:193 doc/guix-cookbook.texi:5021
#: doc/guix-cookbook.texi:5023 doc/guix-cookbook.texi:5024
#, no-wrap
msgid "Guix environment via direnv"
msgstr "Ambiente Guix via direnv"

#. type: menuentry
#: doc/guix-cookbook.texi:193 doc/guix-cookbook.texi:5021
msgid "Setup Guix environment with direnv"
msgstr "Configurar ambiente Guix com o direnv"

#. type: section
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
#: doc/guix-cookbook.texi:5170 doc/guix-cookbook.texi:5171
#, no-wrap
msgid "Setting Up a Head Node"
msgstr "Configurando um nó principal"

#. type: menuentry
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
msgid "The node that runs the daemon."
msgstr "O nó que executa o daemon."

#. type: section
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
#: doc/guix-cookbook.texi:5278 doc/guix-cookbook.texi:5279
#, no-wrap
msgid "Setting Up Compute Nodes"
msgstr "Configurando nós de computação"

#. type: menuentry
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
msgid "Client nodes."
msgstr "Nós clientes."

#. type: node
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
#: doc/guix-cookbook.texi:5367
#, no-wrap
msgid "Cluster Network Access"
msgstr "Acesso à rede de cluster"

#. type: menuentry
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
msgid "Dealing with network access restrictions."
msgstr "Lidando com restrições de acesso à rede."

#. type: node
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
#: doc/guix-cookbook.texi:5453
#, no-wrap
msgid "Cluster Disk Usage"
msgstr "Uso de disco de cluster"

#. type: menuentry
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
msgid "Disk usage considerations."
msgstr "Considerações sobre o uso do disco."

#. type: node
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
#: doc/guix-cookbook.texi:5498
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "Cluster Security Considerations"
msgstr "Configuração do sistema"

#. type: menuentry
#: doc/guix-cookbook.texi:201 doc/guix-cookbook.texi:5168
msgid "Keeping the cluster secure."
msgstr "Mantendo o cluster seguro."

#. type: Plain text
#: doc/guix-cookbook.texi:213
msgid "GNU@tie{}Guix is written in the general purpose programming language Scheme, and many of its features can be accessed and manipulated programmatically.  You can use Scheme to generate package definitions, to modify them, to build them, to deploy whole operating systems, etc."
msgstr "GNU@tie{}Guix foi escrito na linguagem de programação de uso geral Scheme, e muitos de seus recursos podem ser acessados e manipulados programaticamente. Você pode usar Scheme para gerar definições de pacotes, modificá-los, construí-los, implantar sistemas operacionais inteiros, etc."

#. type: Plain text
#: doc/guix-cookbook.texi:217
msgid "Knowing the basics of how to program in Scheme will unlock many of the advanced features Guix provides --- and you don't even need to be an experienced programmer to use them!"
msgstr "Conhecer o básico de como programar com Scheme irá desbloquear muitos dos recursos avançados que o Guix oferece --- e você nem precisa ser um programador experiente para usá-los!"

#. type: Plain text
#: doc/guix-cookbook.texi:219
msgid "Let's get started!"
msgstr "Vamos começar!"

#. type: cindex
#: doc/guix-cookbook.texi:227
#, no-wrap
msgid "Scheme, crash course"
msgstr "Scheme, curso intensivo"

#. type: Plain text
#: doc/guix-cookbook.texi:233
msgid "Guix uses the Guile implementation of Scheme.  To start playing with the language, install it with @code{guix install guile} and start a @dfn{REPL}---short for @uref{https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop, @dfn{read-eval-print loop}}---by running @code{guile} from the command line."
msgstr "Guix usa a implementação Guile do Scheme. Para começar a brincar com a linguagem, instale-a com @code{guix install guile} e inicie um @dfn{REPL}---abreviação de @uref{https://en.wikipedia.org/wiki/Read%E2%80 %93eval%E2%80%93print_loop, @dfn{read-eval-print loop}}---executando @code{guile} na linha de comando."

#. type: Plain text
#: doc/guix-cookbook.texi:236
msgid "Alternatively you can also run @code{guix shell guile -- guile} if you'd rather not have Guile installed in your user profile."
msgstr "Alternativamente, você também pode executar @code{guix shell guile -- guile} se preferir não ter o Guile instalado em seu perfil de usuário."

#. type: Plain text
#: doc/guix-cookbook.texi:242
msgid "In the following examples, lines show what you would type at the REPL; lines starting with ``@result{}'' show evaluation results, while lines starting with ``@print{}'' show things that get printed.  @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, for more details on the REPL."
msgstr "Nos exemplos a seguir, as linhas mostram o que você digitaria no REPL; linhas que começam com ``@result{}'' mostram resultados de avaliação, enquanto linhas que começam com ``@print{}'' mostram coisas que são impressas. @xref{Using Guile Interactively,,, guile, GNU Guile Reference Manual}, para mais detalhes sobre o REPL."

#. type: itemize
#: doc/guix-cookbook.texi:250
msgid "Scheme syntax boils down to a tree of expressions (or @emph{s-expression} in Lisp lingo).  An expression can be a literal such as numbers and strings, or a compound which is a parenthesized list of compounds and literals.  @code{#true} and @code{#false} (abbreviated @code{#t} and @code{#f}) stand for the Booleans ``true'' and ``false'', respectively."
msgstr "A sintaxe do esquema se resume a uma árvore de expressões (ou @emph{s-expression} no jargão Lisp). Uma expressão pode ser um literal, como números e strings, ou um composto que é uma lista entre parênteses de compostos e literais. @code{#true} e @code{#false} (abreviados @code{#t} e @code{#f}) representam os booleanos ``true'' e ``false'', respectivamente."

#. type: itemize
#: doc/guix-cookbook.texi:252
msgid "Examples of valid expressions:"
msgstr "Exemplos de expressões válidas:"

#. type: lisp
#: doc/guix-cookbook.texi:256
#, no-wrap
msgid ""
"\"Hello World!\"\n"
"@result{} \"Hello World!\"\n"
"\n"
msgstr ""
"\"Hello World!\"\n"
"@result{} \"Hello World!\"\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:259
#, fuzzy, no-wrap
msgid ""
"17\n"
"@result{} 17\n"
"\n"
msgstr ""
"17\n"
"@result{} 17\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:263
#, fuzzy, no-wrap
msgid ""
"(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@print{} Hello Guix!\n"
"@result{} #<unspecified>\n"
msgstr ""
"(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@print{} Hello Guix!\n"
"@result{} #<unspecified>\n"

#. type: itemize
#: doc/guix-cookbook.texi:270
msgid "This last example is a function call nested in another function call.  When a parenthesized expression is evaluated, the first term is the function and the rest are the arguments passed to the function.  Every function returns the last evaluated expression as its return value."
msgstr "Este último exemplo é uma chamada de função aninhada em outra chamada de função. Quando uma expressão entre parênteses é avaliada, o primeiro termo é a função e o restante são os argumentos passados para a função. Cada função retorna a última expressão avaliada como valor de retorno."

#. type: itemize
#: doc/guix-cookbook.texi:274
msgid "Anonymous functions---@dfn{procedures} in Scheme parlance---are declared with the @code{lambda} term:"
msgstr "Funções anônimas ---@dfn{procedures} na linguagem do Scheme --- são declaradas com o termo @code{lambda}:"

#. type: lisp
#: doc/guix-cookbook.texi:278
#, fuzzy, no-wrap
msgid ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"
msgstr ""
"(lambda (x) (* x x))\n"
"@result{} #<procedure 120e348 at <unknown port>:24:0 (x)>\n"

#. type: itemize
#: doc/guix-cookbook.texi:283
msgid "The above procedure returns the square of its argument.  Since everything is an expression, the @code{lambda} expression returns an anonymous procedure, which can in turn be applied to an argument:"
msgstr "O procedimento acima retorna o quadrado do seu argumento. Como tudo é uma expressão, a expressão @code{lambda} retorna um procedimento anônimo, que por sua vez pode ser aplicado a um argumento:"

#. type: lisp
#: doc/guix-cookbook.texi:287
#, fuzzy, no-wrap
msgid ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"
msgstr ""
"((lambda (x) (* x x)) 3)\n"
"@result{} 9\n"

#. type: itemize
#: doc/guix-cookbook.texi:291
msgid "Procedures are regular values just like numbers, strings, Booleans, and so on."
msgstr "Os procedimentos são valores regulares, assim como números, strings, booleanos e assim por diante."

#. type: itemize
#: doc/guix-cookbook.texi:294
msgid "Anything can be assigned a global name with @code{define}:"
msgstr "Qualquer coisa pode receber um nome global com @code{define}:"

#. type: lisp
#: doc/guix-cookbook.texi:300
#, fuzzy, no-wrap
msgid ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"
msgstr ""
"(define a 3)\n"
"(define square (lambda (x) (* x x)))\n"
"(square a)\n"
"@result{} 9\n"

#. type: itemize
#: doc/guix-cookbook.texi:304
msgid "Procedures can be defined more concisely with the following syntax:"
msgstr "Os procedimentos podem ser definidos de forma mais concisa com a seguinte sintaxe:"

#. type: lisp
#: doc/guix-cookbook.texi:307
#, fuzzy, no-wrap
msgid "(define (square x) (* x x))\n"
msgstr "(define (square x) (* x x))\n"

#. type: itemize
#: doc/guix-cookbook.texi:311
msgid "A list structure can be created with the @code{list} procedure:"
msgstr "Uma estrutura de lista pode ser criada com o procedimento @code{list}:"

#. type: lisp
#: doc/guix-cookbook.texi:315
#, fuzzy, no-wrap
msgid ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"
msgstr ""
"(list 2 a 5 7)\n"
"@result{} (2 3 5 7)\n"

#. type: itemize
#: doc/guix-cookbook.texi:322
msgid "Standard procedures are provided by the @code{(srfi srfi-1)} module to create and process lists (@pxref{SRFI-1, list processing,, guile, GNU Guile Reference Manual}).  Here are some of the most useful ones in action:"
msgstr "Os procedimentos padrão são fornecidos pelo módulo @code{(srfi srfi-1)} para criar e processar listas (@pxref{SRFI-1, processamento de listas,, guile, GNU Guile Reference Manual}). Aqui estão alguns dos mais úteis em ação:"

#. type: lisp
#: doc/guix-cookbook.texi:325
#, fuzzy, no-wrap
msgid ""
"(use-modules (srfi srfi-1))  ;import list processing procedures\n"
"\n"
msgstr ""
"(use-modules (srfi srfi-1))  ;import list processing procedures\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:328
#, fuzzy, no-wrap
msgid ""
"(append (list 1 2) (list 3 4))\n"
"@result{} (1 2 3 4)\n"
"\n"
msgstr ""
"(append (list 1 2) (list 3 4))\n"
"@result{} (1 2 3 4)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:331
#, fuzzy, no-wrap
msgid ""
"(map (lambda (x) (* x x)) (list 1 2 3 4))\n"
"@result{} (1 4 9 16)\n"
"\n"
msgstr ""
"(map (lambda (x) (* x x)) (list 1 2 3 4))\n"
"@result{} (1 4 9 16)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:336
#, fuzzy, no-wrap
msgid ""
"(delete 3 (list 1 2 3 4))        @result{} (1 2 4)\n"
"(filter odd? (list 1 2 3 4))     @result{} (1 3)\n"
"(remove even? (list 1 2 3 4))    @result{} (1 3)\n"
"(find number? (list \"a\" 42 \"b\")) @result{} 42\n"
msgstr ""
"(delete 3 (list 1 2 3 4))        @result{} (1 2 4)\n"
"(filter odd? (list 1 2 3 4))     @result{} (1 3)\n"
"(remove even? (list 1 2 3 4))    @result{} (1 3)\n"
"(find number? (list \"a\" 42 \"b\")) @result{} 42\n"

#. type: itemize
#: doc/guix-cookbook.texi:340
msgid "Notice how the first argument to @code{map}, @code{filter}, @code{remove}, and @code{find} is a procedure!"
msgstr "Observe como o primeiro argumento para @code{map}, @code{filter}, @code{remove} e @code{find} é um procedimento!"

#. type: cindex
#: doc/guix-cookbook.texi:342
#, no-wrap
msgid "S-expression"
msgstr "expressão simbólica (\"S-expression\")"

#. type: itemize
#: doc/guix-cookbook.texi:347
msgid "The @dfn{quote} disables evaluation of a parenthesized expression, also called an S-expression or ``s-exp'': the first term is not called over the other terms (@pxref{Expression Syntax, quote,, guile, GNU Guile Reference Manual}).  Thus it effectively returns a list of terms."
msgstr "O @dfn{quote} desativa a avaliação de uma expressão entre parênteses, também chamada de expressão S ou ``s-exp'': o primeiro termo não é chamado sobre os outros termos (@pxref{Sintaxe da expressão, quote,, guile, Manual de referência do GNU Guile}). Assim, ele efetivamente retorna uma lista de termos."

#. type: lisp
#: doc/guix-cookbook.texi:351
#, fuzzy, no-wrap
msgid ""
"'(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"\n"
msgstr ""
"'(display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"@result{} (display (string-append \"Hello \" \"Guix\" \"\\n\"))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:354
#, fuzzy, no-wrap
msgid ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"
msgstr ""
"'(2 a 5 7)\n"
"@result{} (2 a 5 7)\n"

#. type: itemize
#: doc/guix-cookbook.texi:361
msgid "The @code{quasiquote} (@code{`}, a backquote) disables evaluation of a parenthesized expression until @code{unquote} (@code{,}, a comma)  re-enables it.  Thus it provides us with fine-grained control over what is evaluated and what is not."
msgstr "O @code{quasiquote} (@code{`}, uma crase) desativa a avaliação de uma expressão entre parênteses até que @code{unquote} (@code{,}, uma vírgula) a reative. Assim, nos fornece um controle refinado sobre o que é avaliado e o que não é."

#. type: lisp
#: doc/guix-cookbook.texi:365
#, fuzzy, no-wrap
msgid ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"
msgstr ""
"`(2 a 5 7 (2 ,a 5 ,(+ a 4)))\n"
"@result{} (2 a 5 7 (2 3 5 7))\n"

#. type: itemize
#: doc/guix-cookbook.texi:369
msgid "Note that the above result is a list of mixed elements: numbers, symbols (here @code{a}) and the last element is a list itself."
msgstr "Observe que o resultado acima é uma lista de elementos mistos: números, símbolos (aqui @code{a}) e o último elemento é uma lista em si."

#. type: cindex
#: doc/guix-cookbook.texi:371
#, no-wrap
msgid "G-expressions, syntax"
msgstr "G-expressions, sintaxe"

#. type: cindex
#: doc/guix-cookbook.texi:372
#, no-wrap
msgid "gexps, syntax"
msgstr "gexps, sintaxe"

#. type: findex
#: doc/guix-cookbook.texi:373
#, fuzzy, no-wrap
msgid "#~"
msgstr "#~"

#. type: findex
#: doc/guix-cookbook.texi:374
#, fuzzy, no-wrap
msgid "#$"
msgstr "#$"

#. type: findex
#: doc/guix-cookbook.texi:375
#, fuzzy, no-wrap
msgid "gexp"
msgstr "gexp"

#. type: findex
#: doc/guix-cookbook.texi:376
#, no-wrap
msgid "ungexp"
msgstr "ungexp"

#. type: itemize
#: doc/guix-cookbook.texi:382
msgid "Guix defines a variant of S-expressions on steroids called @dfn{G-expressions} or ``gexps'', which come with a variant of @code{quasiquote} and @code{unquote}: @code{#~} (or @code{gexp}) and @code{#$} (or @code{ungexp}).  They let you @emph{stage code for later execution}."
msgstr "Guix define uma variante de expressões simbólicas (S-expressions) com esteróides chamada @dfn{G-expressions} ou ``gexps'', que vem com uma variante de @code{quasiquote} e @code{unquote}: @code{#~} ( ou @code{gexp}) e @code{#$} (ou @code{ungexp}). Eles permitem @emph{preparar código para execução posterior}."

#. type: itemize
#: doc/guix-cookbook.texi:386
msgid "For example, you'll encounter gexps in some package definitions where they provide code to be executed during the package build process.  They look like this:"
msgstr "Por exemplo, você encontrará gexps em algumas definições de pacotes onde eles fornecem código a ser executado durante o processo de construção do pacote. Eles se parecem com isto:"

#. type: lisp
#: doc/guix-cookbook.texi:390
#, no-wrap
msgid ""
"(use-modules (guix gexp)           ;so we can write gexps\n"
"             (gnu packages base))  ;for 'coreutils'\n"
"\n"
msgstr ""
"(use-modules (guix gexp)           ;so we can write gexps\n"
"             (gnu packages base))  ;for 'coreutils'\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:396
#, fuzzy, no-wrap
msgid ""
";; Below is a G-expression representing staged code.\n"
"#~(begin\n"
"    ;; Invoke 'ls' from the package defined by the 'coreutils'\n"
"    ;; variable.\n"
"    (system* #$(file-append coreutils \"/bin/ls\") \"-l\")\n"
"\n"
msgstr ""
";; Below is a G-expression representing staged code.\n"
"#~(begin\n"
"    ;; Invoke 'ls' from the package defined by the 'coreutils'\n"
"    ;; variable.\n"
"    (system* #$(file-append coreutils \"/bin/ls\") \"-l\")\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:399
#, fuzzy, no-wrap
msgid ""
"    ;; Create this package's output directory.\n"
"    (mkdir #$output))\n"
msgstr ""
"    ;; Create this package's output directory.\n"
"    (mkdir #$output))\n"

#. type: itemize
#: doc/guix-cookbook.texi:403
msgid "@xref{G-Expressions,,, guix, GNU Guix Reference Manual}, for more on gexps."
msgstr "@xref{Expressões-G,,, guix.pt_BR, GNU Guix Reference Manual}, para saber mais sobre gexps."

#. type: itemize
#: doc/guix-cookbook.texi:407
msgid "Multiple variables can be named locally with @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"
msgstr "Múltiplas variáveis podem ser nomeadas localmente com @code{let} (@pxref{Local Bindings,,, guile, GNU Guile Reference Manual}):"

#. type: lisp
#: doc/guix-cookbook.texi:414
#, no-wrap
msgid ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"
msgstr ""
"(define x 10)\n"
"(let ((x 2)\n"
"      (y 3))\n"
"  (list x y))\n"
"@result{} (2 3)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:417
#, no-wrap
msgid ""
"x\n"
"@result{} 10\n"
"\n"
msgstr ""
"x\n"
"@result{} 10\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:420
#, fuzzy, no-wrap
msgid ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"
msgstr ""
"y\n"
"@error{} In procedure module-lookup: Unbound variable: y\n"

#. type: itemize
#: doc/guix-cookbook.texi:424
msgid "Use @code{let*} to allow later variable declarations to refer to earlier definitions."
msgstr "Use @code{let*} para permitir que declarações de variáveis posteriores se refiram a definições anteriores."

#. type: lisp
#: doc/guix-cookbook.texi:430
#, no-wrap
msgid ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"
msgstr ""
"(let* ((x 2)\n"
"       (y (* x 3)))\n"
"  (list x y))\n"
"@result{} (2 6)\n"

#. type: itemize
#: doc/guix-cookbook.texi:437
msgid "@dfn{Keywords} are typically used to identify the named parameters of a procedure.  They are prefixed by @code{#:} (hash, colon) followed by alphanumeric characters: @code{#:like-this}.  @xref{Keywords,,, guile, GNU Guile Reference Manual}."
msgstr "@dfn{Keywords} normalmente são usados para identificar os parâmetros nomeados de um procedimento. Eles são prefixados por @code{#:} (hash, dois pontos) seguido por caracteres alfanuméricos: @code{#:like-this}. @xref{Palavras-chave,,, guile, Manual de referência do GNU Guile}."

#. type: itemize
#: doc/guix-cookbook.texi:442
msgid "The percentage @code{%} is typically used for read-only global variables in the build stage.  Note that it is merely a convention, like @code{_} in C.  Scheme treats @code{%} exactly the same as any other letter."
msgstr "A porcentagem @code{%} normalmente é usada para variáveis globais somente-leitura no estágio de construção. Observe que é apenas uma convenção, como @code{_} em C. Scheme trata @code{%} exatamente da mesma forma que qualquer outra letra."

#. type: itemize
#: doc/guix-cookbook.texi:446
msgid "Modules are created with @code{define-module} (@pxref{Creating Guile Modules,,, guile, GNU Guile Reference Manual}).  For instance"
msgstr "Os módulos são criados com @code{define-module} (@pxref{Criando Módulos Guile,,, guile, GNU Guile Reference Manual}). Por exemplo"

#. type: lisp
#: doc/guix-cookbook.texi:452
#, no-wrap
msgid ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"
msgstr ""
"(define-module (guix build-system ruby)\n"
"  #:use-module (guix store)\n"
"  #:export (ruby-build\n"
"            ruby-build-system))\n"

#. type: itemize
#: doc/guix-cookbook.texi:458
msgid "defines the module @code{guix build-system ruby} which must be located in @file{guix/build-system/ruby.scm} somewhere in the Guile load path.  It depends on the @code{(guix store)} module and it exports two variables, @code{ruby-build} and @code{ruby-build-system}."
msgstr "define o módulo @code{guix build-system ruby} que deve estar localizado em @file{guix/build-system/ruby.scm} em algum lugar no caminho de carregamento do Guile. Depende do módulo @code{(guix store)} e exporta duas variáveis, @code{ruby-build} e @code{ruby-build-system}."

#. type: itemize
#: doc/guix-cookbook.texi:461
msgid "@xref{Package Modules,,, guix, GNU Guix Reference Manual}, for info on modules that define packages."
msgstr "@xref{Módulos de pacote,,, guix.pt_BR, GNU Guix Reference Manual}, para informações sobre módulos que definem pacotes."

#. type: quotation
#: doc/guix-cookbook.texi:463
#, no-wrap
msgid "Going further"
msgstr "Indo além"

#. type: quotation
#: doc/guix-cookbook.texi:467
msgid "Scheme is a language that has been widely used to teach programming and you'll find plenty of material using it as a vehicle.  Here's a selection of documents to learn more about Scheme:"
msgstr "Scheme é uma linguagem que tem sido amplamente utilizada para ensinar programação e você encontrará muito material usando-a como veículo. Aqui está uma seleção de documentos para saber mais sobre o Scheme:"

#. type: itemize
#: doc/guix-cookbook.texi:472
msgid "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, by Christine Lemmer-Webber and the Spritely Institute."
msgstr "@uref{https://spritely.institute/static/papers/scheme-primer.html, @i{A Scheme Primer}}, by Christine Lemmer-Webber and the Spritely Institute."

#. type: itemize
#: doc/guix-cookbook.texi:476
msgid "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, @i{Scheme at a Glance}}, by Steve Litt."
msgstr "@uref{http://www.troubleshooters.com/codecorn/scheme_guile/hello.htm, @i{Scheme at a Glance}}, por Steve Litt."

#. type: itemize
#: doc/guix-cookbook.texi:483
msgid "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, by Harold Abelson and Gerald Jay Sussman, with Julie Sussman.  Colloquially known as ``SICP'', this book is a reference."
msgstr "@uref{https://sarabander.github.io/sicp/, @i{Structure and Interpretation of Computer Programs}}, por Harold Abelson e Gerald Jay Sussman, com Julie Sussman. Coloquialmente conhecido como ``SICP'', este livro é uma referência."

#. type: itemize
#: doc/guix-cookbook.texi:485
msgid "You can also install it and read it from your computer:"
msgstr "Você também pode instalá-lo e lê-lo em seu computador:"

#. type: example
#: doc/guix-cookbook.texi:489
#, no-wrap
msgid ""
"guix install sicp info-reader\n"
"info sicp\n"
msgstr ""
"guix install sicp info-reader\n"
"info sicp\n"

#. type: quotation
#: doc/guix-cookbook.texi:495
msgid "You'll find more books, tutorials and other resources at @url{https://schemers.org/}."
msgstr "Você encontrará mais livros, tutoriais e outros recursos em @url{https://schemers.org/}."

#. type: cindex
#: doc/guix-cookbook.texi:502
#, no-wrap
msgid "packaging"
msgstr "Empacotamento"

#. type: Plain text
#: doc/guix-cookbook.texi:508
msgid "This chapter is dedicated to teaching you how to add packages to the collection of packages that come with GNU Guix.  This involves writing package definitions in Guile Scheme, organizing them in package modules, and building them."
msgstr "Este capítulo é dedicado a ensinar como adicionar pacotes à coleção de pacotes que vem com o GNU Guix. Isso envolve escrever definições de pacotes no Guile Scheme, organizá-las em módulos de pacotes e construí-las."

#. type: Plain text
#: doc/guix-cookbook.texi:522
msgid "GNU Guix stands out as the @emph{hackable} package manager, mostly because it uses @uref{https://www.gnu.org/software/guile/, GNU Guile}, a powerful high-level programming language, one of the @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} dialects from the @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lisp family}."
msgstr "GNU Guix se destaca como o gerenciador de pacotes @emph{hackeável}, principalmente porque usa @uref{https://www.gnu.org/software/guile/, GNU Guile}, uma poderosa linguagem de programação de alto nível, um dos dialetos @uref{https://en.wikipedia.org/wiki/Scheme_%28programming_language%29, Scheme} da família @uref{https://en.wikipedia.org/wiki/Lisp_%28programming_language%29, Lisp }."

#. type: Plain text
#: doc/guix-cookbook.texi:526
msgid "Package definitions are also written in Scheme, which empowers Guix in some very unique ways, unlike most other package managers that use shell scripts or simple languages."
msgstr "As definições de pacotes também são escritas em Scheme, o que capacita o Guix de maneiras muito exclusivas, ao contrário da maioria dos outros gerenciadores de pacotes que usam shell scripts ou linguagens simples."

#. type: itemize
#: doc/guix-cookbook.texi:531
msgid "Use functions, structures, macros and all of Scheme expressiveness for your package definitions."
msgstr "Utilize funções, estruturas, macros e toda a expressividade do Scheme para definições de seus pacotes."

#. type: itemize
#: doc/guix-cookbook.texi:535
msgid "Inheritance makes it easy to customize a package by inheriting from it and modifying only what is needed."
msgstr "A herança facilita a personalização de um pacote, herdando-o e modificando apenas o que é necessário."

#. type: itemize
#: doc/guix-cookbook.texi:545
msgid "Batch processing: the whole package collection can be parsed, filtered and processed.  Building a headless server with all graphical interfaces stripped out? It's possible.  Want to rebuild everything from source using specific compiler optimization flags? Pass the @code{#:make-flags \"...\"} argument to the list of packages.  It wouldn't be a stretch to think @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo USE flags} here, but this goes even further: the changes don't have to be thought out beforehand by the packager, they can be @emph{programmed} by the user!"
msgstr "Processamento em lote: toda a coleção de pacotes pode ser analisada, filtrada e processada. Construindo um servidor headless com todas as interfaces gráficas removidas? É possível. Quer reconstruir tudo, desde o código-fonte usando sinalizadores específicos de otimização do compilador? Passe o argumento @code{#:make-flags \"...\"} para a lista de pacotes. Não seria exagero pensar em @uref{https://wiki.gentoo.org/wiki/USE_flag, Gentoo USE flags} aqui, mas isso vai ainda mais longe: as mudanças não precisam ser pensadas de antemão pelo empacotador, elas podem ser @emph{programadas} pelo usuário!"

#. type: Plain text
#: doc/guix-cookbook.texi:551
msgid "The following tutorial covers all the basics around package creation with Guix.  It does not assume much knowledge of the Guix system nor of the Lisp language.  The reader is only expected to be familiar with the command line and to have some basic programming knowledge."
msgstr "O tutorial a seguir cobre todos os fundamentos da criação de pacotes com Guix. Não pressupõe muito conhecimento do sistema Guix nem da linguagem Lisp. Espera-se apenas que o leitor esteja familiarizado com a linha de comando e tenha alguns conhecimentos básicos de programação."

#. type: Plain text
#: doc/guix-cookbook.texi:569
msgid "The ``Defining Packages'' section of the manual introduces the basics of Guix packaging (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}).  In the following section, we will partly go over those basics again."
msgstr "A seção ``Definindo Pacotes'' do manual apresenta os fundamentos do empacotamento Guix (@pxref{Definindo pacotes,,, guix.pt_BR, GNU Guix Reference Manual}). Na seção seguinte, revisaremos parcialmente esses princípios básicos novamente."

#. type: Plain text
#: doc/guix-cookbook.texi:575
msgid "GNU@tie{}Hello is a dummy project that serves as an idiomatic example for packaging.  It uses the GNU build system (@code{./configure && make && make install}).  Guix already provides a package definition which is a perfect example to start with.  You can look up its declaration with @code{guix edit hello} from the command line.  Let's see how it looks:"
msgstr "GNU@tie{}Hello é um projeto fictício que serve como exemplo idiomático para empacotamento. Ele usa o sistema de compilação GNU (@code{./configure && make && make install}). Guix já fornece uma definição de pacote que é um exemplo perfeito para começar. Você pode consultar sua declaração com @code{guix edit hello} na linha de comando. Vamos ver como fica:"

#. type: lisp
#: doc/guix-cookbook.texi:596
#, no-wrap
msgid ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public hello\n"
"  (package\n"
"    (name \"hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, GNU world: An example GNU package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:600
msgid "As you can see, most of it is rather straightforward.  But let's review the fields together:"
msgstr "Como você pode ver, a maior parte é bastante simples. Mas vamos revisar os campos juntos:"

#. type: item
#: doc/guix-cookbook.texi:602
#, no-wrap
msgid "name"
msgstr "name"

#. type: table
#: doc/guix-cookbook.texi:605
msgid "The project name.  Using Scheme conventions, we prefer to keep it lower case, without underscore and using dash-separated words."
msgstr "O nome do projeto. Usando as convenções do Scheme, preferimos mantê-lo em minúsculas, sem sublinhado e usando palavras separadas por traços."

#. type: item
#: doc/guix-cookbook.texi:606
#, no-wrap
msgid "source"
msgstr "source"

#. type: table
#: doc/guix-cookbook.texi:609
msgid "This field contains a description of the source code origin.  The @code{origin} record contains these fields:"
msgstr "Este campo contém uma descrição da origem do código-fonte. O registro @code{origin} contém estes campos:"

#. type: item
#: doc/guix-cookbook.texi:611
#, no-wrap
msgid "The method, here @code{url-fetch} to download via HTTP/FTP, but other methods"
msgstr "O método, aqui @code{url-fetch} para download via HTTP/FTP, mas outros métodos"

#. type: enumerate
#: doc/guix-cookbook.texi:613
msgid "exist, such as @code{git-fetch} for Git repositories."
msgstr "existem, como @code{git-fetch} para repositórios Git."

#. type: item
#: doc/guix-cookbook.texi:613
#, no-wrap
msgid "The URI, which is typically some @code{https://} location for @code{url-fetch}.  Here"
msgstr "O URI, que normalmente é alguma @code{https://} localização para @code{url-fetch}. Aqui"

#. type: enumerate
#: doc/guix-cookbook.texi:616
msgid "the special `mirror://gnu` refers to a set of well known locations, all of which can be used by Guix to fetch the source, should some of them fail."
msgstr "o especial `mirror://gnu` refere-se a um conjunto de locais bem conhecidos, todos os quais podem ser usados pelo Guix para buscar a fonte, caso alguns deles falhem."

#. type: item
#: doc/guix-cookbook.texi:616
#, no-wrap
msgid "The @code{sha256} checksum of the requested file.  This is essential to ensure"
msgstr "A soma de verificação @code{sha256} do arquivo solicitado. Isto é essencial para garantir"

#. type: enumerate
#: doc/guix-cookbook.texi:619
msgid "the source is not corrupted.  Note that Guix works with base32 strings, hence the call to the @code{base32} function."
msgstr "que a fonte não está corrompida. Observe que o Guix funciona com strings base32, daí a chamada para a função @code{base32}."

#. type: item
#: doc/guix-cookbook.texi:621
#, no-wrap
msgid "build-system"
msgstr "build-system"

#. type: table
#: doc/guix-cookbook.texi:630
msgid "This is where the power of abstraction provided by the Scheme language really shines: in this case, the @code{gnu-build-system} abstracts away the famous @code{./configure && make && make install} shell invocations.  Other build systems include the @code{trivial-build-system} which does not do anything and requires from the packager to program all the build steps, the @code{python-build-system}, the @code{emacs-build-system}, and many more (@pxref{Build Systems,,, guix, GNU Guix Reference Manual})."
msgstr "É aqui que o poder de abstração fornecido pela linguagem Scheme realmente brilha: neste caso, o @code{gnu-build-system} abstrai as famosas invocações de shell @code{./configure && make && make install}. Outros sistemas de compilação incluem o @code{trivial-build-system} que não faz nada e exige que o empacotador programe todas as etapas de compilação, o @code{python-build-system}, o @code{emacs-build- system} e muito mais (@pxref{Sistemas de compilação,,, guix.pt_BR, GNU Guix Reference Manual})."

#. type: item
#: doc/guix-cookbook.texi:631
#, no-wrap
msgid "synopsis"
msgstr "synopsis"

#. type: table
#: doc/guix-cookbook.texi:634
msgid "It should be a concise summary of what the package does.  For many packages a tagline from the project's home page can be used as the synopsis."
msgstr "Deve ser um resumo conciso do que o pacote faz. Para muitos pacotes, uma etiqueta da página inicial do projeto pode ser usado como sinopse."

#. type: item
#: doc/guix-cookbook.texi:635
#, no-wrap
msgid "description"
msgstr "description"

#. type: table
#: doc/guix-cookbook.texi:638
msgid "Same as for the synopsis, it's fine to re-use the project description from the homepage.  Note that Guix uses Texinfo syntax."
msgstr "Assim como na sinopse, não há problema em reutilizar a descrição do projeto na página inicial. Observe que o Guix usa a sintaxe de Texinfo."

#. type: item
#: doc/guix-cookbook.texi:639
#, no-wrap
msgid "home-page"
msgstr "página inicial"

#. type: table
#: doc/guix-cookbook.texi:641
msgid "Use HTTPS if available."
msgstr "Use HTTPS, se disponível."

#. type: item
#: doc/guix-cookbook.texi:642
#, no-wrap
msgid "license"
msgstr "license"

#. type: table
#: doc/guix-cookbook.texi:645
msgid "See @code{guix/licenses.scm} in the project source for a full list of available licenses."
msgstr "Consulte @code{guix/licenses.scm} na fonte do projeto para obter uma lista completa de licenças disponíveis."

#. type: Plain text
#: doc/guix-cookbook.texi:649
msgid "Time to build our first package! Nothing fancy here for now: we will stick to a dummy @code{my-hello}, a copy of the above declaration."
msgstr "É hora de construir nosso primeiro pacote! Nada sofisticado aqui por enquanto: vamos nos ater a um @code{my-hello} fictício, uma cópia da declaração acima."

#. type: Plain text
#: doc/guix-cookbook.texi:653
msgid "As with the ritualistic ``Hello World'' taught with most programming languages, this will possibly be the most ``manual'' approach.  We will work out an ideal setup later; for now we will go the simplest route."
msgstr "Tal como acontece com o ritualístico ``Hello World'' ensinado com a maioria das linguagens de programação, esta será possivelmente a abordagem mais ``manual''. Trabalharemos em uma configuração ideal mais tarde; por enquanto seguiremos o caminho mais simples."

#. type: Plain text
#: doc/guix-cookbook.texi:655
msgid "Save the following to a file @file{my-hello.scm}."
msgstr "Salve o seguinte em um arquivo @file{my-hello.scm}."

#. type: lisp
#: doc/guix-cookbook.texi:661
#, no-wrap
msgid ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"
msgstr ""
"(use-modules (guix packages)\n"
"             (guix download)\n"
"             (guix build-system gnu)\n"
"             (guix licenses))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:680
#, no-wrap
msgid ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"
msgstr ""
"(package\n"
"  (name \"my-hello\")\n"
"  (version \"2.10\")\n"
"  (source (origin\n"
"            (method url-fetch)\n"
"            (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                \".tar.gz\"))\n"
"            (sha256\n"
"             (base32\n"
"              \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"  (build-system gnu-build-system)\n"
"  (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"  (description\n"
"   \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"  (home-page \"https://www.gnu.org/software/hello/\")\n"
"  (license gpl3+))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:683
msgid "We will explain the extra code in a moment."
msgstr "Explicaremos o código extra em um momento."

#. type: Plain text
#: doc/guix-cookbook.texi:690
msgid "Feel free to play with the different values of the various fields.  If you change the source, you'll need to update the checksum.  Indeed, Guix refuses to build anything if the given checksum does not match the computed checksum of the source code.  To obtain the correct checksum of the package declaration, we need to download the source, compute the sha256 checksum and convert it to base32."
msgstr "Sinta-se à vontade para brincar com os diferentes valores dos vários campos. Se você alterar a fonte, precisará atualizar a soma de verificação. Na verdade, Guix se recusa a construir qualquer coisa se a soma de verificação fornecida não corresponder à soma de verificação calculada do código-fonte. Para obter a soma de verificação correta da declaração do pacote, precisamos baixar o código-fonte, calcular a soma de verificação sha256 e convertê-la para base32."

#. type: Plain text
#: doc/guix-cookbook.texi:693
msgid "Thankfully, Guix can automate this task for us; all we need is to provide the URI:"
msgstr "Felizmente, o Guix pode automatizar essa tarefa para nós; tudo o que precisamos é fornecer o URI:"

#.  This is example shell output.
#. type: example
#: doc/guix-cookbook.texi:697
#, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:704
#, no-wrap
msgid ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"
msgstr ""
"Starting download of /tmp/guix-file.JLYgL7\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz...\n"
"following redirection to `https://mirror.ibcp.fr/pub/gnu/hello/hello-2.10.tar.gz'...\n"
" …10.tar.gz  709KiB                                 2.5MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\n"

#. type: Plain text
#: doc/guix-cookbook.texi:709
msgid "In this specific case the output tells us which mirror was chosen.  If the result of the above command is not the same as in the above snippet, update your @code{my-hello} declaration accordingly."
msgstr "Neste caso específico a saída nos informa qual espelho foi escolhido. Se o resultado do comando acima não for o mesmo do trecho acima, atualize sua declaração @code{my-hello} de acordo."

#. type: Plain text
#: doc/guix-cookbook.texi:713
msgid "Note that GNU package tarballs come with an OpenPGP signature, so you should definitely check the signature of this tarball with `gpg` to authenticate it before going further:"
msgstr "Observe que os tarballs do pacote GNU vêm com uma assinatura OpenPGP, então você definitivamente deve verificar a assinatura deste tarball com `gpg` para autenticá-lo antes de prosseguir:"

#.  This is example shell output.
#. type: example
#: doc/guix-cookbook.texi:717
#, fuzzy, no-wrap
msgid ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"
msgstr ""
"$ guix download mirror://gnu/hello/hello-2.10.tar.gz.sig\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:732
#, fuzzy, no-wrap
msgid ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg:                using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg:                 aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg:          There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"
msgstr ""
"Starting download of /tmp/guix-file.03tFfb\n"
"From https://ftpmirror.gnu.org/gnu/hello/hello-2.10.tar.gz.sig...\n"
"following redirection to `https://ftp.igh.cnrs.fr/pub/gnu/hello/hello-2.10.tar.gz.sig'...\n"
" ….tar.gz.sig  819B                                                                                                                       1.2MiB/s 00:00 [##################] 100.0%\n"
"/gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig\n"
"0q0v86n3y38z17rl146gdakw9xc4mcscpk8dscs412j22glrv9jf\n"
"$ gpg --verify /gnu/store/rzs8wba9ka7grrmgcpfyxvs58mly0sx6-hello-2.10.tar.gz.sig /gnu/store/hbdalsf5lpf01x4dcknwx6xbn6n5km6k-hello-2.10.tar.gz\n"
"gpg: Signature made Sun 16 Nov 2014 01:08:37 PM CET\n"
"gpg:                using RSA key A9553245FDE9B739\n"
"gpg: Good signature from \"Sami Kerola <kerolasa@@iki.fi>\" [unknown]\n"
"gpg:                 aka \"Sami Kerola (http://www.iki.fi/kerolasa/) <kerolasa@@iki.fi>\" [unknown]\n"
"gpg: WARNING: This key is not certified with a trusted signature!\n"
"gpg:          There is no indication that the signature belongs to the owner.\n"
"Primary key fingerprint: 8ED3 96E3 7E38 D471 A005  30D3 A955 3245 FDE9 B739\n"

#. type: Plain text
#: doc/guix-cookbook.texi:735
msgid "You can then happily run"
msgstr "Você pode então correr alegremente"

#.  Do not translate this command
#. type: example
#: doc/guix-cookbook.texi:739
#, no-wrap
msgid "$ guix package --install-from-file=my-hello.scm\n"
msgstr "$ guix package --install-from-file=my-hello.scm\n"

#. type: Plain text
#: doc/guix-cookbook.texi:742
msgid "You should now have @code{my-hello} in your profile!"
msgstr "Agora você deve ter @code{my-hello} em seu perfil!"

#.  Do not translate this command
#. type: example
#: doc/guix-cookbook.texi:748
#, no-wrap
msgid ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"
msgstr ""
"$ guix package --list-installed=my-hello\n"
"my-hello\t2.10\tout\n"
"/gnu/store/f1db2mfm8syb8qvc357c53slbvf1g9m9-my-hello-2.10\n"

#. type: Plain text
#: doc/guix-cookbook.texi:753
msgid "We've gone as far as we could without any knowledge of Scheme.  Before moving on to more complex packages, now is the right time to brush up on your Scheme knowledge.  @pxref{A Scheme Crash Course} to get up to speed."
msgstr "Fomos o mais longe que pudemos sem qualquer conhecimento do Scheme. Antes de passar para pacotes mais complexos, agora é o momento certo para aprimorar seus conhecimentos sobre o Scheme. @pxref{A Scheme Crash Course} para se atualizar."

#. type: Plain text
#: doc/guix-cookbook.texi:760
msgid "In the rest of this chapter we will rely on some basic Scheme programming knowledge.  Now let's detail the different possible setups for working on Guix packages."
msgstr "No restante deste capítulo contaremos com alguns conhecimentos básicos de programação de esquemas. Agora vamos detalhar as diferentes configurações possíveis para trabalhar em pacotes Guix."

#. type: Plain text
#: doc/guix-cookbook.texi:762
msgid "There are several ways to set up a Guix packaging environment."
msgstr "Existem várias maneiras de configurar um ambiente de empacotamento Guix."

#. type: Plain text
#: doc/guix-cookbook.texi:765
msgid "We recommend you work directly on the Guix source checkout since it makes it easier for everyone to contribute to the project."
msgstr "Recomendamos que você trabalhe diretamente no checkout do código-fonte do Guix, pois facilita a contribuição de todos para o projeto."

#. type: Plain text
#: doc/guix-cookbook.texi:767
msgid "But first, let's look at other possibilities."
msgstr "Mas primeiro, vamos examinar outras possibilidades."

#. type: Plain text
#: doc/guix-cookbook.texi:780
msgid "This is what we previously did with @samp{my-hello}.  With the Scheme basics we've covered, we are now able to explain the leading chunks.  As stated in @code{guix package --help}:"
msgstr "Isto é o que fizemos anteriormente com @samp{my-hello}. Com os princípios básicos do esquema que cobrimos, agora podemos explicar os principais pedaços. Conforme declarado em @code{guix package --help}:"

#. type: example
#: doc/guix-cookbook.texi:785
#, fuzzy, no-wrap
msgid ""
"  -f, --install-from-file=FILE\n"
"                         install the package that the code within FILE\n"
"                         evaluates to\n"
msgstr ""
"  -f, --install-from-file=FILE\n"
"                         install the package that the code within FILE\n"
"                         evaluates to\n"

#. type: Plain text
#: doc/guix-cookbook.texi:789
msgid "Thus the last expression @emph{must} return a package, which is the case in our earlier example."
msgstr "Assim, a última expressão @emph{deve} retornar um pacote, que é o caso do nosso exemplo anterior."

#. type: Plain text
#: doc/guix-cookbook.texi:793
msgid "The @code{use-modules} expression tells which of the modules we need in the file.  Modules are a collection of values and procedures.  They are commonly called ``libraries'' or ``packages'' in other programming languages."
msgstr "A expressão @code{use-modules} informa quais módulos precisamos no arquivo. Módulos são uma coleção de valores e procedimentos. Eles são comumente chamados de ``bibliotecas'' ou ``pacotes'' em outras linguagens de programação."

#. type: cindex
#: doc/guix-cookbook.texi:797
#, no-wrap
msgid "channel"
msgstr "Canal"

#. type: Plain text
#: doc/guix-cookbook.texi:803
msgid "Guix and its package collection can be extended through @dfn{channels}.  A channel is a Git repository, public or not, containing @file{.scm} files that provide packages (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}) or services (@pxref{Defining Services,,, guix, GNU Guix Reference Manual})."
msgstr "Guix e sua coleção de pacotes podem ser estendidos através de @dfn{canais}. Um canal é um repositório Git, público ou não, contendo arquivos @file{.scm} que fornecem pacotes (@pxref{Definindo pacotes,,, guix.pt_BR, GNU Guix Reference Manual}) ou serviços (@pxref{Definindo serviços,,, guix.pt_BR, Manual de Referência GNU Guix})."

#. type: Plain text
#: doc/guix-cookbook.texi:806
msgid "How would you go about creating a channel? First, create a directory that will contain your @file{.scm} files, say @file{~/my-channel}:"
msgstr "Como você criaria um canal? Primeiro, crie um diretório que conterá seus arquivos @file{.scm}, digamos @file{~/my-channel}:"

#. type: example
#: doc/guix-cookbook.texi:809
#, fuzzy, no-wrap
msgid "mkdir ~/my-channel\n"
msgstr "mkdir ~/my-channel\n"

#. type: Plain text
#: doc/guix-cookbook.texi:813
msgid "Suppose you want to add the @samp{my-hello} package we saw previously; it first needs some adjustments:"
msgstr "Suponha que você queira adicionar o pacote @samp{my-hello} que vimos anteriormente; primeiro precisa de alguns ajustes:"

#. type: lisp
#: doc/guix-cookbook.texi:820
#, fuzzy, no-wrap
msgid ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"
msgstr ""
"(define-module (my-hello)\n"
"  #:use-module (guix licenses)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix build-system gnu)\n"
"  #:use-module (guix download))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:840
#, fuzzy, no-wrap
msgid ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"
msgstr ""
"(define-public my-hello\n"
"  (package\n"
"    (name \"my-hello\")\n"
"    (version \"2.10\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnu/hello/hello-\" version\n"
"                                  \".tar.gz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"0ssi1wpaf7plaswqqjwigppsg5fyh99vdlb9kzl7c9lng89ndq1i\"))))\n"
"    (build-system gnu-build-system)\n"
"    (synopsis \"Hello, Guix world: An example custom Guix package\")\n"
"    (description\n"
"     \"GNU Hello prints the message \\\"Hello, world!\\\" and then exits.  It\n"
"serves as an example of standard GNU coding practices.  As such, it supports\n"
"command-line arguments, multiple languages, and so on.\")\n"
"    (home-page \"https://www.gnu.org/software/hello/\")\n"
"    (license gpl3+)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:846
msgid "Note that we have assigned the package value to an exported variable name with @code{define-public}.  This is effectively assigning the package to the @code{my-hello} variable so that it can be referenced, among other as dependency of other packages."
msgstr "Observe que atribuímos o valor do pacote a um nome de variável exportado com @code{define-public}. Isso é efetivamente atribuir o pacote à variável @code{my-hello} para que ele possa ser referenciado, entre outras coisas, como dependência de outros pacotes."

#. type: Plain text
#: doc/guix-cookbook.texi:851
msgid "If you use @code{guix package --install-from-file=my-hello.scm} on the above file, it will fail because the last expression, @code{define-public}, does not return a package.  If you want to use @code{define-public} in this use-case nonetheless, make sure the file ends with an evaluation of @code{my-hello}:"
msgstr "Se você usar @code{guix package --install-from-file=my-hello.scm} no arquivo acima, ele falhará porque a última expressão, @code{define-public}, não retorna um pacote. Mesmo assim, se você quiser usar @code{define-public} neste caso de uso, certifique-se de que o arquivo termine com uma avaliação de @code{my-hello}:"

#. type: lisp
#: doc/guix-cookbook.texi:857
#, fuzzy, no-wrap
msgid ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"
msgstr ""
";; ...\n"
"(define-public my-hello\n"
"  ;; ...\n"
"  )\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:859
#, fuzzy, no-wrap
msgid "my-hello\n"
msgstr "my-hello\n"

#. type: Plain text
#: doc/guix-cookbook.texi:862
msgid "This last example is not very typical."
msgstr "Este último exemplo não é muito típico."

#. type: Plain text
#: doc/guix-cookbook.texi:866
msgid "Now how do you make that package visible to @command{guix} commands so you can test your packages? You need to add the directory to the search path using the @option{-L} command-line option, as in these examples:"
msgstr "Agora, como você torna esse pacote visível para os comandos @command{guix} para poder testar seus pacotes? Você precisa adicionar o diretório ao caminho de pesquisa usando a opção de linha de comando @option{-L}, como nestes exemplos:"

#. type: example
#: doc/guix-cookbook.texi:870
#, fuzzy, no-wrap
msgid ""
"guix show -L ~/my-channel my-hello\n"
"guix build -L ~/my-channel my-hello\n"
msgstr ""
"guix show -L ~/my-channel my-hello\n"
"guix build -L ~/my-channel my-hello\n"

#. type: Plain text
#: doc/guix-cookbook.texi:876
msgid "The final step is to turn @file{~/my-channel} into an actual channel, making your package collection seamlessly available @i{via} any @command{guix} command.  To do that, you first need to make it a Git repository:"
msgstr "A etapa final é transformar @file{~/my-channel} em um canal real, disponibilizando sua coleção de pacotes perfeitamente @i{via} qualquer comando @command{guix}. Para fazer isso, primeiro você precisa torná-lo um repositório Git:"

#. type: example
#: doc/guix-cookbook.texi:882
#, fuzzy, no-wrap
msgid ""
"cd ~/my-channel\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"First commit of my channel.\"\n"
msgstr ""
"cd ~/my-channel\n"
"git init\n"
"git add my-hello.scm\n"
"git commit -m \"First commit of my channel.\"\n"

#. type: Plain text
#: doc/guix-cookbook.texi:890
msgid "And that's it, you have a channel! From there on, you can add this channel to your channel configuration in @file{~/.config/guix/channels.scm} (@pxref{Specifying Additional Channels,,, guix, GNU Guix Reference Manual}); assuming you keep your channel local for now, the @file{channels.scm} would look something like this:"
msgstr "E pronto, você tem um canal! A partir daí, você pode adicionar este canal à configuração do seu canal em @file{~/.config/guix/channels.scm} (@pxref{Especificando canais adicionais,,, guix, GNU Guix Reference Manual}); supondo que você mantenha seu canal local por enquanto, o @file{channels.scm} ficaria mais ou menos assim:"

#. type: lisp
#: doc/guix-cookbook.texi:897
#, fuzzy, no-wrap
msgid ""
"(append (list (channel\n"
"                (name 'my-channel)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/my-channel\"))))\n"
"        %default-channels)\n"
msgstr ""
"(append (list (channel\n"
"                (name 'my-channel)\n"
"                (url (string-append \"file://\" (getenv \"HOME\")\n"
"                                    \"/my-channel\"))))\n"
"        %default-channels)\n"

#. type: Plain text
#: doc/guix-cookbook.texi:904
msgid "Next time you run @command{guix pull}, your channel will be picked up and the packages it defines will be readily available to all the @command{guix} commands, even if you do not pass @option{-L}.  The @command{guix describe} command will show that Guix is, indeed, using both the @code{my-channel} and the @code{guix} channels."
msgstr "Da próxima vez que você executar @command{guix pull}, seu canal será selecionado e os pacotes que ele definir estarão prontamente disponíveis para todos os comandos @command{guix}, mesmo se você não passar @option{-L}. O comando @command{guix description} mostrará que o Guix está, de fato, usando os canais @code{my-channel} e @code{guix}."

#. type: Plain text
#: doc/guix-cookbook.texi:907
msgid "@xref{Creating a Channel,,, guix, GNU Guix Reference Manual}, for details."
msgstr "@xref{Criando um canal,,, guix, GNU Guix Reference Manual}, para detalhes."

#. type: Plain text
#: doc/guix-cookbook.texi:914
msgid "Working directly on the Guix project is recommended: it reduces the friction when the time comes to submit your changes upstream to let the community benefit from your hard work!"
msgstr "É recomendado trabalhar diretamente no projeto Guix: isso reduz o atrito quando chega a hora de enviar suas alterações ao upstream para permitir que a comunidade se beneficie de seu trabalho árduo!"

#. type: Plain text
#: doc/guix-cookbook.texi:920
msgid "Unlike most software distributions, the Guix repository holds in one place both the tooling (including the package manager) and the package definitions.  This choice was made so that it would give developers the flexibility to modify the API without breakage by updating all packages at the same time.  This reduces development inertia."
msgstr "Ao contrário da maioria das distribuições de software, o repositório Guix mantém em um só lugar as ferramentas (incluindo o gerenciador de pacotes) e as definições dos pacotes. Essa escolha foi feita para dar aos desenvolvedores a flexibilidade de modificar a API sem quebras, atualizando todos os pacotes ao mesmo tempo. Isto reduz a inércia do desenvolvimento."

#. type: Plain text
#: doc/guix-cookbook.texi:922
msgid "Check out the official @uref{https://git-scm.com/, Git} repository:"
msgstr "Confira o repositório oficial @uref{https://git-scm.com/, Git}:"

#. type: example
#: doc/guix-cookbook.texi:925
#, fuzzy, no-wrap
msgid "$ git clone https://git.savannah.gnu.org/git/guix.git\n"
msgstr "$ git clone https://git.savannah.gnu.org/git/guix.git\n"

#. type: Plain text
#: doc/guix-cookbook.texi:929
msgid "In the rest of this article, we use @samp{$GUIX_CHECKOUT} to refer to the location of the checkout."
msgstr "No restante deste artigo, usamos @samp{$GUIX_CHECKOUT} para nos referir ao local do checkout."

#. type: Plain text
#: doc/guix-cookbook.texi:933
msgid "Follow the instructions in the manual (@pxref{Contributing,,, guix, GNU Guix Reference Manual}) to set up the repository environment."
msgstr "Siga as instruções no manual (@pxref{Contribuindo,,, guix.pt_BR, GNU Guix Reference Manual}) para configurar o ambiente do repositório."

#. type: Plain text
#: doc/guix-cookbook.texi:936
msgid "Once ready, you should be able to use the package definitions from the repository environment."
msgstr "Quando estiver pronto, você poderá usar as definições de pacote do ambiente do repositório."

#. type: Plain text
#: doc/guix-cookbook.texi:938
msgid "Feel free to edit package definitions found in @samp{$GUIX_CHECKOUT/gnu/packages}."
msgstr "Sinta-se à vontade para editar as definições de pacotes encontradas em @samp{$GUIX_CHECKOUT/gnu/packages}."

#. type: Plain text
#: doc/guix-cookbook.texi:942
msgid "The @samp{$GUIX_CHECKOUT/pre-inst-env} script lets you use @samp{guix} over the package collection of the repository (@pxref{Running Guix Before It Is Installed,,, guix, GNU Guix Reference Manual})."
msgstr "O script @samp{$GUIX_CHECKOUT/pre-inst-env} permite usar @samp{guix} sobre a coleção de pacotes do repositório (@pxref{Executando guix antes dele ser instalado,,, guix.pt_BR, GNU Guix Reference Manual}) ."

#. type: itemize
#: doc/guix-cookbook.texi:946
msgid "Search packages, such as Ruby:"
msgstr "Pesquisa de pacotes, como Ruby:"

#. type: example
#: doc/guix-cookbook.texi:953
#, fuzzy, no-wrap
msgid ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"
msgstr ""
"  $ cd $GUIX_CHECKOUT\n"
"  $ ./pre-inst-env guix package --list-available=ruby\n"
"      ruby    1.8.7-p374      out     gnu/packages/ruby.scm:119:2\n"
"      ruby    2.1.6   out     gnu/packages/ruby.scm:91:2\n"
"      ruby    2.2.2   out     gnu/packages/ruby.scm:39:2\n"

#. type: itemize
#: doc/guix-cookbook.texi:957
msgid "Build a package, here Ruby version 2.1:"
msgstr "Construa um pacote, como Ruby versão 2.1:"

#. type: example
#: doc/guix-cookbook.texi:961
#, fuzzy, no-wrap
msgid ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"
msgstr ""
"  $ ./pre-inst-env guix build --keep-failed ruby@@2.1\n"
"  /gnu/store/c13v73jxmj2nir2xjqaz5259zywsa9zi-ruby-2.1.6\n"

#. type: itemize
#: doc/guix-cookbook.texi:965
msgid "Install it to your user profile:"
msgstr "Instale-o em seu perfil de usuário:"

#. type: example
#: doc/guix-cookbook.texi:968
#, fuzzy, no-wrap
msgid "  $ ./pre-inst-env guix package --install ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix package --install ruby@@2.1\n"

#. type: itemize
#: doc/guix-cookbook.texi:972
msgid "Check for common mistakes:"
msgstr "Verifique se há erros comuns:"

#. type: example
#: doc/guix-cookbook.texi:975
#, fuzzy, no-wrap
msgid "  $ ./pre-inst-env guix lint ruby@@2.1\n"
msgstr "  $ ./pre-inst-env guix lint ruby@@2.1\n"

#. type: Plain text
#: doc/guix-cookbook.texi:980
msgid "Guix strives at maintaining a high packaging standard; when contributing to the Guix project, remember to"
msgstr "Guix se esforça para manter um alto padrão de empacotamento; ao contribuir para o projeto Guix, lembre-se de"

#. type: itemize
#: doc/guix-cookbook.texi:984
msgid "follow the coding style (@pxref{Coding Style,,, guix, GNU Guix Reference Manual}),"
msgstr "seguir o estilo de codificação (@pxref{Estilo de código,,, guix.pt_BR, GNU Guix Reference Manual}),"

#. type: itemize
#: doc/guix-cookbook.texi:986
msgid "and review the check list from the manual (@pxref{Submitting Patches,,, guix, GNU Guix Reference Manual})."
msgstr "e revise a lista de verificação do manual (@pxref{Enviando patches,,, guix.pt_BR, GNU Guix Reference Manual})."

#. type: Plain text
#: doc/guix-cookbook.texi:990
msgid "Once you are happy with the result, you are welcome to send your contribution to make it part of Guix.  This process is also detailed in the manual.  (@pxref{Contributing,,, guix, GNU Guix Reference Manual})"
msgstr "Quando estiver satisfeito com o resultado, você pode enviar sua contribuição para torná-lo parte do Guix. Este processo também é detalhado no manual. (@pxref{Contribuindo,,, guix.pt_BR, Manual de Referência GNU Guix})"

#. type: Plain text
#: doc/guix-cookbook.texi:993
msgid "It's a community effort so the more join in, the better Guix becomes!"
msgstr "É um esforço da comunidade, então quanto mais participar, melhor o Guix se torna!"

#. type: Plain text
#: doc/guix-cookbook.texi:1000
msgid "The above ``Hello World'' example is as simple as it goes.  Packages can be more complex than that and Guix can handle more advanced scenarios.  Let's look at another, more sophisticated package (slightly modified from the source):"
msgstr "O exemplo ``Hello World'' acima é tão simples quanto parece. Os pacotes podem ser mais complexos do que isso e o Guix pode lidar com cenários mais avançados. Vejamos outro pacote mais sofisticado (ligeiramente modificado em relação à fonte):"

#. type: lisp
#: doc/guix-cookbook.texi:1014
#, fuzzy, no-wrap
msgid ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages tls)\n"
"  #:use-module (gnu packages web))\n"
"\n"
msgstr ""
"(define-module (gnu packages version-control)\n"
"  #:use-module ((guix licenses) #:prefix license:)\n"
"  #:use-module (guix utils)\n"
"  #:use-module (guix packages)\n"
"  #:use-module (guix git-download)\n"
"  #:use-module (guix build-system cmake)\n"
"  #:use-module (gnu packages compression)\n"
"  #:use-module (gnu packages pkg-config)\n"
"  #:use-module (gnu packages python)\n"
"  #:use-module (gnu packages ssh)\n"
"  #:use-module (gnu packages tls)\n"
"  #:use-module (gnu packages web))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1070
#, fuzzy, no-wrap
msgid ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda* (#:key tests? #:allow-other-keys)\n"
"               (when tests?\n"
"                 (invoke \"./libgit2_clar\" \"-v\" \"-Q\"))))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"
msgstr ""
"(define-public my-libgit2\n"
"  (let ((commit \"e98d0a37c93574d2c6107bf7f31140b548c6a7bf\")\n"
"        (revision \"1\"))\n"
"    (package\n"
"      (name \"my-libgit2\")\n"
"      (version (git-version \"0.26.6\" revision commit))\n"
"      (source (origin\n"
"                (method git-fetch)\n"
"                (uri (git-reference\n"
"                      (url \"https://github.com/libgit2/libgit2/\")\n"
"                      (commit commit)))\n"
"                (file-name (git-file-name name version))\n"
"                (sha256\n"
"                 (base32\n"
"                  \"17pjvprmdrx4h6bb1hhc98w9qi6ki7yl57f090n9kbhswxqfs7s3\"))\n"
"                (patches (search-patches \"libgit2-mtime-0.patch\"))\n"
"                (modules '((guix build utils)))\n"
"                ;; Remove bundled software.\n"
"                (snippet '(delete-file-recursively \"deps\"))))\n"
"      (build-system cmake-build-system)\n"
"      (outputs '(\"out\" \"debug\"))\n"
"      (arguments\n"
"       `(#:tests? #true                         ; Run the test suite (this is the default)\n"
"         #:configure-flags '(\"-DUSE_SHA1DC=ON\") ; SHA-1 collision detection\n"
"         #:phases\n"
"         (modify-phases %standard-phases\n"
"           (add-after 'unpack 'fix-hardcoded-paths\n"
"             (lambda _\n"
"               (substitute* \"tests/repo/init.c\"\n"
"                 ((\"#!/bin/sh\") (string-append \"#!\" (which \"sh\"))))\n"
"               (substitute* \"tests/clar/fs.h\"\n"
"                 ((\"/bin/cp\") (which \"cp\"))\n"
"                 ((\"/bin/rm\") (which \"rm\")))))\n"
"           ;; Run checks more verbosely.\n"
"           (replace 'check\n"
"             (lambda* (#:key tests? #:allow-other-keys)\n"
"               (when tests?\n"
"                 (invoke \"./libgit2_clar\" \"-v\" \"-Q\"))))\n"
"           (add-after 'unpack 'make-files-writable-for-tests\n"
"             (lambda _ (for-each make-file-writable (find-files \".\")))))))\n"
"      (inputs\n"
"       (list libssh2 http-parser python-wrapper))\n"
"      (native-inputs\n"
"       (list pkg-config))\n"
"      (propagated-inputs\n"
"       ;; These two libraries are in 'Requires.private' in libgit2.pc.\n"
"       (list openssl zlib))\n"
"      (home-page \"https://libgit2.github.com/\")\n"
"      (synopsis \"Library providing Git core methods\")\n"
"      (description\n"
"       \"Libgit2 is a portable, pure C implementation of the Git core methods\n"
"provided as a re-entrant linkable library with a solid API, allowing you to\n"
"write native speed custom Git applications in any language with bindings.\")\n"
"      ;; GPLv2 with linking exception\n"
"      (license license:gpl2))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1075
msgid "(In those cases were you only want to tweak a few fields from a package definition, you should rely on inheritance instead of copy-pasting everything.  See below.)"
msgstr "(Nos casos em que você deseja ajustar apenas alguns campos de uma definição de pacote, você deve confiar na herança em vez de copiar e colar tudo. Veja abaixo.)"

#. type: Plain text
#: doc/guix-cookbook.texi:1077
msgid "Let's discuss those fields in depth."
msgstr "Vamos discutir esses campos em profundidade."

#. type: subsubsection
#: doc/guix-cookbook.texi:1078
#, no-wrap
msgid "@code{git-fetch} method"
msgstr "Método @code{git-fetch}"

#. type: Plain text
#: doc/guix-cookbook.texi:1085
msgid "Unlike the @code{url-fetch} method, @code{git-fetch} expects a @code{git-reference} which takes a Git repository and a commit.  The commit can be any Git reference such as tags, so if the @code{version} is tagged, then it can be used directly.  Sometimes the tag is prefixed with a @code{v}, in which case you'd use @code{(commit (string-append \"v\" version))}."
msgstr "Ao contrário do método @code{url-fetch}, @code{git-fetch} espera um @code{git-reference} que usa um repositório Git e um commit. O commit pode ser qualquer referência do Git, como tags, portanto, se @code{version} estiver marcado, ele poderá ser usado diretamente. Às vezes, a tag é prefixada com @code{v}; nesse caso, você usaria @code{(commit (string-append \"v\" version))}."

#. type: Plain text
#: doc/guix-cookbook.texi:1089
msgid "To ensure that the source code from the Git repository is stored in a directory with a descriptive name, we use @code{(file-name (git-file-name name version))}."
msgstr "Para garantir que o código-fonte do repositório Git seja armazenado em um diretório com um nome descritivo, usamos @code{(nome‐do- arquivo (nome-do-arquivo-git versão))}."

#. type: Plain text
#: doc/guix-cookbook.texi:1094
msgid "The @code{git-version} procedure can be used to derive the version when packaging programs for a specific commit, following the Guix contributor guidelines (@pxref{Version Numbers,,, guix, GNU Guix Reference Manual})."
msgstr "O procedimento @code{git-version} pode ser usado para derivar a versão ao empacotar programas para um commit específico, seguindo as diretrizes do contribuidor Guix (@pxref{Números de versão,,, guix.pt_BR, GNU Guix Reference Manual})."

#. type: Plain text
#: doc/guix-cookbook.texi:1098
msgid "How does one obtain the @code{sha256} hash that's in there, you ask? By invoking @command{guix hash} on a checkout of the desired commit, along these lines:"
msgstr "Como obter o hash @code{sha256} que está aí, você pergunta? Invocando @command{guix hash} em um checkout do commit desejado, da seguinte forma:"

#. type: example
#: doc/guix-cookbook.texi:1104
#, fuzzy, no-wrap
msgid ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"
msgstr ""
"git clone https://github.com/libgit2/libgit2/\n"
"cd libgit2\n"
"git checkout v0.26.6\n"
"guix hash -rx .\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1109
msgid "@command{guix hash -rx} computes a SHA256 hash over the whole directory, excluding the @file{.git} sub-directory (@pxref{Invoking guix hash,,, guix, GNU Guix Reference Manual})."
msgstr "@command{guix hash -rx} calcula um hash SHA256 em todo o diretório, excluindo o subdiretório @file{.git} (@pxref{Invocando guix hash,,, guix.pt_BR, GNU Guix Reference Manual})."

#. type: Plain text
#: doc/guix-cookbook.texi:1112
msgid "In the future, @command{guix download} will hopefully be able to do these steps for you, just like it does for regular downloads."
msgstr "No futuro, @command{guix download} será capaz de executar essas etapas para você, assim como faz para downloads regulares."

#. type: subsubsection
#: doc/guix-cookbook.texi:1113
#, fuzzy, no-wrap
msgid "Snippets"
msgstr "Snippets"

#. type: Plain text
#: doc/guix-cookbook.texi:1119
msgid "Snippets are quoted (i.e. non-evaluated) Scheme code that are a means of patching the source.  They are a Guix-y alternative to the traditional @file{.patch} files.  Because of the quote, the code in only evaluated when passed to the Guix daemon for building.  There can be as many snippets as needed."
msgstr "Os trechos (\"Snippets\" ) são códigos de esquema citados (ou seja, não avaliados) que são um meio de corrigir a fonte. Eles são uma alternativa Guix-y aos arquivos @file{.patch} tradicionais. Por causa da citação, o código só é avaliado quando passado para o daemon Guix para construção. Pode haver quantos trechos forem necessários."

#. type: Plain text
#: doc/guix-cookbook.texi:1122
msgid "Snippets might need additional Guile modules which can be imported from the @code{modules} field."
msgstr "Os snippets podem precisar de módulos Guile adicionais que podem ser importados do campo @code{modules}."

#. type: subsubsection
#: doc/guix-cookbook.texi:1123
#, no-wrap
msgid "Inputs"
msgstr "Entradas"

#. type: Plain text
#: doc/guix-cookbook.texi:1126
msgid "There are 3 different input types.  In short:"
msgstr "Existem 3 tipos de entradas diferentes. Resumidamente:"

#. type: item
#: doc/guix-cookbook.texi:1128
#, fuzzy, no-wrap
msgid "native-inputs"
msgstr "native-inputs"

#. type: table
#: doc/guix-cookbook.texi:1131
msgid "Required for building but not runtime -- installing a package through a substitute won't install these inputs."
msgstr "Necessário para construção, mas não para tempo de execução - instalar um pacote por meio de um substituto não instalará essas entradas."

#. type: item
#: doc/guix-cookbook.texi:1131
#, no-wrap
msgid "inputs"
msgstr "entradas"

#. type: table
#: doc/guix-cookbook.texi:1134
msgid "Installed in the store but not in the profile, as well as being present at build time."
msgstr "Instalado na loja mas não no perfil, além de estar presente na hora da construção."

#. type: item
#: doc/guix-cookbook.texi:1134
#, fuzzy, no-wrap
msgid "propagated-inputs"
msgstr "propagated-inputs"

#. type: table
#: doc/guix-cookbook.texi:1137
msgid "Installed in the store and in the profile, as well as being present at build time."
msgstr "Instalado na loja e no perfil, além de estar presente na hora da construção."

#. type: Plain text
#: doc/guix-cookbook.texi:1140
msgid "@xref{package Reference,,, guix, GNU Guix Reference Manual} for more details."
msgstr "@xref{referência de pacote,,, guix, Manual de referência GNU Guix} para mais detalhes."

#. type: Plain text
#: doc/guix-cookbook.texi:1144
msgid "The distinction between the various inputs is important: if a dependency can be handled as an @emph{input} instead of a @emph{propagated input}, it should be done so, or else it ``pollutes'' the user profile for no good reason."
msgstr "A distinção entre as diversas entradas é importante: se uma dependência puder ser tratada como uma @emph{input} em vez de uma @emph{propagated input}, isso deverá ser feito, caso contrário ela ``poluirá'' o perfil do usuário sem nenhuma boa razão."

#. type: Plain text
#: doc/guix-cookbook.texi:1151
msgid "For instance, a user installing a graphical program that depends on a command line tool might only be interested in the graphical part, so there is no need to force the command line tool into the user profile.  The dependency is a concern to the package, not to the user.  @emph{Inputs} make it possible to handle dependencies without bugging the user by adding undesired executable files (or libraries) to their profile."
msgstr "Por exemplo, um usuário que instala um programa gráfico que depende de uma ferramenta de linha de comando pode estar interessado apenas na parte gráfica, portanto não há necessidade de forçar a ferramenta de linha de comando no perfil do usuário. A dependência é uma preocupação do pacote, não do usuário. @emph{Inputs} tornam possível lidar com dependências sem incomodar o usuário, adicionando arquivos executáveis (ou bibliotecas) indesejados ao seu perfil."

#. type: Plain text
#: doc/guix-cookbook.texi:1157
msgid "Same goes for @emph{native-inputs}: once the program is installed, build-time dependencies can be safely garbage-collected.  It also matters when a substitute is available, in which case only the @emph{inputs} and @emph{propagated inputs} will be fetched: the @emph{native inputs} are not required to install a package from a substitute."
msgstr "O mesmo vale para @emph{native-inputs}: depois que o programa é instalado, as dependências em tempo de construção podem ser coletadas como lixo com segurança. Também importa quando um substituto está disponível, caso em que apenas @emph{inputs} e @emph{propagated inputs} serão obtidos: os @emph{native inputs} não são necessários para instalar um pacote de um substituto."

#. type: quotation
#: doc/guix-cookbook.texi:1158 doc/guix-cookbook.texi:2321
#: doc/guix-cookbook.texi:3984 doc/guix-cookbook.texi:5157
#: doc/guix-cookbook.texi:5223
#, no-wrap
msgid "Note"
msgstr "Nota"

#. type: quotation
#: doc/guix-cookbook.texi:1161
msgid "You may see here and there snippets where package inputs are written quite differently, like so:"
msgstr "Você pode ver aqui e ali trechos onde as entradas do pacote são escritas de maneira bem diferente, assim:"

#. type: lisp
#: doc/guix-cookbook.texi:1168
#, fuzzy, no-wrap
msgid ""
";; The \"old style\" for inputs.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"
msgstr ""
";; The \"old style\" for inputs.\n"
"(inputs\n"
" `((\"libssh2\" ,libssh2)\n"
"   (\"http-parser\" ,http-parser)\n"
"   (\"python\" ,python-wrapper)))\n"

#. type: quotation
#: doc/guix-cookbook.texi:1174
msgid "This is the ``old style'', where each input in the list is explicitly given a label (a string).  It is still supported but we recommend using the style above instead.  @xref{package Reference,,, guix, GNU Guix Reference Manual}, for more info."
msgstr "Este é o ``estilo antigo'', onde cada entrada na lista recebe explicitamente um rótulo (uma string). Ainda é compatível, mas recomendamos usar o estilo acima. @xref{referência de pacote,,, guix, GNU Guix Reference Manual}, para mais informações."

#. type: subsubsection
#: doc/guix-cookbook.texi:1176
#, no-wrap
msgid "Outputs"
msgstr "Saídas"

#. type: Plain text
#: doc/guix-cookbook.texi:1180
msgid "Just like how a package can have multiple inputs, it can also produce multiple outputs."
msgstr "Assim como um pacote pode ter múltiplas entradas, ele também pode produzir múltiplas saídas."

#. type: Plain text
#: doc/guix-cookbook.texi:1182
msgid "Each output corresponds to a separate directory in the store."
msgstr "Cada saída corresponde a um diretório separado na loja."

#. type: Plain text
#: doc/guix-cookbook.texi:1185
msgid "The user can choose which output to install; this is useful to save space or to avoid polluting the user profile with unwanted executables or libraries."
msgstr "O usuário pode escolher qual saída instalar; isso é útil para economizar espaço ou evitar poluir o perfil do usuário com executáveis ou bibliotecas indesejadas."

#. type: Plain text
#: doc/guix-cookbook.texi:1188
msgid "Output separation is optional.  When the @code{outputs} field is left out, the default and only output (the complete package) is referred to as @code{\"out\"}."
msgstr "A separação de saída é opcional. Quando o campo @code{outputs} é omitido, a saída padrão e única (o pacote completo) é referida como @code{\"out\"}."

#. type: Plain text
#: doc/guix-cookbook.texi:1190
msgid "Typical separate output names include @code{debug} and @code{doc}."
msgstr "Nomes de saída separados típicos incluem @code{debug} e @code{doc}."

#. type: Plain text
#: doc/guix-cookbook.texi:1194
msgid "It's advised to separate outputs only when you've shown it's worth it: if the output size is significant (compare with @code{guix size}) or in case the package is modular."
msgstr "É aconselhável separar as saídas apenas quando você mostrar que vale a pena: se o tamanho da saída for significativo (compare com @code{guix size}) ou caso o pacote seja modular."

#. type: subsubsection
#: doc/guix-cookbook.texi:1195
#, no-wrap
msgid "Build system arguments"
msgstr "Argumentos do sistema de compilação"

#. type: Plain text
#: doc/guix-cookbook.texi:1198
msgid "The @code{arguments} is a keyword-value list used to configure the build process."
msgstr "O @code{arguments} é uma lista de valores de palavras-chave usadas para configurar o processo de construção."

#. type: Plain text
#: doc/guix-cookbook.texi:1203
msgid "The simplest argument @code{#:tests?} can be used to disable the test suite when building the package.  This is mostly useful when the package does not feature any test suite.  It's strongly recommended to keep the test suite on if there is one."
msgstr "O argumento mais simples @code{#:tests?} pode ser usado para desabilitar o conjunto de testes ao construir o pacote. Isso é útil principalmente quando o pacote não apresenta nenhum conjunto de testes. É altamente recomendável manter o conjunto de testes ativado, se houver."

#. type: Plain text
#: doc/guix-cookbook.texi:1207
msgid "Another common argument is @code{:make-flags}, which specifies a list of flags to append when running make, as you would from the command line.  For instance, the following flags"
msgstr "Outro argumento comum é @code{:make-flags}, que especifica uma lista de sinalizadores a serem acrescentados ao executar o make, como faria na linha de comando. Por exemplo, os seguintes sinalizadores"

#. type: lisp
#: doc/guix-cookbook.texi:1211
#, fuzzy, no-wrap
msgid ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"
msgstr ""
"#:make-flags (list (string-append \"prefix=\" (assoc-ref %outputs \"out\"))\n"
"                   \"CC=gcc\")\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1214
msgid "translate into"
msgstr "traduzir para"

#. type: example
#: doc/guix-cookbook.texi:1217
#, fuzzy, no-wrap
msgid "$ make CC=gcc prefix=/gnu/store/...-<out>\n"
msgstr "$ make CC=gcc prefix=/gnu/store/...-<out>\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1223
msgid "This sets the C compiler to @code{gcc} and the @code{prefix} variable (the installation directory in Make parlance) to @code{(assoc-ref %outputs \"out\")}, which is a build-stage global variable pointing to the destination directory in the store (something like @file{/gnu/store/...-my-libgit2-20180408})."
msgstr "Isso define o compilador C para @code{gcc} e a variável @code{prefix} (o diretório de instalação no jargão Make) para @code{(assoc-ref %outputs \"out\")}, que é um estágio de construção global variável apontando para o diretório de destino na loja (algo como @file{/gnu/store/...-my-libgit2-20180408})."

#. type: Plain text
#: doc/guix-cookbook.texi:1225
msgid "Similarly, it's possible to set the configure flags:"
msgstr "Da mesma forma, é possível definir os sinalizadores de configuração:"

#. type: lisp
#: doc/guix-cookbook.texi:1228
#, fuzzy, no-wrap
msgid "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"
msgstr "#:configure-flags '(\"-DUSE_SHA1DC=ON\")\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1232
msgid "The @code{%build-inputs} variable is also generated in scope.  It's an association table that maps the input names to their store directories."
msgstr "A variável @code{%build-inputs} também é gerada no escopo. Ela é uma tabela de associações que mapeia os nomes de entrada para seus diretórios de armazenamento."

#. type: Plain text
#: doc/guix-cookbook.texi:1237
msgid "The @code{phases} keyword lists the sequential steps of the build system.  Typically phases include @code{unpack}, @code{configure}, @code{build}, @code{install} and @code{check}.  To know more about those phases, you need to work out the appropriate build system definition in @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"
msgstr "A palavra-chave @code{phases} lista as etapas sequenciais do sistema de compilação. Normalmente as fases incluem @code{unpack}, @code{configure}, @code{build}, @code{install} e @code{check}. Para saber mais sobre essas fases, você precisa definir a definição apropriada do sistema de compilação em @samp{$GUIX_CHECKOUT/guix/build/gnu-build-system.scm}:"

#. type: lisp
#: doc/guix-cookbook.texi:1256
#, fuzzy, no-wrap
msgid ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"
msgstr ""
"(define %standard-phases\n"
"  ;; Standard build phases, as a list of symbol/procedure pairs.\n"
"  (let-syntax ((phases (syntax-rules ()\n"
"                         ((_ p ...) `((p . ,p) ...)))))\n"
"    (phases set-SOURCE-DATE-EPOCH set-paths install-locale unpack\n"
"            bootstrap\n"
"            patch-usr-bin-file\n"
"            patch-source-shebangs configure patch-generated-file-shebangs\n"
"            build check install\n"
"            patch-shebangs strip\n"
"            validate-runpath\n"
"            validate-documentation-location\n"
"            delete-info-dir-file\n"
"            patch-dot-desktop-files\n"
"            install-license-files\n"
"            reset-gzip-timestamps\n"
"            compress-documentation)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1259
msgid "Or from the REPL:"
msgstr "Ou do REPL:"

#. type: lisp
#: doc/guix-cookbook.texi:1265
#, fuzzy, no-wrap
msgid ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map first %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files install-license-files reset-gzip-timestamps compress-documentation)\n"
msgstr ""
"(add-to-load-path \"/path/to/guix/checkout\")\n"
",use (guix build gnu-build-system)\n"
"(map first %standard-phases)\n"
"@result{} (set-SOURCE-DATE-EPOCH set-paths install-locale unpack bootstrap patch-usr-bin-file patch-source-shebangs configure patch-generated-file-shebangs build check install patch-shebangs strip validate-runpath validate-documentation-location delete-info-dir-file patch-dot-desktop-files install-license-files reset-gzip-timestamps compress-documentation)\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1269
msgid "If you want to know more about what happens during those phases, consult the associated procedures."
msgstr "Se quiser saber mais sobre o que acontece nessas fases, consulte os procedimentos associados."

#. type: Plain text
#: doc/guix-cookbook.texi:1272
msgid "For instance, as of this writing the definition of @code{unpack} for the GNU build system is:"
msgstr "Por exemplo, no momento em que este livro foi escrito, a definição de @code{unpack} para o sistema de compilação GNU era:"

#. type: lisp
#: doc/guix-cookbook.texi:1282
#, fuzzy, no-wrap
msgid ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"
msgstr ""
"(define* (unpack #:key source #:allow-other-keys)\n"
"  \"Unpack SOURCE in the working directory, and change directory within the\n"
"source.  When SOURCE is a directory, copy it in a sub-directory of the current\n"
"working directory.\"\n"
"  (if (file-is-directory? source)\n"
"      (begin\n"
"        (mkdir \"source\")\n"
"        (chdir \"source\")\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1293
#, fuzzy, no-wrap
msgid ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #true))\n"
"      (begin\n"
"        (if (string-suffix? \".zip\" source)\n"
"            (invoke \"unzip\" source)\n"
"            (invoke \"tar\" \"xvf\" source))\n"
"        (chdir (first-subdirectory \".\"))))\n"
"  #true)\n"
msgstr ""
"        ;; Preserve timestamps (set to the Epoch) on the copied tree so that\n"
"        ;; things work deterministically.\n"
"        (copy-recursively source \".\"\n"
"                          #:keep-mtime? #true))\n"
"      (begin\n"
"        (if (string-suffix? \".zip\" source)\n"
"            (invoke \"unzip\" source)\n"
"            (invoke \"tar\" \"xvf\" source))\n"
"        (chdir (first-subdirectory \".\"))))\n"
"  #true)\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1301
msgid "Note the @code{chdir} call: it changes the working directory to where the source was unpacked.  Thus every phase following the @code{unpack} will use the source as a working directory, which is why we can directly work on the source files.  That is to say, unless a later phase changes the working directory to something else."
msgstr "Observe a chamada @code{chdir}: ela altera o diretório de trabalho para onde a fonte foi descompactada. Assim, cada fase após o @code{unpack} usará a fonte como diretório de trabalho, e é por isso que podemos trabalhar diretamente nos arquivos de origem. Isto é, a menos que uma fase posterior mude o diretório de trabalho para outro."

#. type: Plain text
#: doc/guix-cookbook.texi:1305
msgid "We modify the list of @code{%standard-phases} of the build system with the @code{modify-phases} macro as per the list of specified modifications, which may have the following forms:"
msgstr "Modificamos a lista de @code{%standard-phases} do sistema de construção com a macro @code{modify-phases} conforme a lista de modificações especificadas, que pode ter os seguintes formatos:"

#. type: itemize
#: doc/guix-cookbook.texi:1309
#, fuzzy
msgid "@code{(add-before @var{phase} @var{new-phase} @var{procedure})}: Run @var{procedure} named @var{new-phase} before @var{phase}."
msgstr "@code{(add-before @var{phase} @var{new-phase} @var{procedure})}: Run @var{procedure} named @var{new-phase} before @var{phase}."

#. type: itemize
#: doc/guix-cookbook.texi:1311
msgid "@code{(add-after @var{phase} @var{new-phase} @var{procedure})}: Same, but afterwards."
msgstr "@code{(add-after @var{phase} @var{new-phase} @var{procedure})}: O mesmo, mas depois."

#. type: itemize
#: doc/guix-cookbook.texi:1313
#, fuzzy
msgid "@code{(replace @var{phase} @var{procedure})}."
msgstr "@code{(replace @var{phase} @var{procedure})}."

#. type: itemize
#: doc/guix-cookbook.texi:1315
#, fuzzy
msgid "@code{(delete @var{phase})}."
msgstr "@code{(delete @var{phase})}."

#. type: Plain text
#: doc/guix-cookbook.texi:1322
msgid "The @var{procedure} supports the keyword arguments @code{inputs} and @code{outputs}.  Each input (whether @emph{native}, @emph{propagated} or not) and output directory is referenced by their name in those variables.  Thus @code{(assoc-ref outputs \"out\")} is the store directory of the main output of the package.  A phase procedure may look like this:"
msgstr "O @var{procedure} suporta os argumentos de palavra-chave @code{inputs} e @code{outputs}. Cada entrada (seja @emph{native}, @emph{propagated} ou não) e diretório de saída são referenciados por seus nomes nessas variáveis. Assim @code{(assoc-ref outputs \"out\")} é o diretório de armazenamento da saída principal do pacote. Um procedimento de fase pode ser assim:"

#. type: lisp
#: doc/guix-cookbook.texi:1330
#, fuzzy, no-wrap
msgid ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ...\n"
"    #true))\n"
msgstr ""
"(lambda* (#:key inputs outputs #:allow-other-keys)\n"
"  (let ((bash-directory (assoc-ref inputs \"bash\"))\n"
"        (output-directory (assoc-ref outputs \"out\"))\n"
"        (doc-directory (assoc-ref outputs \"doc\")))\n"
"    ;; ...\n"
"    #true))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1336
msgid "The procedure must return @code{#true} on success.  It's brittle to rely on the return value of the last expression used to tweak the phase because there is no guarantee it would be a @code{#true}.  Hence the trailing @code{#true} to ensure the right value is returned on success."
msgstr "O procedimento deve retornar @code{#true} em caso de sucesso. É frágil confiar no valor de retorno da última expressão usada para ajustar a fase porque não há garantia de que seria um @code{#true}. Daí o @code{#true} final para garantir que o valor correto seja retornado em caso de sucesso."

#. type: subsubsection
#: doc/guix-cookbook.texi:1337
#, no-wrap
msgid "Code staging"
msgstr "Preparação de código"

#. type: Plain text
#: doc/guix-cookbook.texi:1343
msgid "The astute reader may have noticed the quasi-quote and comma syntax in the argument field.  Indeed, the build code in the package declaration should not be evaluated on the client side, but only when passed to the Guix daemon.  This mechanism of passing code around two running processes is called @uref{https://arxiv.org/abs/1709.00833, code staging}."
msgstr "O leitor astuto deve ter notado a sintaxe de quase aspas e vírgula no campo do argumento. Na verdade, o código de construção na declaração do pacote não deve ser avaliado no lado do cliente, mas apenas quando passado para o daemon Guix. Esse mecanismo de passagem de código entre dois processos em execução é chamado @uref{https://arxiv.org/abs/1709.00833, preparação de código}."

#. type: subsubsection
#: doc/guix-cookbook.texi:1344
#, no-wrap
msgid "Utility functions"
msgstr "Funções utilitárias"

#. type: Plain text
#: doc/guix-cookbook.texi:1349
msgid "When customizing @code{phases}, we often need to write code that mimics the equivalent system invocations (@code{make}, @code{mkdir}, @code{cp}, etc.)@: commonly used during regular ``Unix-style'' installations."
msgstr "Ao personalizar @code{phases}, muitas vezes precisamos escrever código que imite as invocações equivalentes do sistema (@code{make}, @code{mkdir}, @code{cp}, etc.)@: comumente usado durante `` Instalações regulares no estilo Unix''."

#. type: Plain text
#: doc/guix-cookbook.texi:1352
msgid "Some like @code{chmod} are native to Guile.  @xref{,,, guile, Guile reference manual} for a complete list."
msgstr "Alguns como @code{chmod} são nativos do Guile. @xref{,,, guile, manual de referência do Guile} para obter uma lista completa."

#. type: Plain text
#: doc/guix-cookbook.texi:1355
msgid "Guix provides additional helper functions which prove especially handy in the context of package management."
msgstr "Guix fornece funções auxiliares adicionais que são especialmente úteis no contexto de gerenciamento de pacotes."

#. type: Plain text
#: doc/guix-cookbook.texi:1359
msgid "Some of those functions can be found in @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}.  Most of them mirror the behaviour of the traditional Unix system commands:"
msgstr "Algumas dessas funções podem ser encontradas em @samp{$GUIX_CHECKOUT/guix/guix/build/utils.scm}. A maioria delas reflete o comportamento dos comandos tradicionais do sistema Unix:"

#. type: item
#: doc/guix-cookbook.texi:1361
#, no-wrap
msgid "which"
msgstr "which"

#. type: table
#: doc/guix-cookbook.texi:1363
msgid "Like the @samp{which} system command."
msgstr "Como o comando do sistema @samp{which}."

#. type: item
#: doc/guix-cookbook.texi:1363
#, no-wrap
msgid "find-files"
msgstr "find-files"

#. type: table
#: doc/guix-cookbook.texi:1365
msgid "Akin to the @samp{find} system command."
msgstr "Semelhante ao comando do sistema @samp{find}."

#. type: item
#: doc/guix-cookbook.texi:1365
#, no-wrap
msgid "mkdir-p"
msgstr "mkdir-p"

#. type: table
#: doc/guix-cookbook.texi:1367
msgid "Like @samp{mkdir -p}, which creates all parents as needed."
msgstr "Como @samp{mkdir -p}, que cria todos os diretórios conforme necessário."

#. type: item
#: doc/guix-cookbook.texi:1367
#, no-wrap
msgid "install-file"
msgstr "install-file"

#. type: table
#: doc/guix-cookbook.texi:1371
msgid "Similar to @samp{install} when installing a file to a (possibly non-existing) directory.  Guile has @code{copy-file} which works like @samp{cp}."
msgstr "Semelhante a @samp{install} ao instalar um arquivo em um diretório (possivelmente inexistente). Guile tem @code{copy-file} que funciona como @samp{cp}."

#. type: item
#: doc/guix-cookbook.texi:1371
#, no-wrap
msgid "copy-recursively"
msgstr "copy-recursively"

#. type: table
#: doc/guix-cookbook.texi:1373
msgid "Like @samp{cp -r}."
msgstr "Como @samp{cp -r}."

#. type: item
#: doc/guix-cookbook.texi:1373
#, no-wrap
msgid "delete-file-recursively"
msgstr "delete-file-recursively"

#. type: table
#: doc/guix-cookbook.texi:1375
msgid "Like @samp{rm -rf}."
msgstr "Como @samp{rm -rf}."

#. type: item
#: doc/guix-cookbook.texi:1375
#, no-wrap
msgid "invoke"
msgstr "invoke"

#. type: table
#: doc/guix-cookbook.texi:1377
msgid "Run an executable.  This should be used instead of @code{system*}."
msgstr "Executar um executável. Deve ser usado em vez de @code{system*}."

#. type: item
#: doc/guix-cookbook.texi:1377
#, no-wrap
msgid "with-directory-excursion"
msgstr "with-directory-excursion"

#. type: table
#: doc/guix-cookbook.texi:1380
msgid "Run the body in a different working directory, then restore the previous working directory."
msgstr "Execute o corpo em um diretório de trabalho diferente e restaure o diretório de trabalho anterior."

#. type: item
#: doc/guix-cookbook.texi:1380
#, no-wrap
msgid "substitute*"
msgstr "substitute*"

#. type: table
#: doc/guix-cookbook.texi:1382
msgid "A ``@command{sed}-like'' function."
msgstr "Uma função do tipo ``@command{sed}''."

#. type: Plain text
#: doc/guix-cookbook.texi:1386
msgid "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, for more information on these utilities."
msgstr "@xref{Build Utilities,,, guix, GNU Guix Reference Manual}, para obter mais informações sobre esses utilitários."

#. type: subsubsection
#: doc/guix-cookbook.texi:1387
#, no-wrap
msgid "Module prefix"
msgstr "Prefixo do módulo"

#. type: Plain text
#: doc/guix-cookbook.texi:1397
msgid "The license in our last example needs a prefix: this is because of how the @code{license} module was imported in the package, as @code{#:use-module ((guix licenses)  #:prefix license:)}.  The Guile module import mechanism (@pxref{Using Guile Modules,,, guile, Guile reference manual})  gives the user full control over namespacing: this is needed to avoid clashes between, say, the @samp{zlib} variable from @samp{licenses.scm} (a @emph{license} value) and the @samp{zlib} variable from @samp{compression.scm} (a @emph{package} value)."
msgstr "A licença em nosso último exemplo precisa de um prefixo: isso se deve à forma como o módulo @code{license} foi importado no pacote, como @code{#:use-module ((guix Licenses) #:prefix License:)}. O mecanismo de importação do módulo Guile (@pxref{Using Guile Modules,,, guile, manual de referência do Guile}) dá ao usuário controle total sobre o namespace: isso é necessário para evitar conflitos entre, digamos, a variável @samp{zlib} de @samp {licenses.scm} (um valor @emph{license}) e a variável @samp{zlib} de @samp{compression.scm} (um valor @emph{package})."

#. type: Plain text
#: doc/guix-cookbook.texi:1406
msgid "What we've seen so far covers the majority of packages using a build system other than the @code{trivial-build-system}.  The latter does not automate anything and leaves you to build everything manually.  This can be more demanding and we won't cover it here for now, but thankfully it is rarely necessary to fall back on this system."
msgstr "O que vimos até agora cobre a maioria dos pacotes que usam um sistema de compilação diferente do @code{trivial-build-system}. Este último não automatiza nada e deixa você construir tudo manualmente. Isso pode ser mais exigente e não abordaremos isso aqui por enquanto, mas felizmente raramente é necessário recorrer a este sistema."

#. type: Plain text
#: doc/guix-cookbook.texi:1410
msgid "For the other build systems, such as ASDF, Emacs, Perl, Ruby and many more, the process is very similar to the GNU build system except for a few specialized arguments."
msgstr "Para outros sistemas de construção, como ASDF, Emacs, Perl, Ruby e muitos outros, o processo é muito semelhante ao sistema de construção GNU, exceto por alguns argumentos especializados."

#. type: Plain text
#: doc/guix-cookbook.texi:1415
msgid "@xref{Build Systems,,, guix, GNU Guix Reference Manual}, for more information on build systems, or check the source code in the @samp{$GUIX_CHECKOUT/guix/build} and @samp{$GUIX_CHECKOUT/guix/build-system} directories."
msgstr "@xref{Sistemas de compilação,,, guix.pt_BR, GNU Guix Reference Manual}, para obter mais informações sobre sistemas de construção, ou verifique o código-fonte em @samp{$GUIX_CHECKOUT/guix/build} e @samp{$GUIX_CHECKOUT/guix/build -sistema} diretórios."

#. type: Plain text
#: doc/guix-cookbook.texi:1421
msgid "We can't repeat it enough: having a full-fledged programming language at hand empowers us in ways that reach far beyond traditional package management."
msgstr "Não podemos repetir o suficiente: ter uma linguagem de programação completa em mãos nos capacita de maneiras que vão muito além do gerenciamento tradicional de pacotes."

#. type: Plain text
#: doc/guix-cookbook.texi:1423
msgid "Let's illustrate this with some awesome features of Guix!"
msgstr "Vamos ilustrar isso com alguns recursos incríveis do Guix!"

#. type: Plain text
#: doc/guix-cookbook.texi:1438
msgid "You might find some build systems good enough that there is little to do at all to write a package, to the point that it becomes repetitive and tedious after a while.  A @emph{raison d'être} of computers is to replace human beings at those boring tasks.  So let's tell Guix to do this for us and create the package definition of an R package from CRAN (the output is trimmed for conciseness):"
msgstr "Você pode achar alguns sistemas de compilação bons o suficiente para que haja pouco a fazer para escrever um pacote, a ponto de se tornar repetitivo e tedioso depois de um tempo. Uma @emph{razão de ser} dos computadores é substituir os seres humanos nessas tarefas chatas. Então, vamos dizer ao Guix para fazer isso para nós e criar a definição de pacote de um pacote R do CRAN (a saída é cortada para ser concisa):"

#. type: example
#: doc/guix-cookbook.texi:1441
#, fuzzy, no-wrap
msgid ""
"$ guix import cran --recursive walrus\n"
"\n"
msgstr ""
"$ guix import cran --recursive walrus\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:1445
#, fuzzy, no-wrap
msgid ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-mc2d\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:1449
#, fuzzy, no-wrap
msgid ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"
msgstr ""
"(define-public r-jmvcore\n"
"    ; ...\n"
"    (license gpl2+)))\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:1453
#, fuzzy, no-wrap
msgid ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"
msgstr ""
"(define-public r-wrs2\n"
"    ; ...\n"
"    (license gpl3)))\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:1479
#, fuzzy, no-wrap
msgid ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"
msgstr ""
"(define-public r-walrus\n"
"  (package\n"
"    (name \"r-walrus\")\n"
"    (version \"1.0.3\")\n"
"    (source\n"
"      (origin\n"
"        (method url-fetch)\n"
"        (uri (cran-uri \"walrus\" version))\n"
"        (sha256\n"
"          (base32\n"
"            \"1nk2glcvy4hyksl5ipq2mz8jy4fss90hx6cq98m3w96kzjni6jjj\"))))\n"
"    (build-system r-build-system)\n"
"    (propagated-inputs\n"
"      (list r-ggplot2 r-jmvcore r-r6 r-wrs2))\n"
"    (home-page \"https://github.com/jamovi/walrus\")\n"
"    (synopsis \"Robust Statistical Methods\")\n"
"    (description\n"
"      \"This package provides a toolbox of common robust statistical\n"
"tests, including robust descriptives, robust t-tests, and robust ANOVA.\n"
"It is also available as a module for 'jamovi' (see\n"
"<https://www.jamovi.org> for more information).  Walrus is based on the\n"
"WRS2 package by Patrick Mair, which is in turn based on the scripts and\n"
"work of Rand Wilcox.  These analyses are described in depth in the book\n"
"'Introduction to Robust Estimation & Hypothesis Testing'.\")\n"
"    (license gpl3)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1483
msgid "The recursive importer won't import packages for which Guix already has package definitions, except for the very first."
msgstr "O importador recursivo não importará pacotes para os quais o Guix já possui definições de pacote, exceto o primeiro."

#. type: Plain text
#: doc/guix-cookbook.texi:1488
msgid "Not all applications can be packaged this way, only those relying on a select number of supported systems.  Read about the full list of importers in the guix import section of the manual (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."
msgstr "Nem todos os aplicativos podem ser empacotados dessa forma, apenas aqueles que dependem de um número selecionado de sistemas suportados. Leia sobre a lista completa de importadores na seção de importação de guix do manual (@pxref{Invoking guix import,,, guix, GNU Guix Reference Manual})."

#. type: Plain text
#: doc/guix-cookbook.texi:1494
msgid "Guix can be smart enough to check for updates on systems it knows.  It can report outdated package definitions with"
msgstr "O Guix pode ser inteligente o suficiente para verificar atualizações nos sistemas que conhece. Ele pode relatar definições de pacotes desatualizadas com"

#. type: example
#: doc/guix-cookbook.texi:1497
#, fuzzy, no-wrap
msgid "$ guix refresh hello\n"
msgstr "$ guix refresh hello\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1502
msgid "In most cases, updating a package to a newer version requires little more than changing the version number and the checksum.  Guix can do that automatically as well:"
msgstr "Na maioria dos casos, atualizar um pacote para uma versão mais recente requer pouco mais do que alterar o número da versão e a soma de verificação. Guix também pode fazer isso automaticamente:"

#. type: example
#: doc/guix-cookbook.texi:1505
#, fuzzy, no-wrap
msgid "$ guix refresh hello --update\n"
msgstr "$ guix refresh hello --update\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1512
msgid "If you've started browsing the existing package definitions, you might have noticed that a significant number of them have a @code{inherit} field:"
msgstr "Se você começou a navegar pelas definições de pacotes existentes, deve ter notado que um número significativo deles possui um campo @code{inherit}:"

#. type: lisp
#: doc/guix-cookbook.texi:1527
#, fuzzy, no-wrap
msgid ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"
msgstr ""
"(define-public adwaita-icon-theme\n"
"  (package (inherit gnome-icon-theme)\n"
"    (name \"adwaita-icon-theme\")\n"
"    (version \"3.26.1\")\n"
"    (source (origin\n"
"              (method url-fetch)\n"
"              (uri (string-append \"mirror://gnome/sources/\" name \"/\"\n"
"                                  (version-major+minor version) \"/\"\n"
"                                  name \"-\" version \".tar.xz\"))\n"
"              (sha256\n"
"               (base32\n"
"                \"17fpahgh5dyckgz7rwqvzgnhx53cx9kr2xw0szprc6bnqy977fi8\"))))\n"
"    (native-inputs (list `(,gtk+ \"bin\")))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1532
msgid "All unspecified fields are inherited from the parent package.  This is very convenient to create alternative packages, for instance with different source, version or compilation options."
msgstr "Todos os campos não especificados são herdados do pacote pai. Isto é muito conveniente para criar pacotes alternativos, por exemplo, com diferentes fontes, versões ou opções de compilação."

#. type: Plain text
#: doc/guix-cookbook.texi:1540
msgid "Sadly, some applications can be tough to package.  Sometimes they need a patch to work with the non-standard file system hierarchy enforced by the store.  Sometimes the tests won't run properly.  (They can be skipped but this is not recommended.)  Other times the resulting package won't be reproducible."
msgstr "Infelizmente, alguns aplicativos podem ser difíceis de empacotar. Às vezes, eles precisam de um patch para funcionar com a hierarquia do sistema de arquivos não padrão imposta pelo armazenamento. Às vezes, os testes não funcionam corretamente. (Eles podem ser ignorados, mas isso não é recomendado.) Outras vezes, o pacote resultante não será reproduzível."

#. type: Plain text
#: doc/guix-cookbook.texi:1543
msgid "Should you be stuck, unable to figure out how to fix any sort of packaging issue, don't hesitate to ask the community for help."
msgstr "Se você estiver emperrado, incapaz de descobrir como resolver qualquer tipo de problema de empacotamento, não hesite em pedir ajuda à comunidade."

#. type: Plain text
#: doc/guix-cookbook.texi:1545
msgid "See the @uref{https://www.gnu.org/software/guix/contact/, Guix homepage} for information on the mailing lists, IRC, etc."
msgstr "Consulte @uref{https://www.gnu.org/software/guix/contact/, página inicial do Guix} para obter informações sobre listas de discussão, IRC, etc."

#. type: Plain text
#: doc/guix-cookbook.texi:1553
msgid "This tutorial was a showcase of the sophisticated package management that Guix boasts.  At this point we have mostly restricted this introduction to the @code{gnu-build-system} which is a core abstraction layer on which more advanced abstractions are based."
msgstr "Este tutorial foi uma amostra do sofisticado gerenciamento de pacotes que o Guix possui. Neste ponto, restringimos principalmente esta introdução ao @code{gnu-build-system}, que é uma camada de abstração central na qual se baseiam abstrações mais avançadas."

#. type: Plain text
#: doc/guix-cookbook.texi:1558
msgid "Where do we go from here? Next we ought to dissect the innards of the build system by removing all abstractions, using the @code{trivial-build-system}: this should give us a thorough understanding of the process before investigating some more advanced packaging techniques and edge cases."
msgstr "Para onde vamos daqui? Em seguida, devemos dissecar as entranhas do sistema de construção, removendo todas as abstrações, usando o @code{trivial-build-system}: isso deve nos dar uma compreensão completa do processo antes de investigar algumas técnicas de empacotamento mais avançadas e casos extremos."

#. type: Plain text
#: doc/guix-cookbook.texi:1561
msgid "Other features worth exploring are the interactive editing and debugging capabilities of Guix provided by the Guile REPL@."
msgstr "Outros recursos que valem a pena explorar são os recursos interativos de edição e depuração do Guix fornecidos pelo Guile REPL@."

#. type: Plain text
#: doc/guix-cookbook.texi:1566
msgid "Those fancy features are completely optional and can wait; now is a good time to take a well-deserved break.  With what we've introduced here you should be well armed to package lots of programs.  You can get started right away and hopefully we will see your contributions soon!"
msgstr "Esses recursos sofisticados são totalmente opcionais e podem esperar; agora é um bom momento para fazer uma pausa bem merecida. Com o que apresentamos aqui você deve estar bem preparado para empacotar muitos programas. Você pode começar imediatamente e esperamos ver suas contribuições em breve!"

#. type: itemize
#: doc/guix-cookbook.texi:1573
msgid "The @uref{https://www.gnu.org/software/guix/manual/en/html_node/Defining-Packages.html, package reference in the manual}"
msgstr "O @uref{https://www.gnu.org/software/guix/manual/en/html_node/Defining-Packages.html, referência do pacote no manual}"

#. type: itemize
#: doc/guix-cookbook.texi:1576
msgid "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, Pjotr’s hacking guide to GNU Guix}"
msgstr "@uref{https://gitlab.com/pjotrp/guix-notes/blob/master/HACKING.org, guia de hacking de Pjotr para GNU Guix}"

#. type: itemize
#: doc/guix-cookbook.texi:1579
#, fuzzy
msgid "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, ``GNU Guix: Package without a scheme!''}, by Andreas Enge"
msgstr "@uref{https://www.gnu.org/software/guix/guix-ghm-andreas-20130823.pdf, ``GNU Guix: Package without a scheme!''}, by Andreas Enge"

#. type: Plain text
#: doc/guix-cookbook.texi:1588
msgid "Guix offers a flexible language for declaratively configuring your Guix System.  This flexibility can at times be overwhelming.  The purpose of this chapter is to demonstrate some advanced configuration concepts."
msgstr "Guix oferece uma linguagem flexível para configurar declarativamente seu sistema Guix. Essa flexibilidade às vezes pode ser esmagadora. O objetivo deste capítulo é demonstrar alguns conceitos avançados de configuração."

#. type: Plain text
#: doc/guix-cookbook.texi:1591
msgid "@pxref{System Configuration,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr "@pxref{Configuração do sistema,,, guix.pt_BR, Manual de referência do GNU Guix} para uma referência completa."

#. type: Plain text
#: doc/guix-cookbook.texi:1618
msgid "While the Guix manual explains auto-login one user to @emph{all} TTYs ( @pxref{auto-login to TTY,,, guix, GNU Guix Reference Manual}), some might prefer a situation, in which one user is logged into one TTY with the other TTYs either configured to login different users or no one at all.  Note that one can auto-login one user to any TTY, but it is usually advisable to avoid @code{tty1}, which, by default, is used to log warnings and errors."
msgstr "Embora o manual do Guix explique o login automático de um usuário para @emph{todas} TTYs ( @pxref{auto-login to TTY,,, guix.pt_BR, GNU Guix Reference Manual}), alguns podem preferir uma situação em que um usuário está logado em um TTY com os outros TTYs configurados para fazer login com usuários diferentes ou com nenhum. Observe que é possível fazer login automático de um usuário em qualquer TTY, mas geralmente é aconselhável evitar @code{tty1}, que, por padrão, é usado para registrar avisos e erros."

#. type: Plain text
#: doc/guix-cookbook.texi:1620
msgid "Here is how one might set up auto login for one user to one tty:"
msgstr "Aqui está como se pode configurar o login automático para um usuário em um tty:"

#. type: lisp
#: doc/guix-cookbook.texi:1628
#, fuzzy, no-wrap
msgid ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"
msgstr ""
"(define (auto-login-to-tty config tty user)\n"
"  (if (string=? tty (mingetty-configuration-tty config))\n"
"        (mingetty-configuration\n"
"         (inherit config)\n"
"         (auto-login user))\n"
"        config))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1635
#, fuzzy, no-wrap
msgid ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"
msgstr ""
"(define %my-services\n"
"  (modify-services %base-services\n"
"    ;; @dots{}\n"
"    (mingetty-service-type config =>\n"
"                           (auto-login-to-tty\n"
"                            config \"tty3\" \"alice\"))))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1639
#, fuzzy, no-wrap
msgid ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"
msgstr ""
"(operating-system\n"
"  ;; @dots{}\n"
"  (services %my-services))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1644
msgid "One could also @code{compose} (@pxref{Higher-Order Functions,,, guile, The Guile Reference Manual}) @code{auto-login-to-tty} to login multiple users to multiple ttys."
msgstr "Pode-se também @code{compose} (@pxref{Higher-Order Functions,,,, guile, The Guile Reference Manual}) @code{auto-login-to-tty} para fazer login de vários usuários em vários ttys."

#. type: Plain text
#: doc/guix-cookbook.texi:1651
msgid "Finally, here is a note of caution.  Setting up auto login to a TTY, means that anyone can turn on your computer and run commands as your regular user.  However, if you have an encrypted root partition, and thus already need to enter a passphrase when the system boots, auto-login might be a convenient option."
msgstr "Finalmente, aqui está uma nota de cautela. Configurar o login automático em um TTY significa que qualquer pessoa pode ligar seu computador e executar comandos como seu usuário normal. No entanto, se você tiver uma partição raiz criptografada e, portanto, já precisar inserir uma senha quando o sistema inicializar, o login automático pode ser uma opção conveniente."

#. type: Plain text
#: doc/guix-cookbook.texi:1663
msgid "Guix is, at its core, a source based distribution with substitutes (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}), and as such building packages from their source code is an expected part of regular package installations and upgrades.  Given this starting point, it makes sense that efforts are made to reduce the amount of time spent compiling packages, and recent changes and upgrades to the building and distribution of substitutes continues to be a topic of discussion within Guix."
msgstr "Guix é, em sua essência, uma distribuição baseada em código-fonte com substitutos (@pxref{Substitutos,,, guix.pt_BR, GNU Guix Reference Manual}) e, como tal, construir pacotes a partir de seu código-fonte é uma parte esperada das instalações e atualizações regulares de pacotes. Dado este ponto de partida, faz sentido que sejam feitos esforços para reduzir a quantidade de tempo gasto na compilação de pacotes, e as recentes mudanças e atualizações na construção e distribuição de substitutos continuam a ser um tópico de discussão dentro do Guix."

#. type: Plain text
#: doc/guix-cookbook.texi:1669
msgid "The kernel, while not requiring an overabundance of RAM to build, does take a rather long time on an average machine.  The official kernel configuration, as is the case with many GNU/Linux distributions, errs on the side of inclusiveness, and this is really what causes the build to take such a long time when the kernel is built from source."
msgstr "O kernel, embora não exija uma superabundância de RAM para ser construído, leva muito tempo em uma máquina média. A configuração oficial do kernel, como é o caso de muitas distribuições GNU/Linux, erra pelo lado da inclusão, e é isso que realmente faz com que a construção demore tanto tempo quando o kernel é compilado a partir do código-fonte."

#. type: Plain text
#: doc/guix-cookbook.texi:1674
msgid "The Linux kernel, however, can also just be described as a regular old package, and as such can be customized just like any other package.  The procedure is a little bit different, although this is primarily due to the nature of how the package definition is written."
msgstr "O kernel do Linux, entretanto, também pode ser descrito apenas como um pacote antigo normal e, como tal, pode ser personalizado como qualquer outro pacote. O procedimento é um pouco diferente, embora isso se deva principalmente à natureza de como a definição do pacote é escrita."

#. type: Plain text
#: doc/guix-cookbook.texi:1677
msgid "The @code{linux-libre} kernel package definition is actually a procedure which creates a package."
msgstr "A definição do pacote do kernel @code{linux-libre} é na verdade um procedimento que cria um pacote."

#. type: lisp
#: doc/guix-cookbook.texi:1688
#, fuzzy, no-wrap
msgid ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; A function that takes an arch and a variant.\n"
"                            ;; See kernel-config for an example.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options (default-extra-linux-options version)))\n"
"  ...)\n"
msgstr ""
"(define* (make-linux-libre* version gnu-revision source supported-systems\n"
"                            #:key\n"
"                            (extra-version #f)\n"
"                            ;; A function that takes an arch and a variant.\n"
"                            ;; See kernel-config for an example.\n"
"                            (configuration-file #f)\n"
"                            (defconfig \"defconfig\")\n"
"                            (extra-options %default-extra-linux-options))\n"
"  ...)\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1692
msgid "The current @code{linux-libre} package is for the 5.15.x series, and is declared like this:"
msgstr "O pacote @code{linux-libre} atual é para a série 5.15.x e é declarado assim:"

#. type: lisp
#: doc/guix-cookbook.texi:1701
#, fuzzy, no-wrap
msgid ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\"\n"
"                       \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"
msgstr ""
"(define-public linux-libre-5.15\n"
"  (make-linux-libre* linux-libre-5.15-version\n"
"                     linux-libre-5.15-gnu-revision\n"
"                     linux-libre-5.15-source\n"
"                     '(\"x86_64-linux\" \"i686-linux\" \"armhf-linux\" \"aarch64-linux\" \"riscv64-linux\")\n"
"                     #:configuration-file kernel-config))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1708
msgid "Any keys which are not assigned values inherit their default value from the @code{make-linux-libre} definition.  When comparing the two snippets above, notice the code comment that refers to @code{#:configuration-file}.  Because of this, it is not actually easy to include a custom kernel configuration from the definition, but don't worry, there are other ways to work with what we do have."
msgstr "Quaisquer chaves às quais não sejam atribuídos valores herdam seu valor padrão da definição @code{make-linux-libre}. Ao comparar os dois trechos acima, observe o comentário do código que se refere a @code{#:configuration-file}. Por causa disso, não é realmente fácil incluir uma configuração de kernel personalizada na definição, mas não se preocupe, existem outras maneiras de trabalhar com o que temos."

#. type: Plain text
#: doc/guix-cookbook.texi:1714
msgid "There are two ways to create a kernel with a custom kernel configuration.  The first is to provide a standard @file{.config} file during the build process by including an actual @file{.config} file as a native input to our custom kernel.  The following is a snippet from the custom @code{'configure} phase of the @code{make-linux-libre} package definition:"
msgstr "Existem duas maneiras de criar um kernel com uma configuração de kernel personalizada. A primeira é fornecer um arquivo @file{.config} padrão durante o processo de construção, incluindo um arquivo @file{.config} real como uma entrada nativa para nosso kernel personalizado. A seguir está um trecho da fase @code{'configure} personalizada da definição do pacote @code{make-linux-libre}:"

#. type: lisp
#: doc/guix-cookbook.texi:1718
#, fuzzy, no-wrap
msgid ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"
msgstr ""
"(let ((build  (assoc-ref %standard-phases 'build))\n"
"      (config (assoc-ref (or native-inputs inputs) \"kconfig\")))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1726
#, fuzzy, no-wrap
msgid ""
"  ;; Use a custom kernel configuration file or a default\n"
"  ;; configuration file.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"
msgstr ""
"  ;; Use a custom kernel configuration file or a default\n"
"  ;; configuration file.\n"
"  (if config\n"
"      (begin\n"
"        (copy-file config \".config\")\n"
"        (chmod \".config\" #o666))\n"
"      (invoke \"make\" ,defconfig)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1731
msgid "Below is a sample kernel package.  The @code{linux-libre} package is nothing special and can be inherited from and have its fields overridden like any other package:"
msgstr "Abaixo está um exemplo de pacote de kernel. O pacote @code{linux-libre} não é nada especial e pode ser herdado e ter seus campos substituídos como qualquer outro pacote:"

#. type: lisp
#: doc/guix-cookbook.texi:1740
#, fuzzy, no-wrap
msgid ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"
msgstr ""
"(define-public linux-libre/E2140\n"
"  (package\n"
"    (inherit linux-libre)\n"
"    (native-inputs\n"
"     `((\"kconfig\" ,(local-file \"E2140.config\"))\n"
"      ,@@(alist-delete \"kconfig\"\n"
"                      (package-native-inputs linux-libre))))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1747
msgid "In the same directory as the file defining @code{linux-libre-E2140} is a file named @file{E2140.config}, which is an actual kernel configuration file.  The @code{defconfig} keyword of @code{make-linux-libre} is left blank here, so the only kernel configuration in the package is the one which was included in the @code{native-inputs} field."
msgstr "No mesmo diretório do arquivo que define @code{linux-libre-E2140} está um arquivo chamado @file{E2140.config}, que é um arquivo de configuração real do kernel. A palavra-chave @code{defconfig} de @code{make-linux-libre} é deixada em branco aqui, então a única configuração do kernel no pacote é aquela que foi incluída no campo @code{native-inputs}."

#. type: Plain text
#: doc/guix-cookbook.texi:1752
msgid "The second way to create a custom kernel is to pass a new value to the @code{extra-options} keyword of the @code{make-linux-libre} procedure.  The @code{extra-options} keyword works with another function defined right below it:"
msgstr "A segunda maneira de criar um kernel customizado é passar um novo valor para a palavra-chave @code{extra-options} do procedimento @code{make-linux-libre}. A palavra-chave @code{extra-options} funciona com outra função definida logo abaixo dela:"

#. type: lisp
#: doc/guix-cookbook.texi:1768
#, fuzzy, no-wrap
msgid ""
"(define (default-extra-linux-options version)\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"
msgstr ""
"(define %default-extra-linux-options\n"
"  `(;; https://lists.gnu.org/archive/html/guix-devel/2014-04/msg00039.html\n"
"   (\"CONFIG_DEVPTS_MULTIPLE_INSTANCES\" . #true)\n"
"   ;; Modules required for initrd:\n"
"   (\"CONFIG_NET_9P\" . m)\n"
"   (\"CONFIG_NET_9P_VIRTIO\" . m)\n"
"   (\"CONFIG_VIRTIO_BLK\" . m)\n"
"   (\"CONFIG_VIRTIO_NET\" . m)\n"
"   (\"CONFIG_VIRTIO_PCI\" . m)\n"
"   (\"CONFIG_VIRTIO_BALLOON\" . m)\n"
"   (\"CONFIG_VIRTIO_MMIO\" . m)\n"
"   (\"CONFIG_FUSE_FS\" . m)\n"
"   (\"CONFIG_CIFS\" . m)\n"
"   (\"CONFIG_9P_FS\" . m)))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1779
#, fuzzy, no-wrap
msgid ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"
msgstr ""
"(define (config->string options)\n"
"  (string-join (map (match-lambda\n"
"                      ((option . 'm)\n"
"                       (string-append option \"=m\"))\n"
"                      ((option . #true)\n"
"                       (string-append option \"=y\"))\n"
"                      ((option . #false)\n"
"                       (string-append option \"=n\")))\n"
"                    options)\n"
"               \"\\n\"))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1782
msgid "And in the custom configure script from the `make-linux-libre` package:"
msgstr "E no script de configuração personalizado do pacote `make-linux-libre`:"

#. type: lisp
#: doc/guix-cookbook.texi:1790
#, fuzzy, no-wrap
msgid ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"
msgstr ""
";; Appending works even when the option wasn't in the\n"
";; file.  The last one prevails if duplicated.\n"
"(let ((port (open-file \".config\" \"a\"))\n"
"      (extra-configuration ,(config->string extra-options)))\n"
"  (display extra-configuration port)\n"
"  (close-port port))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1792
#, fuzzy, no-wrap
msgid "(invoke \"make\" \"oldconfig\")\n"
msgstr "(invoke \"make\" \"oldconfig\")\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1797
msgid "So by not providing a configuration-file the @file{.config} starts blank, and then we write into it the collection of flags that we want.  Here's another custom kernel:"
msgstr "Portanto, ao não fornecer um arquivo de configuração, o @file{.config} começa em branco e então escrevemos nele a coleção de flags que desejamos. Aqui está outro kernel personalizado:"

#. type: lisp
#: doc/guix-cookbook.texi:1805
#, fuzzy, no-wrap
msgid ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          ((@@@@ (gnu packages linux) default-extra-linux-options) version)))\n"
"\n"
msgstr ""
"(define %macbook41-full-config\n"
"  (append %macbook41-config-options\n"
"          %file-systems\n"
"          %efi-support\n"
"          %emulation\n"
"          (@@@@ (gnu packages linux) %default-extra-linux-options)))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:1816
#, fuzzy, no-wrap
msgid ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Access the internal 'make-linux-libre*' procedure, which is\n"
"  ;; private and unexported, and is liable to change in the future.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"
msgstr ""
"(define-public linux-libre-macbook41\n"
"  ;; XXX: Access the internal 'make-linux-libre*' procedure, which is\n"
"  ;; private and unexported, and is liable to change in the future.\n"
"  ((@@@@ (gnu packages linux) make-linux-libre*)\n"
"   (@@@@ (gnu packages linux) linux-libre-version)\n"
"   (@@@@ (gnu packages linux) linux-libre-gnu-revision)\n"
"   (@@@@ (gnu packages linux) linux-libre-source)\n"
"   '(\"x86_64-linux\")\n"
"   #:extra-version \"macbook41\"\n"
"   #:extra-options %macbook41-config-options))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1824
#, fuzzy
#| msgid "In the above example @code{%file-systems} is a collection of flags enabling different file system support, @code{%efi-support} enables EFI support and @code{%emulation} enables a x86_64-linux machine to act in 32-bit mode also.  @code{%default-extra-linux-options} are the ones quoted above, which had to be added in since they were replaced in the @code{extra-options} keyword."
msgid "In the above example @code{%file-systems} is a collection of flags enabling different file system support, @code{%efi-support} enables EFI support and @code{%emulation} enables a x86_64-linux machine to act in 32-bit mode also.  The @code{default-extra-linux-options} procedure is the one defined above, which had to be used to avoid loosing the default configuration options of the @code{extra-options} keyword."
msgstr "No exemplo acima @code{%file-systems} é uma coleção de sinalizadores que habilitam suporte a diferentes sistemas de arquivos, @code{%efi-support} habilita suporte EFI e @code{%emulation} permite que uma máquina x86_64-linux atue em Modo de 32 bits também. @code{%default-extra-linux-options} são os citados acima, que tiveram que ser adicionados pois foram substituídos na palavra-chave @code{extra-options}."

#. type: Plain text
#: doc/guix-cookbook.texi:1833
msgid "This all sounds like it should be doable, but how does one even know which modules are required for a particular system? Two places that can be helpful in trying to answer this question is the @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Gentoo Handbook} and the @uref{https://www.kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentation from the kernel itself}.  From the kernel documentation, it seems that @code{make localmodconfig} is the command we want."
msgstr "Tudo isso parece viável, mas como saber quais módulos são necessários para um sistema específico? Dois lugares que podem ser úteis para tentar responder a esta pergunta são o @uref{https://wiki.gentoo.org/wiki/Handbook:AMD64/Installation/Kernel, Gentoo Handbook} e o @uref{https://www .kernel.org/doc/html/latest/admin-guide/README.html?highlight=localmodconfig, documentação do próprio kernel}. Pela documentação do kernel, parece que @code{make localmodconfig} é o comando que queremos."

#. type: Plain text
#: doc/guix-cookbook.texi:1836
msgid "In order to actually run @code{make localmodconfig} we first need to get and unpack the kernel source code:"
msgstr "Para realmente executar @code{make localmodconfig} primeiro precisamos obter e descompactar o código-fonte do kernel:"

#. type: example
#: doc/guix-cookbook.texi:1839
#, fuzzy, no-wrap
msgid "tar xf $(guix build linux-libre --source)\n"
msgstr "tar xf $(guix build linux-libre --source)\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1846
msgid "Once inside the directory containing the source code run @code{touch .config} to create an initial, empty @file{.config} to start with.  @code{make localmodconfig} works by seeing what you already have in @file{.config} and letting you know what you're missing.  If the file is blank then you're missing everything.  The next step is to run:"
msgstr "Uma vez dentro do diretório que contém o código-fonte, execute @code{touch .config} para criar um @file{.config} inicial e vazio para começar. @code{make localmodconfig} funciona vendo o que você já tem em @file{.config} e informando o que está faltando. Se o arquivo estiver em branco, você está perdendo tudo. O próximo passo é executar:"

#. type: example
#: doc/guix-cookbook.texi:1849
#, fuzzy, no-wrap
msgid "guix shell -D linux-libre -- make localmodconfig\n"
msgstr "guix shell -D linux-libre -- make localmodconfig\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1854
msgid "and note the output.  Do note that the @file{.config} file is still empty.  The output generally contains two types of warnings.  The first start with \"WARNING\" and can actually be ignored in our case.  The second read:"
msgstr "e observe a saída. Observe que o arquivo @file{.config} ainda está vazio. A saída geralmente contém dois tipos de avisos. O primeiro começa com \"WARNING\" e pode ser ignorado no nosso caso. A segunda leitura:"

#. type: example
#: doc/guix-cookbook.texi:1857
#, fuzzy, no-wrap
msgid "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"
msgstr "module pcspkr did not have configs CONFIG_INPUT_PCSPKR\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1862
msgid "For each of these lines, copy the @code{CONFIG_XXXX_XXXX} portion into the @file{.config} in the directory, and append @code{=m}, so in the end it looks like this:"
msgstr "Para cada uma dessas linhas, copie a parte @code{CONFIG_XXXX_XXXX} para @file{.config} no diretório e anexe @code{=m}, para que no final fique assim:"

#. type: example
#: doc/guix-cookbook.texi:1866
#, fuzzy, no-wrap
msgid ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"
msgstr ""
"CONFIG_INPUT_PCSPKR=m\n"
"CONFIG_VIRTIO=m\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1875
msgid "After copying all the configuration options, run @code{make localmodconfig} again to make sure that you don't have any output starting with ``module''.  After all of these machine specific modules there are a couple more left that are also needed.  @code{CONFIG_MODULES} is necessary so that you can build and load modules separately and not have everything built into the kernel.  @code{CONFIG_BLK_DEV_SD} is required for reading from hard drives.  It is possible that there are other modules which you will need."
msgstr "Após copiar todas as opções de configuração, execute @code{make localmodconfig} novamente para ter certeza de que você não tem nenhuma saída começando com ``module''. Depois de todos esses módulos específicos da máquina, restam mais alguns que também são necessários. @code{CONFIG_MODULES} é necessário para que você possa construir e carregar módulos separadamente e não ter tudo embutido no kernel. @code{CONFIG_BLK_DEV_SD} é necessário para leitura de discos rígidos. É possível que existam outros módulos dos quais você precisará."

#. type: Plain text
#: doc/guix-cookbook.texi:1879
msgid "This post does not aim to be a guide to configuring your own kernel however, so if you do decide to build a custom kernel you'll have to seek out other guides to create a kernel which is just right for your needs."
msgstr "Este post não pretende ser um guia para configurar seu próprio kernel, portanto, se você decidir construir um kernel personalizado, você terá que procurar outros guias para criar um kernel adequado às suas necessidades."

#. type: Plain text
#: doc/guix-cookbook.texi:1887
msgid "The second way to setup the kernel configuration makes more use of Guix's features and allows you to share configuration segments between different kernels.  For example, all machines using EFI to boot have a number of EFI configuration flags that they need.  It is likely that all the kernels will share a list of file systems to support.  By using variables it is easier to see at a glance what features are enabled and to make sure you don't have features in one kernel but missing in another."
msgstr "A segunda maneira de definir a configuração do kernel faz mais uso dos recursos do Guix e permite compartilhar segmentos de configuração entre diferentes kernels. Por exemplo, todas as máquinas que usam EFI para inicializar possuem vários sinalizadores de configuração EFI necessários. É provável que todos os kernels compartilhem uma lista de sistemas de arquivos para suporte. Ao usar variáveis, é mais fácil ver rapidamente quais recursos estão habilitados e garantir que você não tenha recursos em um kernel, mas ausentes em outro."

#. type: Plain text
#: doc/guix-cookbook.texi:1892
msgid "Left undiscussed however, is Guix's initrd and its customization.  It is likely that you'll need to modify the initrd on a machine using a custom kernel, since certain modules which are expected to be built may not be available for inclusion into the initrd."
msgstr "No entanto, não foi discutido o initrd do Guix e sua personalização. É provável que você precise modificar o initrd em uma máquina usando um kernel customizado, já que certos módulos que devem ser compilados podem não estar disponíveis para inclusão no initrd."

#. type: Plain text
#: doc/guix-cookbook.texi:1899
msgid "Historically, Guix System is centered around an @code{operating-system} structure.  This structure contains various fields ranging from the bootloader and kernel declaration to the services to install."
msgstr "Historicamente, o Sistema Guix é centrado em uma estrutura @code{operating-system}. Esta estrutura contém vários campos que vão desde o gerenciador de boot e a declaração do kernel até os serviços a serem instalados."

#. type: Plain text
#: doc/guix-cookbook.texi:1905
msgid "Depending on the target machine, that can go from a standard @code{x86_64} machine to a small ARM single board computer such as the Pine64, the image constraints can vary a lot.  The hardware manufacturers will impose different image formats with various partition sizes and offsets."
msgstr "Dependendo da máquina de destino, que pode ir de uma máquina @code{x86_64} padrão a um pequeno computador de placa única ARM, como o Pine64, as restrições de imagem podem variar muito. Os fabricantes de hardware imporão diferentes formatos de imagem com vários tamanhos de partição e deslocamentos."

#. type: Plain text
#: doc/guix-cookbook.texi:1910
msgid "To create images suitable for all those machines, a new abstraction is necessary: that's the goal of the @code{image} record.  This record contains all the required information to be transformed into a standalone image, that can be directly booted on any target machine."
msgstr "Para criar imagens adequadas para todas essas máquinas, é necessária uma nova abstração: esse é o objetivo do registro @code{image}. Este registro contém todas as informações necessárias para ser transformada em uma imagem autônoma, que pode ser inicializada diretamente em qualquer máquina de destino."

#. type: lisp
#: doc/guix-cookbook.texi:1932
#, fuzzy, no-wrap
msgid ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"
msgstr ""
"(define-record-type* <image>\n"
"  image make-image\n"
"  image?\n"
"  (name               image-name ;symbol\n"
"                      (default #f))\n"
"  (format             image-format) ;symbol\n"
"  (target             image-target\n"
"                      (default #f))\n"
"  (size               image-size  ;size in bytes as integer\n"
"                      (default 'guess))\n"
"  (operating-system   image-operating-system  ;<operating-system>\n"
"                      (default #f))\n"
"  (partitions         image-partitions ;list of <partition>\n"
"                      (default '()))\n"
"  (compression?       image-compression? ;boolean\n"
"                      (default #t))\n"
"  (volatile-root?     image-volatile-root? ;boolean\n"
"                      (default #t))\n"
"  (substitutable?     image-substitutable? ;boolean\n"
"                      (default #t)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1938
msgid "This record contains the operating-system to instantiate. The @code{format} field defines the image type and can be @code{efi-raw}, @code{qcow2} or @code{iso9660} for instance. In the future, it could be extended to @code{docker} or other image types."
msgstr "Este registro contém o sistema operacional a ser instanciado. O campo @code{format} define o tipo de imagem e pode ser @code{efi-raw}, @code{qcow2} ou @code{iso9660} por exemplo. No futuro, poderá ser estendido para @code{docker} ou outros tipos de imagem."

#. type: Plain text
#: doc/guix-cookbook.texi:1941
msgid "A new directory in the Guix sources is dedicated to images definition. For now there are four files:"
msgstr "Um novo diretório nas fontes do Guix é dedicado à definição de imagens. Por enquanto existem quatro arquivos:"

#. type: file{#1}
#: doc/guix-cookbook.texi:1943
#, fuzzy, no-wrap
msgid "gnu/system/images/hurd.scm"
msgstr "gnu/system/images/hurd.scm"

#. type: file{#1}
#: doc/guix-cookbook.texi:1944
#, fuzzy, no-wrap
msgid "gnu/system/images/pine64.scm"
msgstr "gnu/system/images/pine64.scm"

#. type: file{#1}
#: doc/guix-cookbook.texi:1945
#, fuzzy, no-wrap
msgid "gnu/system/images/novena.scm"
msgstr "gnu/system/images/novena.scm"

#. type: file{#1}
#: doc/guix-cookbook.texi:1946
#, fuzzy, no-wrap
msgid "gnu/system/images/pinebook-pro.scm"
msgstr "gnu/system/images/pinebook-pro.scm"

#. type: Plain text
#: doc/guix-cookbook.texi:1952
msgid "Let's have a look to @file{pine64.scm}. It contains the @code{pine64-barebones-os} variable which is a minimal definition of an operating-system dedicated to the @b{Pine A64 LTS} board."
msgstr "Vamos dar uma olhada em @file{pine64.scm}. Ele contém a variável @code{pine64-barebones-os} que é uma definição mínima de um sistema operacional dedicado à placa @b{Pine A64 LTS}."

#. type: lisp
#: doc/guix-cookbook.texi:1976
#, fuzzy, no-wrap
msgid ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"
msgstr ""
"(define pine64-barebones-os\n"
"  (operating-system\n"
"   (host-name \"vignemale\")\n"
"   (timezone \"Europe/Paris\")\n"
"   (locale \"en_US.utf8\")\n"
"   (bootloader (bootloader-configuration\n"
"                (bootloader u-boot-pine64-lts-bootloader)\n"
"                (targets '(\"/dev/vda\"))))\n"
"   (initrd-modules '())\n"
"   (kernel linux-libre-arm64-generic)\n"
"   (file-systems (cons (file-system\n"
"                        (device (file-system-label \"my-root\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                       %base-file-systems))\n"
"   (services (cons (service agetty-service-type\n"
"                            (agetty-configuration\n"
"                             (extra-options '(\"-L\")) ; no carrier detect\n"
"                             (baud-rate \"115200\")\n"
"                             (term \"vt100\")\n"
"                             (tty \"ttyS0\")))\n"
"                   %base-services))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1980
msgid "The @code{kernel} and @code{bootloader} fields are pointing to packages dedicated to this board."
msgstr "Os campos @code{kernel} e @code{bootloader} apontam para pacotes dedicados a esta placa."

#. type: Plain text
#: doc/guix-cookbook.texi:1982
msgid "Right below, the @code{pine64-image-type} variable is also defined."
msgstr "Logo abaixo, a variável @code{pine64-image-type} também está definida."

#. type: lisp
#: doc/guix-cookbook.texi:1988
#, fuzzy, no-wrap
msgid ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"
msgstr ""
"(define pine64-image-type\n"
"  (image-type\n"
"   (name 'pine64-raw)\n"
"   (constructor (cut image-with-os arm64-disk-image <>))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:1992
msgid "It's using a record we haven't talked about yet, the @code{image-type} record, defined this way:"
msgstr "Ele está usando um registro do qual ainda não falamos, o registro @code{image-type}, definido desta forma:"

#. type: lisp
#: doc/guix-cookbook.texi:1999
#, fuzzy, no-wrap
msgid ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"
msgstr ""
"(define-record-type* <image-type>\n"
"  image-type make-image-type\n"
"  image-type?\n"
"  (name           image-type-name) ;symbol\n"
"  (constructor    image-type-constructor)) ;<operating-system> -> <image>\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2005
msgid "The main purpose of this record is to associate a name to a procedure transforming an @code{operating-system} to an image.  To understand why it is necessary, let's have a look to the command producing an image from an @code{operating-system} configuration file:"
msgstr "O objetivo principal deste registro é associar um nome a um procedimento que transforma um @código{operating-system} em uma imagem. Para entender por que isso é necessário, vamos dar uma olhada no comando que produz uma imagem de um arquivo de configuração @code{operating-system}:"

#. type: example
#: doc/guix-cookbook.texi:2008
#, fuzzy, no-wrap
msgid "guix system image my-os.scm\n"
msgstr "guix system image my-os.scm\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2014
msgid "This command expects an @code{operating-system} configuration but how should we indicate that we want an image targeting a Pine64 board? We need to provide an extra information, the @code{image-type}, by passing the @code{--image-type} or @code{-t} flag, this way:"
msgstr "Este comando espera uma configuração @code{operating-system} mas como devemos indicar que queremos uma imagem direcionada a uma placa Pine64? Precisamos fornecer uma informação extra, o @code{image-type}, passando o sinalizador @code{--image-type} ou @code{-t}, desta forma:"

#. type: example
#: doc/guix-cookbook.texi:2017
#, fuzzy, no-wrap
msgid "guix system image --image-type=pine64-raw my-os.scm\n"
msgstr "guix system image --image-type=pine64-raw my-os.scm\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2023
msgid "This @code{image-type} parameter points to the @code{pine64-image-type} defined above. Hence, the @code{operating-system} declared in @code{my-os.scm} will be applied the @code{(cut image-with-os arm64-disk-image <>)} procedure to turn it into an image."
msgstr "Este parâmetro @code{image-type} aponta para o @code{pine64-image-type} definido acima. Portanto, ao @code{operating-system} declarado em @code{my-os.scm} será aplicado o procedimento @code{(cut image-with-os arm64-disk-image <>)} para transformá-lo em um imagem."

#. type: Plain text
#: doc/guix-cookbook.texi:2025
msgid "The resulting image looks like:"
msgstr "A imagem resultante se parece com:"

#. type: lisp
#: doc/guix-cookbook.texi:2035
#, fuzzy, no-wrap
msgid ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"
msgstr ""
"(image\n"
" (format 'disk-image)\n"
" (target \"aarch64-linux-gnu\")\n"
" (operating-system my-os)\n"
" (partitions\n"
"  (list (partition\n"
"         (inherit root-partition)\n"
"         (offset root-offset)))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2039
msgid "which is the aggregation of the @code{operating-system} defined in @code{my-os.scm} to the @code{arm64-disk-image} record."
msgstr "que é a agregação do @code{operating-system} definido em @code{my-os.scm} ao registro @code{arm64-disk-image}."

#. type: Plain text
#: doc/guix-cookbook.texi:2041
msgid "But enough Scheme madness. What does this image API bring to the Guix user?"
msgstr "Mas chega de loucura do esquema. O que essa API de imagem traz para o usuário do Guix?"

#. type: Plain text
#: doc/guix-cookbook.texi:2043
msgid "One can run:"
msgstr "Pode-se executar:"

#. type: example
#: doc/guix-cookbook.texi:2047
#, fuzzy, no-wrap
msgid ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"The available image types are:\n"
"\n"
msgstr ""
"mathieu@@cervin:~$ guix system --list-image-types\n"
"The available image types are:\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:2065
#, fuzzy, no-wrap
msgid ""
"   - unmatched-raw\n"
"   - rock64-raw\n"
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - iso9660\n"
"   - uncompressed-iso9660\n"
"   - tarball\n"
"   - efi-raw\n"
"   - mbr-raw\n"
"   - docker\n"
"   - wsl2\n"
"   - raw-with-offset\n"
"   - efi32-raw\n"
msgstr ""
"   - unmatched-raw\n"
"   - rock64-raw\n"
"   - pinebook-pro-raw\n"
"   - pine64-raw\n"
"   - novena-raw\n"
"   - hurd-raw\n"
"   - hurd-qcow2\n"
"   - qcow2\n"
"   - iso9660\n"
"   - uncompressed-iso9660\n"
"   - tarball\n"
"   - efi-raw\n"
"   - mbr-raw\n"
"   - docker\n"
"   - wsl2\n"
"   - raw-with-offset\n"
"   - efi32-raw\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2070
msgid "and by writing an @code{operating-system} file based on @code{pine64-barebones-os}, you can customize your image to your preferences in a file (@file{my-pine-os.scm}) like this:"
msgstr "e escrevendo um arquivo @code{operating-system} baseado em @code{pine64-barebones-os}, você pode personalizar sua imagem de acordo com suas preferências em um arquivo (@file{my-pine-os.scm}) como este :"

#. type: lisp
#: doc/guix-cookbook.texi:2074
#, fuzzy, no-wrap
msgid ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"
msgstr ""
"(use-modules (gnu services linux)\n"
"             (gnu system images pine64))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2085
#, fuzzy, no-wrap
msgid ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"
msgstr ""
"(let ((base-os pine64-barebones-os))\n"
"  (operating-system\n"
"    (inherit base-os)\n"
"    (timezone \"America/Indiana/Indianapolis\")\n"
"    (services\n"
"     (cons\n"
"      (service earlyoom-service-type\n"
"               (earlyoom-configuration\n"
"                (prefer-regexp \"icecat|chromium\")))\n"
"      (operating-system-user-services base-os)))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2088
msgid "run:"
msgstr "execute:"

#. type: example
#: doc/guix-cookbook.texi:2091
#, fuzzy, no-wrap
msgid "guix system image --image-type=pine64-raw my-pine-os.scm\n"
msgstr "guix system image --image-type=pine64-raw my-pine-os.scm\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2094
msgid "or,"
msgstr "ou,"

#. type: example
#: doc/guix-cookbook.texi:2097
#, fuzzy, no-wrap
msgid "guix system image --image-type=hurd-raw my-hurd-os.scm\n"
msgstr "guix system image --image-type=hurd-raw my-hurd-os.scm\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2101
msgid "to get an image that can be written directly to a hard drive and booted from."
msgstr "para obter uma imagem que pode ser gravada diretamente em um disco rígido e inicializada."

#. type: Plain text
#: doc/guix-cookbook.texi:2103
msgid "Without changing anything to @code{my-hurd-os.scm}, calling:"
msgstr "Sem alterar nada em @code{my-hurd-os.scm}, chamando:"

#. type: example
#: doc/guix-cookbook.texi:2106
#, fuzzy, no-wrap
msgid "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"
msgstr "guix system image --image-type=hurd-qcow2 my-hurd-os.scm\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2109
msgid "will instead produce a Hurd QEMU image."
msgstr "em vez disso, produzirá uma imagem Hurd QEMU."

#. type: cindex
#: doc/guix-cookbook.texi:2112
#, no-wrap
msgid "2FA, two-factor authentication"
msgstr "2FA, autenticação de dois fatores"

#. type: cindex
#: doc/guix-cookbook.texi:2113
#, no-wrap
msgid "U2F, Universal 2nd Factor"
msgstr "U2F, 2º Fator Universal"

#. type: cindex
#: doc/guix-cookbook.texi:2114
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "security key, configuration"
msgstr "Configuração do sistema"

#. type: Plain text
#: doc/guix-cookbook.texi:2121
msgid "The use of security keys can improve your security by providing a second authentication source that cannot be easily stolen or copied, at least for a remote adversary (something that you have), to the main secret (a passphrase -- something that you know), reducing the risk of impersonation."
msgstr "O uso de chaves de segurança pode melhorar sua segurança, fornecendo uma segunda fonte de autenticação que não pode ser facilmente roubada ou copiada, pelo menos para um adversário remoto (algo que você possui), para o segredo principal (uma senha - algo que você conhece). , reduzindo o risco de falsificação de identidade."

#. type: Plain text
#: doc/guix-cookbook.texi:2126
msgid "The example configuration detailed below showcases what minimal configuration needs to be made on your Guix System to allow the use of a Yubico security key.  It is hoped the configuration can be useful for other security keys as well, with minor adjustments."
msgstr "O exemplo de configuração detalhado abaixo mostra qual configuração mínima precisa ser feita em seu sistema Guix para permitir o uso de uma chave de segurança Yubico. Espera-se que a configuração também possa ser útil para outras chaves de segurança, com pequenos ajustes."

#. type: subsection
#: doc/guix-cookbook.texi:2127
#, no-wrap
msgid "Configuration for use as a two-factor authenticator (2FA)"
msgstr "Configuração para uso como autenticador de dois fatores (2FA)"

#. type: Plain text
#: doc/guix-cookbook.texi:2135
msgid "To be usable, the udev rules of the system should be extended with key-specific rules.  The following shows how to extend your udev rules with the @file{lib/udev/rules.d/70-u2f.rules} udev rule file provided by the @code{libfido2} package from the @code{(gnu packages security-token)} module and add your user to the @samp{\"plugdev\"} group it uses:"
msgstr "Para serem utilizáveis, as regras do udev do sistema devem ser estendidas com regras específicas de chave. O seguinte mostra como estender suas regras do udev com o arquivo de regras do udev @file{lib/udev/rules.d/70-u2f.rules} fornecido pelo pacote @code{libfido2} do @code{(gnu packages security- token)} e adicione seu usuário ao grupo @samp{\"plugdev\"} que ele usa:"

#. type: lisp
#: doc/guix-cookbook.texi:2154
#, fuzzy, no-wrap
msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"
msgstr ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (users (cons* (user-account\n"
"               (name \"your-user\")\n"
"               (group \"users\")\n"
"               (supplementary-groups\n"
"\t\t'(\"wheel\" \"netdev\" \"audio\" \"video\"\n"
"                  \"plugdev\"))           ;<- added system group\n"
"               (home-directory \"/home/your-user\"))\n"
"              %base-user-accounts))\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'fido2 libfido2 #:groups '(\"plugdev\")))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2159
msgid "After re-configuring your system and re-logging in your graphical session so that the new group is in effect for your user, you can verify that your key is usable by launching:"
msgstr "Depois de reconfigurar seu sistema e fazer login novamente em sua sessão gráfica para que o novo grupo esteja em vigor para seu usuário, você pode verificar se sua chave pode ser usada iniciando:"

#. type: example
#: doc/guix-cookbook.texi:2162
#, fuzzy, no-wrap
msgid "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"
msgstr "guix shell ungoogled-chromium -- chromium chrome://settings/securityKeys\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2168
msgid "and validating that the security key can be reset via the ``Reset your security key'' menu.  If it works, congratulations, your security key is ready to be used with applications supporting two-factor authentication (2FA)."
msgstr "e validar que a chave de segurança pode ser redefinida através do menu ``Redefinir sua chave de segurança''. Se funcionar, parabéns, sua chave de segurança está pronta para ser usada com aplicativos que suportam autenticação de dois fatores (2FA)."

#. type: subsection
#: doc/guix-cookbook.texi:2169
#, no-wrap
msgid "Disabling OTP code generation for a Yubikey"
msgstr "Desativando a geração de código OTP para um Yubikey"

#. type: cindex
#: doc/guix-cookbook.texi:2170
#, no-wrap
msgid "disabling yubikey OTP"
msgstr "desabilitando o yubikey OTP"

#. type: Plain text
#: doc/guix-cookbook.texi:2176
msgid "If you use a Yubikey security key and are irritated by the spurious OTP codes it generates when inadvertently touching the key (e.g. causing you to become a spammer in the @samp{#guix} channel when discussing from your favorite IRC client!), you can disable it via the following @command{ykman} command:"
msgstr "Se você usa uma chave de segurança Yubikey e fica irritado com os códigos OTP falsos que ela gera ao tocar inadvertidamente na chave (por exemplo, fazendo com que você se torne um spammer no canal @samp{#guix} ao discutir sobre seu cliente de IRC favorito!), você pode desativá-lo através do seguinte comando @command{ykman}:"

#. type: example
#: doc/guix-cookbook.texi:2179
#, no-wrap
msgid "guix shell python-yubikey-manager -- ykman config usb --force --disable OTP\n"
msgstr "guix shell python-yubikey-manager -- ykman config usb --force --disable OTP\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2186
msgid "Alternatively, you could use the @command{ykman-gui} command provided by the @code{yubikey-manager-qt} package and either wholly disable the @samp{OTP} application for the USB interface or, from the @samp{Applications -> OTP} view, delete the slot 1 configuration, which comes pre-configured with the Yubico OTP application."
msgstr "Alternativamente, você pode usar o comando @command{ykman-gui} fornecido pelo pacote @code{yubikey-manager-qt} e desativar totalmente o aplicativo @samp{OTP} para a interface USB ou, a partir do pacote @samp{Applications -> Visualização OTP}, exclua a configuração do slot 1, que vem pré-configurada com o aplicativo Yubico OTP."

#. type: subsection
#: doc/guix-cookbook.texi:2187
#, no-wrap
msgid "Requiring a Yubikey to open a KeePassXC database"
msgstr "Exigindo que um Yubikey abra um banco de dados KeePassXC"

#. type: cindex
#: doc/guix-cookbook.texi:2188
#, no-wrap
msgid "yubikey, keepassxc integration"
msgstr "yubikey, keepassxc integration"

#. type: Plain text
#: doc/guix-cookbook.texi:2192
msgid "The KeePassXC password manager application has support for Yubikeys, but it requires installing a udev rules for your Guix System and some configuration of the Yubico OTP application on the key."
msgstr "O aplicativo gerenciador de senhas KeePassXC tem suporte para Yubikeys, mas requer a instalação de regras udev para seu sistema Guix e algumas configurações do aplicativo Yubico OTP na chave."

#. type: Plain text
#: doc/guix-cookbook.texi:2195
msgid "The necessary udev rules file comes from the @code{yubikey-personalization} package, and can be installed like:"
msgstr "O arquivo de regras do udev necessário vem do pacote @code{yubikey-personalization} e pode ser instalado como:"

#. type: lisp
#: doc/guix-cookbook.texi:2205
#, fuzzy, no-wrap
msgid ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'yubikey yubikey-personalization))))\n"
msgstr ""
"(use-package-modules ... security-token ...)\n"
"...\n"
"(operating-system\n"
" ...\n"
" (services\n"
"  (cons*\n"
"   ...\n"
"   (udev-rules-service 'yubikey yubikey-personalization))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2212
msgid "After reconfiguring your system (and reconnecting your Yubikey), you'll then want to configure the OTP challenge/response application of your Yubikey on its slot 2, which is what KeePassXC uses.  It's easy to do so via the Yubikey Manager graphical configuration tool, which can be invoked with:"
msgstr "Depois de reconfigurar seu sistema (e reconectar seu Yubikey), você desejará configurar o aplicativo de desafio/resposta OTP de seu Yubikey em seu slot 2, que é o que o KeePassXC usa. É fácil fazer isso por meio da ferramenta de configuração gráfica Yubikey Manager, que pode ser invocada com:"

#. type: example
#: doc/guix-cookbook.texi:2215
#, no-wrap
msgid "guix shell yubikey-manager-qt -- ykman-gui\n"
msgstr "guix shell yubikey-manager-qt -- ykman-gui\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2224
msgid "First, ensure @samp{OTP} is enabled under the @samp{Interfaces} tab, then navigate to @samp{Applications -> OTP}, and click the @samp{Configure} button under the @samp{Long Touch (Slot 2)} section.  Select @samp{Challenge-response}, input or generate a secret key, and click the @samp{Finish} button.  If you have a second Yubikey you'd like to use as a backup, you should configure it the same way, using the @emph{same} secret key."
msgstr "Primeiro, certifique-se de que @samp{OTP} esteja habilitado na aba @samp{Interfaces}, depois navegue até @samp{Applications -> OTP} e clique no botão @samp{Configure} abaixo de @samp{Long Touch (Slot 2 )} seção. Selecione @samp{Challenge-response}, insira ou gere uma chave secreta e clique no botão @samp{Finish}. Se você tiver um segundo Yubikey que gostaria de usar como backup, você deve configurá-lo da mesma forma, usando a chave secreta @emph{same}."

#. type: Plain text
#: doc/guix-cookbook.texi:2231
msgid "Your Yubikey should now be detected by KeePassXC.  It can be added to a database by navigating to KeePassXC's @samp{Database -> Database Security...} menu, then clicking the @samp{Add additional protection...} button, then @samp{Add Challenge-Response}, selecting the security key from the drop-down menu and clicking the @samp{OK} button to complete the setup."
msgstr "Seu Yubikey agora deve ser detectado pelo KeePassXC. Ele pode ser adicionado a um banco de dados navegando até o menu @samp{Database -> Database Security...} do KeePassXC e clicando no botão @samp{Adicionar proteção adicional...} e em @samp{Add Challenge-Response}, selecionando a chave de segurança no menu suspenso e clicando no botão @samp{OK} para concluir a configuração."

#. type: cindex
#: doc/guix-cookbook.texi:2235
#, no-wrap
msgid "dynamic DNS, DDNS"
msgstr "DNS dinâmico, DDNS"

#. type: Plain text
#: doc/guix-cookbook.texi:2245
msgid "If your @acronym{ISP, Internet Service Provider} only provides dynamic IP addresses, it can be useful to setup a dynamic @acronym{DNS, Domain Name System} (also known as @acronym{DDNS, Dynamic DNS}) service to associate a static host name to a public but dynamic (often changing) IP address.  There are multiple existing services that can be used for this; in the following mcron job, @url{https://duckdns.org, DuckDNS} is used.  It should also work with other dynamic DNS services that offer a similar interface to update the IP address, such as @url{https://freedns.afraid.org/}, with minor adjustments."
msgstr "Se o seu @acronym{ISP, Internet Service Provider} fornece apenas endereços IP dinâmicos, pode ser útil configurar um serviço @acronym{DNS, Domain Name System} dinâmico (também conhecido como @acronym{DDNS, Dynamic DNS}) para associar um nome de host estático para um endereço IP público, mas dinâmico. Existem vários serviços que podem ser usados para isso; no job mcron a seguir, @url{https://duckdns.org, DuckDNS} é usado. Também deve funcionar com outros serviços DNS dinâmicos que oferecem uma interface semelhante para atualizar o endereço IP."

#. type: Plain text
#: doc/guix-cookbook.texi:2250
msgid "The mcron job is provided below, where @var{DOMAIN} should be substituted for your own domain prefix, and the DuckDNS provided token associated to @var{DOMAIN} added to the @file{/etc/duckdns/@var{DOMAIN}.token} file."
msgstr "O Job mcron é fornecido abaixo, onde @var{DOMAIN} deve ser substituído pelo seu próprio prefixo de domínio, e o token fornecido pelo DuckDNS é associado a @var{DOMAIN} e adicionado ao arquivo @file{/etc/duckdns/@var{DOMAIN} arquivo .token}."

#. type: lisp
#: doc/guix-cookbook.texi:2270
#, fuzzy, no-wrap
msgid ""
"(define duckdns-job\n"
"  ;; Update personal domain IP every 5 minutes.\n"
"  #~(job '(next-minute (range 0 60 5))\n"
"\t #$(program-file\n"
"            \"duckdns-update\"\n"
"            (with-extensions (list guile-gnutls) ;required by (web client)\n"
"              #~(begin\n"
"                  (use-modules (ice-9 textual-ports)\n"
"                               (web client))\n"
"                  (let ((token (string-trim-both\n"
"                                (call-with-input-file \"/etc/duckdns/@var{DOMAIN}.token\"\n"
"                                  get-string-all)))\n"
"                        (query-template (string-append \"https://www.duckdns.org/\"\n"
"                                                       \"update?domains=@var{DOMAIN}\"\n"
"                                                       \"&token=~a&ip=\")))\n"
"                    (http-get (format #f query-template token))))))\n"
"         \"duckdns-update\"\n"
"         #:user \"nobody\"))\n"
msgstr ""
"(define duckdns-job\n"
"  ;; Update personal domain IP every 5 minutes.\n"
"  #~(job '(next-minute (range 0 60 5))\n"
"\t #$(program-file\n"
"            \"duckdns-update\"\n"
"            (with-extensions (list guile-gnutls) ;required by (web client)\n"
"              #~(begin\n"
"                  (use-modules (ice-9 textual-ports)\n"
"                               (web client))\n"
"                  (let ((token (string-trim-both\n"
"                                (call-with-input-file \"/etc/duckdns/@var{DOMAIN}.token\"\n"
"                                  get-string-all)))\n"
"                        (query-template (string-append \"https://www.duckdns.org/\"\n"
"                                                       \"update?domains=@var{DOMAIN}\"\n"
"                                                       \"&token=~a&ip=\")))\n"
"                    (http-get (format #f query-template token))))))\n"
"         \"duckdns-update\"\n"
"         #:user \"nobody\"))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2274
msgid "The job then needs to be added to the list of mcron jobs for your system, using something like:"
msgstr "O Job então precisa ser adicionado à lista de trabalhos mcron do seu sistema, usando algo como:"

#. type: lisp
#: doc/guix-cookbook.texi:2283
#, no-wrap
msgid ""
"(operating-system\n"
" (services\n"
"  (cons* (service mcron-service-type\n"
"           (mcron-configuration\n"
"             (jobs (list duckdns-job ...))))\n"
"         ...\n"
"         %base-services)))\n"
msgstr ""
"(operating-system\n"
" (services\n"
"  (cons* (service mcron-service-type\n"
"           (mcron-configuration\n"
"             (jobs (list duckdns-job ...))))\n"
"         ...\n"
"         %base-services)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2291
msgid "To connect to a Wireguard VPN server you need the kernel module to be loaded in memory and a package providing networking tools that support it (e.g.  @code{wireguard-tools} or @code{network-manager})."
msgstr "Para se conectar a um servidor VPN Wireguard, você precisa que o módulo do kernel esteja carregado na memória e um pacote que forneça ferramentas de rede que o suportem (por exemplo, @code{wireguard-tools} ou @code{network-manager})."

#. type: Plain text
#: doc/guix-cookbook.texi:2295
msgid "Here is a configuration example for Linux-Libre < 5.6, where the module is out of tree and need to be loaded manually---following revisions of the kernel have it built-in and so don't need such configuration:"
msgstr "Aqui está um exemplo de configuração para Linux-Libre versão menor que 5.6, onde o módulo está fora da árvore e precisa ser carregado manualmente --- as seguintes revisões do kernel o possuem integrado e, portanto, não precisam de tal configuração:"

#. type: lisp
#: doc/guix-cookbook.texi:2300
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules desktop)\n"
"(use-package-modules vpn)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2309
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (services (cons (simple-service 'wireguard-module\n"
"                                  kernel-module-loader-service-type\n"
"                                  '(\"wireguard\"))\n"
"                  %desktop-services))\n"
"  (packages (cons wireguard-tools %base-packages))\n"
"  (kernel-loadable-modules (list wireguard-linux-compat)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2313
msgid "After reconfiguring and restarting your system you can either use Wireguard tools or NetworkManager to connect to a VPN server."
msgstr "Após reconfigurar e reiniciar seu sistema, você pode usar as ferramentas Wireguard ou NetworkManager para conectar-se a um servidor VPN."

#. type: subsection
#: doc/guix-cookbook.texi:2314
#, no-wrap
msgid "Using Wireguard tools"
msgstr "Usando ferramentas Wireguard"

#. type: Plain text
#: doc/guix-cookbook.texi:2320
msgid "To test your Wireguard setup it is convenient to use @command{wg-quick}.  Just give it a configuration file @command{wg-quick up ./wg0.conf}; or put that file in @file{/etc/wireguard} and run @command{wg-quick up wg0} instead."
msgstr "Para testar a configuração do Wireguard é conveniente usar @command{wg-quick}. Basta fornecer um arquivo de configuração @command{wg-quick up ./wg0.conf}; ou coloque esse arquivo em @file{/etc/wireguard} e execute @command{wg-quick up wg0}."

#. type: quotation
#: doc/guix-cookbook.texi:2324
msgid "Be warned that the author described this command as a: “[…] very quick and dirty bash script […]”."
msgstr "Esteja avisado que o autor descreveu este comando como um: “[…] script bash muito rápido e sujo […]”."

#. type: subsection
#: doc/guix-cookbook.texi:2326
#, no-wrap
msgid "Using NetworkManager"
msgstr "Usando o NetworkManager"

#. type: Plain text
#: doc/guix-cookbook.texi:2334
msgid "Thanks to NetworkManager support for Wireguard we can connect to our VPN using @command{nmcli} command.  Up to this point this guide assumes that you're using Network Manager service provided by @code{%desktop-services}.  Ortherwise you need to adjust your services list to load @code{network-manager-service-type} and reconfigure your Guix system."
msgstr "Graças ao suporte do NetworkManager para Wireguard, podemos conectar-nos à nossa VPN usando o comando @command{nmcli}. Até este ponto, este guia pressupõe que você esteja usando o serviço Network Manager fornecido por @code{%desktop-services}. Caso contrário, você precisará ajustar sua lista de serviços para carregar @code{network-manager-service-type} e reconfigurar seu sistema Guix."

#. type: Plain text
#: doc/guix-cookbook.texi:2336
msgid "To import your VPN configuration execute nmcli import command:"
msgstr "Para importar sua configuração VPN, execute o comando \"nmcli import\":"

#. type: example
#: doc/guix-cookbook.texi:2340
#, no-wrap
msgid ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"
msgstr ""
"# nmcli connection import type wireguard file wg0.conf\n"
"Connection 'wg0' (edbee261-aa5a-42db-b032-6c7757c60fde) successfully added\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2345
msgid "This will create a configuration file in @file{/etc/NetworkManager/wg0.nmconnection}.  Next connect to the Wireguard server:"
msgstr "Isso criará um arquivo de configuração em @file{/etc/NetworkManager/wg0.nmconnection}. Em seguida, conecte-se ao servidor Wireguard:"

#. type: example
#: doc/guix-cookbook.texi:2349
#, no-wrap
msgid ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"
msgstr ""
"$ nmcli connection up wg0\n"
"Connection successfully activated (D-Bus active path: /org/freedesktop/NetworkManager/ActiveConnection/6)\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2353
msgid "By default NetworkManager will connect automatically on system boot.  To change that behaviour you need to edit your config:"
msgstr "Por padrão, o NetworkManager se conectará automaticamente na inicialização do sistema. Para mudar esse comportamento você precisa editar sua configuração:"

#. type: example
#: doc/guix-cookbook.texi:2356
#, no-wrap
msgid "# nmcli connection modify wg0 connection.autoconnect no\n"
msgstr "# nmcli connection modify wg0 connection.autoconnect no\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2361
msgid "For more specific information about NetworkManager and wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/,see this post by thaller}."
msgstr "Para obter informações mais específicas sobre NetworkManager e wireguard @uref{https://blogs.gnome.org/thaller/2019/03/15/wireguard-in-networkmanager/, consulte este artigo}."

#. type: cindex
#: doc/guix-cookbook.texi:2364
#, no-wrap
msgid "wm"
msgstr "wm"

#. type: cindex
#: doc/guix-cookbook.texi:2373
#, no-wrap
msgid "stumpwm"
msgstr "stumpwm"

#. type: Plain text
#: doc/guix-cookbook.texi:2378
msgid "You could install StumpWM with a Guix system by adding @code{stumpwm} and optionally @code{`(,stumpwm \"lib\")} packages to a system configuration file, e.g.@: @file{/etc/config.scm}."
msgstr "Você pode instalar o StumpWM com um sistema Guix adicionando pacotes @code{stumpwm} e opcionalmente @code{`(,stumpwm \"lib\")} a um arquivo de configuração do sistema, por exemplo, @: @file{/etc/config.scm}."

#. type: Plain text
#: doc/guix-cookbook.texi:2380
msgid "An example configuration can look like this:"
msgstr "Um exemplo de configuração pode ser assim:"

#. type: lisp
#: doc/guix-cookbook.texi:2384
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules wm)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2389
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    %base-packages)))\n"

#. type: cindex
#: doc/guix-cookbook.texi:2391
#, no-wrap
msgid "stumpwm fonts"
msgstr "fontes stumpwm"

#. type: Plain text
#: doc/guix-cookbook.texi:2395
msgid "By default StumpWM uses X11 fonts, which could be small or pixelated on your system.  You could fix this by installing StumpWM contrib Lisp module @code{sbcl-ttf-fonts}, adding it to Guix system packages:"
msgstr "Por padrão, o StumpWM usa fontes X11, que podem ser pequenas ou pixeladas em seu sistema. Você pode corrigir isso instalando o módulo StumpWM contrib Lisp @code{sbcl-ttf-fonts}, adicionando-o aos pacotes do sistema Guix:"

#. type: lisp
#: doc/guix-cookbook.texi:2399
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-package-modules fonts wm)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2404
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"
msgstr ""
"(operating-system\n"
"  ;; …\n"
"  (packages (append (list sbcl stumpwm `(,stumpwm \"lib\"))\n"
"                    sbcl-ttf-fonts font-dejavu %base-packages)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2408
msgid "Then you need to add the following code to a StumpWM configuration file @file{~/.stumpwm.d/init.lisp}:"
msgstr "Então você precisa adicionar o seguinte código a um arquivo de configuração do StumpWM @file{~/.stumpwm.d/init.lisp}:"

#. type: lisp
#: doc/guix-cookbook.texi:2417
#, fuzzy, no-wrap
#| msgid ""
#| "(require :ttf-fonts)\n"
#| "(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
#| "(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\") \"/.fonts/font-cache.sexp\"))\n"
#| "(xft:cache-fonts)\n"
#| "(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\" :subfamily \"Book\" :size 11))\n"
msgid ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\")\n"
"                                                 \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\"\n"
"                                   :subfamily \"Book\" :size 11))\n"
msgstr ""
"(require :ttf-fonts)\n"
"(setf xft:*font-dirs* '(\"/run/current-system/profile/share/fonts/\"))\n"
"(setf clx-truetype:+font-cache-filename+ (concat (getenv \"HOME\") \"/.fonts/font-cache.sexp\"))\n"
"(xft:cache-fonts)\n"
"(set-font (make-instance 'xft:font :family \"DejaVu Sans Mono\" :subfamily \"Book\" :size 11))\n"

#. type: cindex
#: doc/guix-cookbook.texi:2421
#, no-wrap
msgid "sessionlock"
msgstr "bloqueio de sessão"

#. type: Plain text
#: doc/guix-cookbook.texi:2427
msgid "Depending on your environment, locking the screen of your session might come built in or it might be something you have to set up yourself. If you use a desktop environment like GNOME or KDE, it's usually built in. If you use a plain window manager like StumpWM or EXWM, you might have to set it up yourself."
msgstr "Dependendo do seu ambiente, o bloqueio da tela da sua sessão pode ser incorporado ou pode ser algo que você mesmo precisa configurar. Se você usa um ambiente de área de trabalho como GNOME ou KDE, ele geralmente está integrado. Se você usa um gerenciador de janelas simples como StumpWM ou EXWM, talvez seja necessário configurá-lo você mesmo."

#. type: Plain text
#: doc/guix-cookbook.texi:2439
msgid "If you use Xorg, you can use the utility @uref{https://www.mankier.com/1/xss-lock, xss-lock} to lock the screen of your session.  xss-lock is triggered by DPMS which since Xorg 1.8 is auto-detected and enabled if ACPI is also enabled at kernel runtime."
msgstr "Se você usa Xorg, você pode usar o utilitário @uref{https://www.mankier.com/1/xss-lock, xss-lock} para bloquear a tela da sua sessão. xss-lock é acionado pelo DPMS que, desde o Xorg 1.8, é detectado automaticamente e habilitado se o ACPI também estiver habilitado no tempo de execução do kernel."

#. type: Plain text
#: doc/guix-cookbook.texi:2442
msgid "To use xss-lock, you can simple execute it and put it into the background before you start your window manager from e.g. your @file{~/.xsession}:"
msgstr "Para usar o xss-lock, você pode simplesmente executá-lo e colocá-lo em segundo plano antes de iniciar o gerenciador de janelas, por exemplo. seu @file{~/.xsession}:"

#. type: example
#: doc/guix-cookbook.texi:2446
#, no-wrap
msgid ""
"xss-lock -- slock &\n"
"exec stumpwm\n"
msgstr ""
"xss-lock -- slock &\n"
"exec stumpwm\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2450
msgid "In this example, xss-lock uses @code{slock} to do the actual locking of the screen when it determines it's appropriate, like when you suspend your device."
msgstr "Neste exemplo, xss-lock usa @code{slock} para fazer o bloqueio real da tela quando determina que é apropriado, como quando você suspende seu dispositivo."

#. type: Plain text
#: doc/guix-cookbook.texi:2454
msgid "For slock to be allowed to be a screen locker for the graphical session, it needs to be made setuid-root so it can authenticate users, and it needs a PAM service. This can be achieved by adding the following service to your @file{config.scm}:"
msgstr "Para que o slock possa ser um bloqueador de tela para a sessão gráfica, ele precisa ser definido como setuid-root para poder autenticar usuários e precisa de um serviço PAM. Isso pode ser conseguido adicionando o seguinte serviço ao seu @file{config.scm}:"

#. type: lisp
#: doc/guix-cookbook.texi:2460
#, no-wrap
msgid ""
"(service screen-locker-services-type\n"
"         (screen-locker-configuration\n"
"          (name \"slock\")\n"
"          (program (file-append slock \"/bin/slock\"))))\n"
msgstr ""
"(service screen-locker-services-type\n"
"         (screen-locker-configuration\n"
"          (name \"slock\")\n"
"          (program (file-append slock \"/bin/slock\"))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2466
msgid "If you manually lock your screen, e.g. by directly calling slock when you want to lock your screen but not suspend it, it's a good idea to notify xss-lock about this so no confusion occurs. This can be done by executing @code{xset s activate} immediately before you execute slock."
msgstr "Se você bloquear sua tela manualmente, por exemplo, chamando slock diretamente quando quiser bloquear sua tela, mas não suspendê-la, é uma boa ideia notificar xss-lock sobre isso para que não ocorra confusão. Isso pode ser feito executando @code{xset s activate} imediatamente antes de executar o slock."

#. type: cindex
#: doc/guix-cookbook.texi:2469
#, no-wrap
msgid "linode, Linode"
msgstr "linode, Linode"

#. type: Plain text
#: doc/guix-cookbook.texi:2474
msgid "To run Guix on a server hosted by @uref{https://www.linode.com, Linode}, start with a recommended Debian server.  We recommend using the default distro as a way to bootstrap Guix. Create your SSH keys."
msgstr "Para executar o Guix num servidor hospedado por @uref{https://www.linode.com, Linode}, comece com um servidor Debian recomendado. Recomendamos usar a distribuição padrão como forma de inicializar o Guix. Crie suas chaves SSH."

#. type: example
#: doc/guix-cookbook.texi:2477
#, no-wrap
msgid "ssh-keygen\n"
msgstr "ssh-keygen\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2483
msgid "Be sure to add your SSH key for easy login to the remote server.  This is trivially done via Linode's graphical interface for adding SSH keys.  Go to your profile and click add SSH Key.  Copy into it the output of:"
msgstr "Certifique-se de adicionar sua chave SSH para facilitar o login no servidor remoto. Isto é feito trivialmente através da interface gráfica do Linode para adicionar chaves SSH. Vá para o seu perfil e clique em adicionar chave SSH. Copie nele a saída de:"

#. type: example
#: doc/guix-cookbook.texi:2486
#, no-wrap
msgid "cat ~/.ssh/<username>_rsa.pub\n"
msgstr "cat ~/.ssh/<username>_rsa.pub\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2489
msgid "Power the Linode down."
msgstr "Desligue o Linode."

#. type: Plain text
#: doc/guix-cookbook.texi:2493
msgid "In the Linode's Storage tab, resize the Debian disk to be smaller.  30 GB free space is recommended.  Then click \"Add a disk\", and fill out the form with the following:"
msgstr "Na aba Armazenamento do Linode, redimensione o disco Debian para ser menor. Recomenda-se 30 GB de espaço livre. Em seguida, clique em \"Adicionar um disco\" e preencha o formulário com o seguinte:"

#. type: itemize
#: doc/guix-cookbook.texi:2497
msgid "Label: \"Guix\""
msgstr "Label: \"Guix\""

#. type: itemize
#: doc/guix-cookbook.texi:2500
msgid "Filesystem: ext4"
msgstr "Filesystem: ext4"

#. type: itemize
#: doc/guix-cookbook.texi:2503
msgid "Set it to the remaining size"
msgstr "Defina-o para o tamanho restante"

#. type: Plain text
#: doc/guix-cookbook.texi:2508
msgid "In the Configurations tab, press \"Edit\" on the default Debian profile.  Under \"Block Device Assignment\" click \"Add a Device\". It should be @file{/dev/sdc} and you can select the \"Guix\" disk. Save Changes."
msgstr "Na aba Configurações, pressione “Editar” no perfil Debian padrão. Em \"Bloquear atribuição de dispositivo\", clique em \"Adicionar um dispositivo\". Deve ser @file{/dev/sdc} e você pode selecionar o disco \"Guix\". Salvar alterações."

#. type: Plain text
#: doc/guix-cookbook.texi:2510
msgid "Now \"Add a Configuration\", with the following:"
msgstr "Agora \"Adicionar uma configuração\", com o seguinte:"

#. type: itemize
#: doc/guix-cookbook.texi:2513
#, fuzzy
msgid "Label: Guix"
msgstr "Label: Guix"

#. type: itemize
#: doc/guix-cookbook.texi:2516
msgid "Kernel:GRUB 2 (it's at the bottom! This step is @b{IMPORTANT!})"
msgstr "Kernel:GRUB 2 (está na parte inferior! Esta etapa é @b{IMPORTANTE!})"

#. type: itemize
#: doc/guix-cookbook.texi:2519
msgid "Block device assignment:"
msgstr "Bloquear atribuição de dispositivo:"

#. type: itemize
#: doc/guix-cookbook.texi:2522
msgid "@file{/dev/sda}: Guix"
msgstr "@file{/dev/sda}: Guix"

#. type: itemize
#: doc/guix-cookbook.texi:2525
msgid "@file{/dev/sdb}: swap"
msgstr "@file{/dev/sdb}: swap"

#. type: itemize
#: doc/guix-cookbook.texi:2528
msgid "Root device: @file{/dev/sda}"
msgstr "Root device: @file{/dev/sda}"

#. type: itemize
#: doc/guix-cookbook.texi:2531
msgid "Turn off all the filesystem/boot helpers"
msgstr "Desligue todos os auxiliares de sistema de arquivos/inicialização"

#. type: Plain text
#: doc/guix-cookbook.texi:2538
msgid "Now power it back up, booting with the Debian configuration.  Once it's running, ssh to your server via @code{ssh root@@@var{<your-server-IP-here>}}. (You can find your server IP address in your Linode Summary section.) Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr "Agora ligue-o novamente, inicializando com a configuração do Debian. Quando estiver em execução, faça ssh para o seu servidor via @code{ssh root@@@var{<your-server-IP-here>}}. (Você pode encontrar o endereço IP do seu servidor na seção Resumo do Linode.) Agora você pode executar as etapas \"instalar o guix de @pxref{Instalação de binários,,, guix.pt_BR, GNU Guix}\":"

#. type: example
#: doc/guix-cookbook.texi:2546
#, no-wrap
msgid ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""
"sudo apt-get install gpg\n"
"wget https://sv.gnu.org/people/viewgpg.php?user_id=15145 -qO - | gpg --import -\n"
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2550
msgid "Now it's time to write out a config for the server.  The key information is below. Save the resulting file as @file{guix-config.scm}."
msgstr "Agora é hora de escrever uma configuração para o servidor. As principais informações estão abaixo. Salve o arquivo resultante como @file{guix-config.scm}."

#. type: lisp
#: doc/guix-cookbook.texi:2560
#, fuzzy, no-wrap
#| msgid ""
#| "(use-modules (gnu)\n"
#| "             (guix modules))\n"
#| "(use-service-modules networking\n"
#| "                     ssh)\n"
#| "(use-package-modules admin\n"
#| "                     certs\n"
#| "                     package-management\n"
#| "                     ssh\n"
#| "                     tls)\n"
#| "\n"
msgid ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"
msgstr ""
"(use-modules (gnu)\n"
"             (guix modules))\n"
"(use-service-modules networking\n"
"                     ssh)\n"
"(use-package-modules admin\n"
"                     certs\n"
"                     package-management\n"
"                     ssh\n"
"                     tls)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2577
#, fuzzy, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; This goofy code will generate the grub.cfg\n"
"  ;; without installing the grub bootloader on disk.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"
msgstr ""
"(operating-system\n"
"  (host-name \"my-server\")\n"
"  (timezone \"America/New_York\")\n"
"  (locale \"en_US.UTF-8\")\n"
"  ;; This goofy code will generate the grub.cfg\n"
"  ;; without installing the grub bootloader on disk.\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader\n"
"                (bootloader\n"
"                 (inherit grub-bootloader)\n"
"                 (installer #~(const #true))))))\n"
"  (file-systems (cons (file-system\n"
"                        (device \"/dev/sda\")\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2580
#, no-wrap
msgid ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"
msgstr ""
"  (swap-devices (list \"/dev/sdb\"))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2584
#, no-wrap
msgid ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Needed to find the disk\n"
"                        %base-initrd-modules))\n"
"\n"
msgstr ""
"  (initrd-modules (cons \"virtio_scsi\"    ; Needed to find the disk\n"
"                        %base-initrd-modules))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2593
#, fuzzy, no-wrap
msgid ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Adding the account to the \"wheel\" group\n"
"                ;; makes it a sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"
msgstr ""
"  (users (cons (user-account\n"
"                (name \"janedoe\")\n"
"                (group \"users\")\n"
"                ;; Adding the account to the \"wheel\" group\n"
"                ;; makes it a sudoer.\n"
"                (supplementary-groups '(\"wheel\"))\n"
"                (home-directory \"/home/janedoe\"))\n"
"               %base-user-accounts))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2596
#, fuzzy, no-wrap
#| msgid ""
#| "  (packages (cons* nss-certs            ;for HTTPS access\n"
#| "                   openssh-sans-x\n"
#| "                   %base-packages))\n"
#| "\n"
msgid ""
"  (packages (cons* openssh-sans-x\n"
"                   %base-packages))\n"
"\n"
msgstr ""
"  (packages (cons* nss-certs            ;for HTTPS access\n"
"                   openssh-sans-x\n"
"                   %base-packages))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2607
#, no-wrap
msgid ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"
msgstr ""
"  (services (cons*\n"
"             (service dhcp-client-service-type)\n"
"             (service openssh-service-type\n"
"                      (openssh-configuration\n"
"                       (openssh openssh-sans-x)\n"
"                       (password-authentication? #false)\n"
"                       (authorized-keys\n"
"                        `((\"janedoe\" ,(local-file \"janedoe_rsa.pub\"))\n"
"                          (\"root\" ,(local-file \"janedoe_rsa.pub\"))))))\n"
"             %base-services)))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2610
msgid "Replace the following fields in the above configuration:"
msgstr "Substitua os seguintes campos na configuração acima:"

#. type: lisp
#: doc/guix-cookbook.texi:2618
#, no-wrap
msgid ""
"(host-name \"my-server\")       ; replace with your server name\n"
"; if you chose a linode server outside the U.S., then\n"
"; use tzselect to find a correct timezone string\n"
"(timezone \"America/New_York\") ; if needed replace timezone\n"
"(name \"janedoe\")              ; replace with your username\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
msgstr ""
"(host-name \"my-server\")       ; replace with your server name\n"
"; if you chose a linode server outside the U.S., then\n"
"; use tzselect to find a correct timezone string\n"
"(timezone \"America/New_York\") ; if needed replace timezone\n"
"(name \"janedoe\")              ; replace with your username\n"
"(\"janedoe\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"
"(\"root\" ,(local-file \"janedoe_rsa.pub\")) ; replace with your ssh key\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2625
msgid "The last line in the above example lets you log into the server as root and set the initial root password (see the note at the end of this recipe about root login).  After you have done this, you may delete that line from your configuration and reconfigure to prevent root login."
msgstr "A última linha no exemplo acima permite que você faça login no servidor como root e defina a senha root inicial (veja a nota no final desta receita sobre login root). Depois de fazer isso, você pode excluir essa linha da sua configuração e reconfigurar para evitar o login root."

#. type: Plain text
#: doc/guix-cookbook.texi:2630
msgid "Copy your ssh public key (eg: @file{~/.ssh/id_rsa.pub}) as @file{@var{<your-username-here>}_rsa.pub} and put @file{guix-config.scm} in the same directory.  In a new terminal run these commands."
msgstr "Copie sua chave pública ssh (por exemplo: @file{~/.ssh/id_rsa.pub}) como @file{@var{<seu-nome-de-usuário-aqui>}_rsa.pub} e coloque @file{guix-config.scm } no mesmo diretório. Em um novo terminal execute estes comandos."

#. type: example
#: doc/guix-cookbook.texi:2635
#, no-wrap
msgid ""
"sftp root@@<remote server ip address>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"
msgstr ""
"sftp root@@<remote server ip address>\n"
"put /path/to/files/<username>_rsa.pub .\n"
"put /path/to/files/guix-config.scm .\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2638
msgid "In your first terminal, mount the guix drive:"
msgstr "No seu primeiro terminal, monte o drive guix:"

#. type: example
#: doc/guix-cookbook.texi:2642
#, no-wrap
msgid ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"
msgstr ""
"mkdir /mnt/guix\n"
"mount /dev/sdc /mnt/guix\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2647
msgid "Due to the way we set up the bootloader section of the guix-config.scm, only the grub configuration file will be installed.  So, we need to copy over some of the other GRUB stuff already installed on the Debian system:"
msgstr "Devido à forma como configuramos a seção bootloader do guix-config.scm, apenas o arquivo de configuração grub será instalado. Então, precisamos copiar algumas das outras coisas do GRUB já instaladas no sistema Debian:"

#. type: example
#: doc/guix-cookbook.texi:2651
#, no-wrap
msgid ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"
msgstr ""
"mkdir -p /mnt/guix/boot/grub\n"
"cp -r /boot/grub/* /mnt/guix/boot/grub/\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2654
msgid "Now initialize the Guix installation:"
msgstr "Agora inicialize a instalação do Guix:"

#. type: example
#: doc/guix-cookbook.texi:2657
#, no-wrap
msgid "guix system init guix-config.scm /mnt/guix\n"
msgstr "guix system init guix-config.scm /mnt/guix\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2661
msgid "Ok, power it down! Now from the Linode console, select boot and select \"Guix\"."
msgstr "Ok, desligue-o! Agora, no console Linode, selecione boot e selecione \"Guix\"."

#. type: Plain text
#: doc/guix-cookbook.texi:2664
msgid "Once it boots, you should be able to log in via SSH! (The server config will have changed though.)  You may encounter an error like:"
msgstr "Depois de inicializar, você poderá fazer login via SSH! (A configuração do servidor terá mudado.) Você pode encontrar um erro como:"

#. type: example
#: doc/guix-cookbook.texi:2680
#, no-wrap
msgid ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"
msgstr ""
"$ ssh root@@<server ip address>\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n"
"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n"
"IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n"
"Someone could be eavesdropping on you right now (man-in-the-middle attack)!\n"
"It is also possible that a host key has just been changed.\n"
"The fingerprint for the ECDSA key sent by the remote host is\n"
"SHA256:0B+wp33w57AnKQuHCvQP0+ZdKaqYrI/kyU7CfVbS7R4.\n"
"Please contact your system administrator.\n"
"Add correct host key in /home/joshua/.ssh/known_hosts to get rid of this message.\n"
"Offending ECDSA key in /home/joshua/.ssh/known_hosts:3\n"
"ECDSA host key for 198.58.98.76 has changed and you have requested strict checking.\n"
"Host key verification failed.\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2684
msgid "Either delete @file{~/.ssh/known_hosts} file, or delete the offending line starting with your server IP address."
msgstr "Exclua o arquivo @file{~/.ssh/known_hosts} ou exclua a linha incorreta começando com o endereço IP do seu servidor."

#. type: Plain text
#: doc/guix-cookbook.texi:2686
msgid "Be sure to set your password and root's password."
msgstr "Certifique-se de definir sua senha e a senha do root."

#. type: example
#: doc/guix-cookbook.texi:2691
#, no-wrap
msgid ""
"ssh root@@<remote ip address>\n"
"passwd  ; for the root password\n"
"passwd <username> ; for the user password\n"
msgstr ""
"ssh root@@<endereço IP remoto>\n"
"passwd; para a senha root\n"
"passwd <nome de usuário>; para a senha do usuário\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2698
msgid "You may not be able to run the above commands at this point.  If you have issues remotely logging into your linode box via SSH, then you may still need to set your root and user password initially by clicking on the ``Launch Console'' option in your linode.  Choose the ``Glish'' instead of ``Weblish''.  Now you should be able to ssh into the machine."
msgstr "Talvez você não consiga executar os comandos acima neste momento. Se você tiver problemas para fazer login remotamente em sua caixa linode via SSH, então você ainda pode precisar definir sua senha root e de usuário inicialmente clicando na opção ``Launch Console'' em seu linode. Escolha ``Glish'' em vez de ``Weblish''. Agora você deve conseguir fazer o ssh na máquina."

#. type: Plain text
#: doc/guix-cookbook.texi:2702
msgid "Hooray! At this point you can shut down the server, delete the Debian disk, and resize the Guix to the rest of the size.  Congratulations!"
msgstr "Viva! Neste ponto você pode desligar o servidor, excluir o disco Debian e redimensionar o Guix para o restante do tamanho. Parabéns!"

#. type: Plain text
#: doc/guix-cookbook.texi:2707
msgid "By the way, if you save it as a disk image right at this point, you'll have an easy time spinning up new Guix images! You may need to down-size the Guix image to 6144MB, to save it as an image.  Then you can resize it again to the max size."
msgstr "A propósito, se você salvá-lo como uma imagem de disco neste momento, será fácil criar novas imagens Guix! Pode ser necessário reduzir o tamanho da imagem Guix para 6144 MB para salvá-la como uma imagem. Então você pode redimensioná-lo novamente para o tamanho máximo."

#. type: cindex
#: doc/guix-cookbook.texi:2710
#, no-wrap
msgid "kimsufi, Kimsufi, OVH"
msgstr "kimsufi, Kimsufi, OVH"

#. type: Plain text
#: doc/guix-cookbook.texi:2714
msgid "To run Guix on a server hosted by @uref{https://www.kimsufi.com/, Kimsufi}, click on the netboot tab then select rescue64-pro and restart."
msgstr "Para executar o Guix em um servidor hospedado por @uref{https://www.kimsufi.com/, Kimsufi}, clique na guia netboot, selecione Rescue64-pro e reinicie."

#. type: Plain text
#: doc/guix-cookbook.texi:2716
msgid "OVH will email you the credentials required to ssh into a Debian system."
msgstr "A OVH enviar-lhe-á por e-mail as credenciais necessárias para efetuar o ssh num sistema Debian."

#. type: Plain text
#: doc/guix-cookbook.texi:2719
msgid "Now you can run the \"install guix from @pxref{Binary Installation,,, guix, GNU Guix}\" steps:"
msgstr "Agora você pode executar as etapas \"instalar guix de @pxref{Instalação de binários,,, guix.pt_BR, GNU Guix}\":"

#. type: example
#: doc/guix-cookbook.texi:2725
#, no-wrap
msgid ""
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"
msgstr ""
"wget https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n"
"chmod +x guix-install.sh\n"
"./guix-install.sh\n"
"guix pull\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2728
msgid "Partition the drives and format them, first stop the raid array:"
msgstr "Particione as unidades e formate-as, primeiro interrompa a matriz raid:"

#. type: example
#: doc/guix-cookbook.texi:2732
#, no-wrap
msgid ""
"mdadm --stop /dev/md127\n"
"mdadm --zero-superblock /dev/sda2 /dev/sdb2\n"
msgstr ""
"mdadm --stop /dev/md127\n"
"mdadm --zero-superblock /dev/sda2 /dev/sdb2\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2736
msgid "Then wipe the disks and set up the partitions, we will create a RAID 1 array."
msgstr "Em seguida, limpe os discos e configure as partições, criaremos uma matriz RAID 1."

#. type: example
#: doc/guix-cookbook.texi:2740
#, no-wrap
msgid ""
"wipefs -a /dev/sda\n"
"wipefs -a /dev/sdb\n"
"\n"
msgstr ""
"wipefs -a /dev/sda\n"
"wipefs -a /dev/sdb\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:2749
#, no-wrap
msgid ""
"parted /dev/sda --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart bios_grub 1049kb 512MiB \\\n"
" set 1 bios_grub on\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart primary 512MiB -512MiB\n"
" set 2 raid on\n"
"parted /dev/sda --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
"\n"
msgstr ""
"parted /dev/sda --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart bios_grub 1049kb 512MiB \\\n"
" set 1 bios_grub on\n"
"parted /dev/sda --align=opt -s -m -- \\\n"
" mkpart primary 512MiB -512MiB\n"
" set 2 raid on\n"
"parted /dev/sda --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:2758
#, no-wrap
msgid ""
"parted /dev/sdb --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart bios_grub 1049kb 512MiB \\\n"
"     set 1 bios_grub on\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart primary 512MiB -512MiB \\\n"
"     set 2 raid on\n"
"parted /dev/sdb --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"
msgstr ""
"parted /dev/sdb --align=opt -s -m -- mklabel gpt\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart bios_grub 1049kb 512MiB \\\n"
"     set 1 bios_grub on\n"
"parted /dev/sdb --align=opt -s -m -- \\\n"
"     mkpart primary 512MiB -512MiB \\\n"
"     set 2 raid on\n"
"parted /dev/sdb --align=opt -s -m -- mkpart primary linux-swap 512MiB 100%\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2761
msgid "Create the array:"
msgstr "Crie a matriz:"

#. type: example
#: doc/guix-cookbook.texi:2765
#, no-wrap
msgid ""
"mdadm --create /dev/md127 --level=1 --raid-disks=2 \\\n"
"  --metadata=0.90 /dev/sda2 /dev/sdb2\n"
msgstr ""
"mdadm --create /dev/md127 --level=1 --raid-disks=2 \\\n"
"  --metadata=0.90 /dev/sda2 /dev/sdb2\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2769
msgid "Now create file systems on the relevant partitions, first the boot partitions:"
msgstr "Agora crie sistemas de arquivos nas partições relevantes, primeiro as partições de inicialização:"

#. type: example
#: doc/guix-cookbook.texi:2773
#, no-wrap
msgid ""
"mkfs.ext4  /dev/sda1\n"
"mkfs.ext4  /dev/sdb1\n"
msgstr ""
"mkfs.ext4  /dev/sda1\n"
"mkfs.ext4  /dev/sdb1\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2776
msgid "Then the root partition:"
msgstr "Então a partição raiz:"

#. type: example
#: doc/guix-cookbook.texi:2779
#, no-wrap
msgid "mkfs.ext4 /dev/md127\n"
msgstr "mkfs.ext4 /dev/md127\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2782
msgid "Initialize the swap partitions:"
msgstr "Inicialize as partições swap:"

#. type: example
#: doc/guix-cookbook.texi:2788
#, no-wrap
msgid ""
"mkswap /dev/sda3\n"
"swapon /dev/sda3\n"
"mkswap /dev/sdb3\n"
"swapon /dev/sdb3\n"
msgstr ""
"mkswap /dev/sda3\n"
"swapon /dev/sda3\n"
"mkswap /dev/sdb3\n"
"swapon /dev/sdb3\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2791
msgid "Mount the guix drive:"
msgstr "Monte a unidade guix:"

#. type: example
#: doc/guix-cookbook.texi:2795
#, no-wrap
msgid ""
"mkdir /mnt/guix\n"
"mount /dev/md127 /mnt/guix\n"
msgstr ""
"mkdir /mnt/guix\n"
"mount /dev/md127 /mnt/guix\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2799
msgid "Now is time to write an operating system declaration @file{os.scm} file; here is a sample:"
msgstr "Agora é hora de escrever um arquivo @file{os.scm} de declaração do sistema operacional; aqui está uma amostra:"

#. type: lisp
#: doc/guix-cookbook.texi:2804
#, fuzzy, no-wrap
#| msgid ""
#| "(use-modules (gnu) (guix))\n"
#| "(use-service-modules networking ssh vpn virtualization sysctl admin mcron)\n"
#| "(use-package-modules ssh certs tls tmux vpn virtualization)\n"
#| "\n"
msgid ""
"(use-modules (gnu) (guix))\n"
"(use-service-modules networking ssh vpn virtualization sysctl admin mcron)\n"
"(use-package-modules ssh tls tmux vpn virtualization)\n"
"\n"
msgstr ""
"(use-modules (gnu) (guix))\n"
"(use-service-modules networking ssh vpn virtualization sysctl admin mcron)\n"
"(use-package-modules ssh certs tls tmux vpn virtualization)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2807
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"kimsufi\")\n"
"\n"
msgstr ""
"(operating-system\n"
"  (host-name \"kimsufi\")\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2812
#, no-wrap
msgid ""
"  (bootloader (bootloader-configuration\n"
"\t       (bootloader grub-bootloader)\n"
"\t       (targets (list \"/dev/sda\" \"/dev/sdb\"))\n"
"\t       (terminal-outputs '(console))))\n"
"\n"
msgstr ""
"  (bootloader (bootloader-configuration\n"
"\t       (bootloader grub-bootloader)\n"
"\t       (targets (list \"/dev/sda\" \"/dev/sdb\"))\n"
"\t       (terminal-outputs '(console))))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2815
#, fuzzy, no-wrap
msgid ""
"  ;; Add a kernel module for RAID-1 (aka. \"mirror\").\n"
"  (initrd-modules (cons* \"raid1\"  %base-initrd-modules))\n"
"\n"
msgstr ""
"  ;; Add a kernel module for RAID-1 (aka. \"mirror\").\n"
"  (initrd-modules (cons* \"raid1\"  %base-initrd-modules))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2821
#, no-wrap
msgid ""
"  (mapped-devices\n"
"   (list (mapped-device\n"
"          (source (list \"/dev/sda2\" \"/dev/sdb2\"))\n"
"          (target \"/dev/md127\")\n"
"          (type raid-device-mapping))))\n"
"\n"
msgstr ""
"  (mapped-devices\n"
"   (list (mapped-device\n"
"          (source (list \"/dev/sda2\" \"/dev/sdb2\"))\n"
"          (target \"/dev/md127\")\n"
"          (type raid-device-mapping))))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2827
#, no-wrap
msgid ""
"  (swap-devices\n"
"   (list (swap-space\n"
"          (target \"/dev/sda3\"))\n"
"         (swap-space\n"
"          (target \"/dev/sdb3\"))))\n"
"\n"
msgstr ""
"  (swap-devices\n"
"   (list (swap-space\n"
"          (target \"/dev/sda3\"))\n"
"         (swap-space\n"
"          (target \"/dev/sdb3\"))))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2832
#, fuzzy, no-wrap
msgid ""
"  (issue\n"
"   ;; Default contents for /etc/issue.\n"
"   \"\\\n"
"This is the GNU system at Kimsufi.  Welcome.\\n\")\n"
"\n"
msgstr ""
"  (issue\n"
"   ;; Default contents for /etc/issue.\n"
"   \"\\\n"
"This is the GNU system at Kimsufi.  Welcome.\\n\")\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2839
#, no-wrap
msgid ""
"  (file-systems (cons* (file-system\n"
"\t\t         (mount-point \"/\")\n"
"\t\t         (device \"/dev/md127\")\n"
"\t\t         (type \"ext4\")\n"
"\t\t         (dependencies mapped-devices))\n"
"\t\t       %base-file-systems))\n"
"\n"
msgstr ""
"  (file-systems (cons* (file-system\n"
"\t\t         (mount-point \"/\")\n"
"\t\t         (device \"/dev/md127\")\n"
"\t\t         (type \"ext4\")\n"
"\t\t         (dependencies mapped-devices))\n"
"\t\t       %base-file-systems))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2847
#, no-wrap
msgid ""
"  (users (cons (user-account\n"
"\t        (name \"guix\")\n"
"\t        (comment \"guix\")\n"
"\t        (group \"users\")\n"
"\t        (supplementary-groups '(\"wheel\"))\n"
"\t        (home-directory \"/home/guix\"))\n"
"\t       %base-user-accounts))\n"
"\n"
msgstr ""
"  (users (cons (user-account\n"
"\t        (name \"guix\")\n"
"\t        (comment \"guix\")\n"
"\t        (group \"users\")\n"
"\t        (supplementary-groups '(\"wheel\"))\n"
"\t        (home-directory \"/home/guix\"))\n"
"\t       %base-user-accounts))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2853
#, no-wrap
msgid ""
"  (sudoers-file\n"
"   (plain-file \"sudoers\" \"\\\n"
"root ALL=(ALL) ALL\n"
"%wheel ALL=(ALL) ALL\n"
"guix ALL=(ALL) NOPASSWD:ALL\\n\"))\n"
"\n"
msgstr ""
"  (sudoers-file\n"
"   (plain-file \"sudoers\" \"\\\n"
"root ALL=(ALL) ALL\n"
"%wheel ALL=(ALL) ALL\n"
"guix ALL=(ALL) NOPASSWD:ALL\\n\"))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2867
#, fuzzy, no-wrap
msgid ""
"  ;; Globally-installed packages.\n"
"  (packages (cons* tmux gnutls wireguard-tools %base-packages))\n"
"  (services\n"
"   (cons*\n"
"    (service static-networking-service-type\n"
"\t     (list (static-networking\n"
"\t\t    (addresses (list (network-address\n"
"\t\t\t\t      (device \"enp3s0\")\n"
"\t\t\t\t      (value \"@var{server-ip-address}/24\"))))\n"
"\t\t    (routes (list (network-route\n"
"\t\t\t\t   (destination \"default\")\n"
"\t\t\t\t   (gateway \"@var{server-gateway}\"))))\n"
"\t\t    (name-servers '(\"213.186.33.99\")))))\n"
"\n"
msgstr ""
"  ;; Globally-installed packages.\n"
"  (packages (cons* tmux nss-certs gnutls wireguard-tools %base-packages))\n"
"  (services\n"
"   (cons*\n"
"    (service static-networking-service-type\n"
"\t     (list (static-networking\n"
"\t\t    (addresses (list (network-address\n"
"\t\t\t\t      (device \"enp3s0\")\n"
"\t\t\t\t      (value \"@var{server-ip-address}/24\"))))\n"
"\t\t    (routes (list (network-route\n"
"\t\t\t\t   (destination \"default\")\n"
"\t\t\t\t   (gateway \"@var{server-gateway}\"))))\n"
"\t\t    (name-servers '(\"213.186.33.99\")))))\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2869
#, no-wrap
msgid ""
"    (service unattended-upgrade-service-type)\n"
"\n"
msgstr ""
"    (service unattended-upgrade-service-type)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2884
#, no-wrap
msgid ""
"    (service openssh-service-type\n"
"\t     (openssh-configuration\n"
"\t      (openssh openssh-sans-x)\n"
"\t      (permit-root-login #f)\n"
"\t      (authorized-keys\n"
"\t       `((\"guix\" ,(plain-file \"@var{ssh-key-name.pub}\"\n"
"                                      \"@var{ssh-public-key-content}\"))))))\n"
"    (modify-services %base-services\n"
"      (sysctl-service-type\n"
"       config =>\n"
"       (sysctl-configuration\n"
"\t(settings (append '((\"net.ipv6.conf.all.autoconf\" . \"0\")\n"
"\t\t\t    (\"net.ipv6.conf.all.accept_ra\" . \"0\"))\n"
"\t\t\t  %default-sysctl-settings))))))))\n"
msgstr ""
"    (service openssh-service-type\n"
"\t     (openssh-configuration\n"
"\t      (openssh openssh-sans-x)\n"
"\t      (permit-root-login #f)\n"
"\t      (authorized-keys\n"
"\t       `((\"guix\" ,(plain-file \"@var{ssh-key-name.pub}\"\n"
"                                      \"@var{ssh-public-key-content}\"))))))\n"
"    (modify-services %base-services\n"
"      (sysctl-service-type\n"
"       config =>\n"
"       (sysctl-configuration\n"
"\t(settings (append '((\"net.ipv6.conf.all.autoconf\" . \"0\")\n"
"\t\t\t    (\"net.ipv6.conf.all.accept_ra\" . \"0\"))\n"
"\t\t\t  %default-sysctl-settings))))))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2889
msgid "Don't forget to substitute the @var{server-ip-address}, @var{server-gateway}, @var{ssh-key-name} and @var{ssh-public-key-content} variables with your own values."
msgstr "Não se esqueça de substituir as variáveis @var{server-ip-address}, @var{server-gateway}, @var{ssh-key-name} e @var{ssh-public-key-content} pelos seus próprias valores."

#. type: Plain text
#: doc/guix-cookbook.texi:2893
msgid "The gateway is the last usable IP in your block so if you have a server with an IP of @samp{37.187.79.10} then its gateway will be @samp{37.187.79.254}."
msgstr "O gateway é o último IP utilizável em seu bloco, portanto, se você tiver um servidor com IP @samp{37.187.79.10}, seu gateway será @samp{37.187.79.254}."

#. type: Plain text
#: doc/guix-cookbook.texi:2896
msgid "Transfer your operating system declaration @file{os.scm} file on the server via the @command{scp} or @command{sftp} commands."
msgstr "Transfira o arquivo de declaração do sistema operacional @file{os.scm} para o servidor por meio dos comandos @command{scp} ou @command{sftp}."

#. type: Plain text
#: doc/guix-cookbook.texi:2899
msgid "Now all that is left is to install Guix with a @code{guix system init} and restart."
msgstr "Agora só falta instalar o Guix com @code{guix system init} e reiniciar."

#. type: Plain text
#: doc/guix-cookbook.texi:2904
msgid "However we first need to set up a chroot, because the root partition of the rescue system is mounted on an aufs partition and if you try to install Guix it will fail at the GRUB install step complaining about the canonical path of \"aufs\"."
msgstr "No entanto, primeiro precisamos configurar um chroot, porque a partição raiz do sistema de recuperação é montada em uma partição aufs e se você tentar instalar o Guix ele falhará na etapa de instalação do GRUB reclamando do caminho canônico de \"aufs\"."

#. type: Plain text
#: doc/guix-cookbook.texi:2906
msgid "Install packages that will be used in the chroot:"
msgstr "Instale os pacotes que serão usados no chroot:"

#. type: example
#: doc/guix-cookbook.texi:2909
#, no-wrap
msgid "guix install bash-static parted util-linux-with-udev coreutils guix\n"
msgstr "guix install bash-static parted util-linux-with-udev coreutils guix\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2912
msgid "Then run the following to create directories needed for the chroot:"
msgstr "Em seguida, execute o seguinte para criar os diretórios necessários para o chroot:"

#. type: example
#: doc/guix-cookbook.texi:2917
#, no-wrap
msgid ""
"cd /mnt && \\\n"
"mkdir -p bin etc gnu/store root/.guix-profile/ root/.config/guix/current \\\n"
"  var/guix proc sys dev\n"
msgstr ""
"cd /mnt && \\\n"
"mkdir -p bin etc gnu/store root/.guix-profile/ root/.config/guix/current \\\n"
"  var/guix proc sys dev\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2920
msgid "Copy the host resolv.conf in the chroot:"
msgstr "Copie o host resolv.conf no chroot:"

#. type: example
#: doc/guix-cookbook.texi:2923
#, no-wrap
msgid "cp /etc/resolv.conf etc/\n"
msgstr "cp /etc/resolv.conf etc/\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2926
msgid "Mount block devices, the store and its database and the current guix config:"
msgstr "Monte os dispositivos de bloco, a loja e seu banco de dados e a configuração atual do guix:"

#. type: example
#: doc/guix-cookbook.texi:2936
#, no-wrap
msgid ""
"mount --rbind /proc /mnt/proc\n"
"mount --rbind /sys /mnt/sys\n"
"mount --rbind /dev /mnt/dev\n"
"mount --rbind /var/guix/ var/guix/\n"
"mount --rbind /gnu/store gnu/store/\n"
"mount --rbind /root/.config/ root/.config/\n"
"mount --rbind /root/.guix-profile/bin/ bin\n"
"mount --rbind /root/.guix-profile root/.guix-profile/\n"
msgstr ""
"mount --rbind /proc /mnt/proc\n"
"mount --rbind /sys /mnt/sys\n"
"mount --rbind /dev /mnt/dev\n"
"mount --rbind /var/guix/ var/guix/\n"
"mount --rbind /gnu/store gnu/store/\n"
"mount --rbind /root/.config/ root/.config/\n"
"mount --rbind /root/.guix-profile/bin/ bin\n"
"mount --rbind /root/.guix-profile root/.guix-profile/\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2939
msgid "Chroot in /mnt and install the system:"
msgstr "Faça chroot em /mnt e instale o sistema:"

#. type: example
#: doc/guix-cookbook.texi:2942
#, no-wrap
msgid ""
"chroot /mnt/ /bin/bash\n"
"\n"
msgstr ""
"chroot /mnt/ /bin/bash\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:2944
#, no-wrap
msgid "guix system init /root/os.scm /guix\n"
msgstr "guix system init /root/os.scm /guix\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2948
msgid "Finally, from the web user interface (UI), change @samp{netboot} to @samp{boot to disk} and restart (also from the web UI)."
msgstr "Por fim, na interface do usuário (IU) da web, altere @samp{netboot} para @samp{boot to disk} e reinicie (também na IU da web)."

#. type: Plain text
#: doc/guix-cookbook.texi:2951
msgid "Wait a few minutes and try to ssh with @code{ssh guix@@@var{server-ip-address>} -i @var{path-to-your-ssh-key}}"
msgstr "Aguarde alguns minutos e tente fazer ssh com @code{ssh guix@@@var{endereço IP do servidor>} -i @var{caminho para sua chave ssh}}"

#. type: Plain text
#: doc/guix-cookbook.texi:2954
msgid "You should have a Guix system up and running on Kimsufi; congratulations!"
msgstr "Você deve ter um sistema Guix instalado e funcionando no Kimsufi; Parabéns!"

#. type: Plain text
#: doc/guix-cookbook.texi:2963
msgid "To bind mount a file system, one must first set up some definitions before the @code{operating-system} section of the system definition.  In this example we will bind mount a folder from a spinning disk drive to @file{/tmp}, to save wear and tear on the primary SSD, without dedicating an entire partition to be mounted as @file{/tmp}."
msgstr "Para vincular a montagem de um sistema de arquivos, é necessário primeiro configurar algumas definições antes da seção @code{operating-system} da definição do sistema. Neste exemplo, vincularemos a montagem de uma pasta de uma unidade de disco rígido a @file{/tmp}, para evitar desgaste no SSD primário, sem dedicar uma partição inteira para ser montada como @file{/tmp}."

#. type: Plain text
#: doc/guix-cookbook.texi:2966
msgid "First, the source drive that hosts the folder we wish to bind mount should be defined, so that the bind mount can depend on it."
msgstr "Primeiro, a unidade de origem que hospeda a pasta que desejamos vincular a montagem deve ser definida, para que a montagem de ligação possa depender dela."

#. type: lisp
#: doc/guix-cookbook.texi:2973
#, fuzzy, no-wrap
msgid ""
"(define source-drive ;; \"source-drive\" can be named anything you want.\n"
"   (file-system\n"
"    (device (uuid \"UUID goes here\"))\n"
"    (mount-point \"/path-to-spinning-disk-goes-here\")\n"
"    (type \"ext4\"))) ;Make sure to set this to the appropriate type for your drive.\n"
msgstr ""
"(define source-drive ;; \"source-drive\" can be named anything you want.\n"
"   (file-system\n"
"    (device (uuid \"UUID goes here\"))\n"
"    (mount-point \"/path-to-spinning-disk-goes-here\")\n"
"    (type \"ext4\"))) ;; Make sure to set this to the appropriate type for your drive.\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2977
msgid "The source folder must also be defined, so that guix will know it's not a regular block device, but a folder."
msgstr "A pasta de origem também deve ser definida, para que o guix saiba que não é um dispositivo de bloco normal, mas uma pasta."

#. type: lisp
#: doc/guix-cookbook.texi:2980
#, no-wrap
msgid ""
";; \"source-directory\" can be named any valid variable name.\n"
"(define (%source-directory) \"/path-to-spinning-disk-goes-here/tmp\")\n"
msgstr ""
";; \"%source-directory\" pode receber qualquer nome de variável válido.\n"
"(define (%source-directory) \"/caminho_para_ o_disco_vai_aqui/tmp\")\n"

#. type: Plain text
#: doc/guix-cookbook.texi:2984
msgid "Finally, inside the @code{file-systems} definition, we must add the mount itself."
msgstr "Finalmente, dentro da definição @code{file-systems}, devemos adicionar a própria montagem."

#. type: lisp
#: doc/guix-cookbook.texi:2987
#, no-wrap
msgid ""
"(file-systems (cons*\n"
"\n"
msgstr ""
"(file-systems (cons*\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2989
#, no-wrap
msgid ""
"                ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""
"                ...<other drives omitted for clarity>...\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:2992
#, no-wrap
msgid ""
"                ;; Must match the name you gave the source drive in the earlier definition.\n"
"                source-drive\n"
"\n"
msgstr ""
"                ;; Deve corresponder ao nome que você deu à unidade de origem\n"
"                ;; na definição anterior.\n"
"                source-drive\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:3003
#, fuzzy, no-wrap
msgid ""
"                (file-system\n"
"                 ;; Make sure \"source-directory\" matches your earlier definition.\n"
"                 (device (%source-directory))\n"
"                 (mount-point \"/tmp\")\n"
"                 ;; We are mounting a folder, not a partition, so this type needs to be \"none\"\n"
"                 (type \"none\")\n"
"                 (flags '(bind-mount))\n"
"                 ;; Ensure \"source-drive\" matches what you've named the variable for the drive.\n"
"                 (dependencies (list source-drive))\n"
"                 )\n"
"\n"
msgstr ""
"                (file-system\n"
"                 (device (%source-directory)) ;; Make sure \"source-directory\" matches your earlier definition.\n"
"                 (mount-point \"/tmp\")\n"
"                 (type \"none\") ;; We are mounting a folder, not a partition, so this type needs to be \"none\"\n"
"                 (flags '(bind-mount))\n"
"                 (dependencies (list source-drive)) ;; Ensure \"source-drive\" matches what you've named the variable for the drive.\n"
"                 )\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:3005
#, no-wrap
msgid ""
"                 ...<other drives omitted for clarity>...\n"
"\n"
msgstr ""
"                 ...<outras unidades omitidas para maior clareza>...\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:3007
#, no-wrap
msgid "                ))\n"
msgstr "                ))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:3014
msgid "Guix daemon can use a HTTP proxy to get substitutes, here we are configuring it to get them via Tor."
msgstr "O daemon Guix pode usar um proxy HTTP para obter substitutos, aqui estamos configurando-o para obtê-los via Tor."

#. type: quotation
#: doc/guix-cookbook.texi:3015
#, no-wrap
msgid "Warning"
msgstr "Aviso"

#. type: quotation
#: doc/guix-cookbook.texi:3021
msgid "@emph{Not all} Guix daemon's traffic will go through Tor! Only HTTP/HTTPS will get proxied; FTP, Git protocol, SSH, etc connections will still go through the clearnet.  Again, this configuration isn't foolproof some of your traffic won't get routed by Tor at all.  Use it at your own risk."
msgstr "@emph{Nem todo} o tráfego do daemon Guix passará pelo Tor! Somente HTTP/HTTPS será encaminhado ao proxy; As conexões FTP, o protocolo Git, SSH, etc. ainda passarão pela rede aberta. Novamente, esta configuração não é infalível, pois parte do seu tráfego não será roteado pelo Tor. Use-o por sua conta e risco."

#. type: quotation
#: doc/guix-cookbook.texi:3027
msgid "Also note that the procedure described here applies only to package substitution. When you update your guix distribution with @command{guix pull}, you still need to use @command{torsocks} if you want to route the connection to guix's git repository servers through Tor."
msgstr "Observe também que o procedimento descrito aqui se aplica apenas à substituição de pacotes. Ao atualizar sua distribuição guix com @command{guix pull}, você ainda precisará usar @command{torsocks} se quiser rotear a conexão para os servidores de repositório git do guix através do Tor."

#. type: Plain text
#: doc/guix-cookbook.texi:3032
msgid "Guix's substitute server is available as a Onion service, if you want to use it to get your substitutes through Tor configure your system as follow:"
msgstr "O servidor substituto do Guix está disponível como um serviço Onion, se você quiser usá-lo para obter seus substitutos através do Tor, configure seu sistema da seguinte forma:"

#. type: lisp
#: doc/guix-cookbook.texi:3036
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-module base networking)\n"
"\n"

#. type: lisp
#: doc/guix-cookbook.texi:3053
#, fuzzy, no-wrap
#| msgid ""
#| "(operating-system\n"
#| "  …\n"
#| "  (services\n"
#| "    (cons\n"
#| "      (service tor-service-type\n"
#| "              (tor-configuration\n"
#| "                (config-file (plain-file \"tor-config\"\n"
#| "                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
#| "      (modify-services %base-services\n"
#| "        (guix-service-type\n"
#| "          config => (guix-configuration\n"
#| "                      (inherit config)\n"
#| "                      ;; ci.guix.gnu.org's Onion service\n"
#| "                      (substitute-urls\n"
#| "                       \"@value{SUBSTITUTE-TOR-URL}\")\n"
#| "                      (http-proxy \"http://localhost:9250\")))))))\n"
msgid ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; ci.guix.gnu.org's Onion service\n"
"                      (substitute-urls \"\\\n"
"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"
msgstr ""
"(operating-system\n"
"  …\n"
"  (services\n"
"    (cons\n"
"      (service tor-service-type\n"
"              (tor-configuration\n"
"                (config-file (plain-file \"tor-config\"\n"
"                                         \"HTTPTunnelPort 127.0.0.1:9250\"))))\n"
"      (modify-services %base-services\n"
"        (guix-service-type\n"
"          config => (guix-configuration\n"
"                      (inherit config)\n"
"                      ;; ci.guix.gnu.org's Onion service\n"
"                      (substitute-urls\n"
"                       \"@value{SUBSTITUTE-TOR-URL}\")\n"
"                      (http-proxy \"http://localhost:9250\")))))))\n"

#. type: Plain text
#: doc/guix-cookbook.texi:3062
msgid "This will keep a tor process running that provides a HTTP CONNECT tunnel which will be used by @command{guix-daemon}.  The daemon can use other protocols than HTTP(S) to get remote resources, request using those protocols won't go through Tor since we are only setting a HTTP tunnel here.  Note that @code{substitutes-urls} is using HTTPS and not HTTP or it won't work, that's a limitation of Tor's tunnel; you may want to use @command{privoxy} instead to avoid such limitations."
msgstr "Isso manterá um processo tor em execução que fornece um túnel HTTP CONNECT que será usado por @command{guix-daemon}. O daemon pode usar outros protocolos além do HTTP(S) para obter recursos remotos. A solicitação usando esses protocolos não passará pelo Tor, pois estamos apenas configurando um túnel HTTP aqui. Observe que @code{substitutes-urls} está usando HTTPS e não HTTP ou não funcionará, isso é uma limitação do túnel do Tor; você pode querer usar @command{privoxy} para evitar tais limitações."

#. type: Plain text
#: doc/guix-cookbook.texi:3066
msgid "If you don't want to always get substitutes through Tor but using it just some of the times, then skip the @code{guix-configuration}.  When you want to get a substitute from the Tor tunnel run:"
msgstr "Se você não deseja sempre obter substitutos através do Tor, mas usá-lo apenas algumas vezes, pule o @code{guix-configuration}. Quando você deseja obter um substituto da execução do túnel Tor:"

#. type: example
#: doc/guix-cookbook.texi:3071
#, no-wrap
msgid ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"
msgstr ""
"sudo herd set-http-proxy guix-daemon http://localhost:9250\n"
"guix build \\\n"
"  --substitute-urls=@value{SUBSTITUTE-TOR-URL} @dots{}\n"

#. type: cindex
#: doc/guix-cookbook.texi:3075
#, no-wrap
msgid "nginx, lua, openresty, resty"
msgstr "nginx, lua, openresty, resty"

#. type: Plain text
#: doc/guix-cookbook.texi:3078
msgid "NGINX could be extended with Lua scripts."
msgstr "O NGINX pode ser estendido com scripts Lua."

#. type: Plain text
#: doc/guix-cookbook.texi:3081
msgid "Guix provides NGINX service with ability to load Lua module and specific Lua packages, and reply to requests by evaluating Lua scripts."
msgstr "Guix fornece serviço NGINX com capacidade de carregar módulos Lua e pacotes Lua específicos, e responder a solicitações avaliando scripts Lua."

#. type: Plain text
#: doc/guix-cookbook.texi:3085
msgid "The following example demonstrates system definition with configuration to evaluate @file{index.lua} Lua script on HTTP request to @uref{http://localhost/hello} endpoint:"
msgstr "O exemplo a seguir demonstra a definição do sistema com configuração para avaliar o script Lua @file{index.lua} na solicitação HTTP para o endpoint @uref{http://localhost/hello}:"

#. type: example
#: doc/guix-cookbook.texi:3088
#, no-wrap
msgid ""
"local shell = require \"resty.shell\"\n"
"\n"
msgstr ""
"local shell = require \"resty.shell\"\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:3092
#, no-wrap
msgid ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"
msgstr ""
"local stdin = \"\"\n"
"local timeout = 1000  -- ms\n"
"local max_size = 4096  -- byte\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:3095
#, no-wrap
msgid ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"
msgstr ""
"local ok, stdout, stderr, reason, status =\n"
"   shell.run([[/run/current-system/profile/bin/ls /tmp]], stdin, timeout, max_size)\n"
"\n"

#. type: example
#: doc/guix-cookbook.texi:3097
#, no-wrap
msgid "ngx.say(stdout)\n"
msgstr "ngx.say(stdout)\n"

#. type: lisp
#: doc/guix-cookbook.texi:3128
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"
msgstr ""
"(use-modules (gnu))\n"
"(use-service-modules #;… web)\n"
"(use-package-modules #;… lua)\n"
"(operating-system\n"
"  ;; …\n"
"  (services\n"
"   ;; …\n"
"   (service nginx-service-type\n"
"            (nginx-configuration\n"
"             (modules\n"
"              (list\n"
"               (file-append nginx-lua-module \"/etc/nginx/modules/ngx_http_lua_module.so\")))\n"
"             (lua-package-path (list lua-resty-core\n"
"                                     lua-resty-lrucache\n"
"                                     lua-resty-signal\n"
"                                     lua-tablepool\n"
"                                     lua-resty-shell))\n"
"             (lua-package-cpath (list lua-resty-signal))\n"
"             (server-blocks\n"
"              (list (nginx-server-configuration\n"
"                     (server-name '(\"localhost\"))\n"
"                     (listen '(\"80\"))\n"
"                     (root \"/etc\")\n"
"                     (locations (list\n"
"                                 (nginx-location-configuration\n"
"                                  (uri \"/hello\")\n"
"                                  (body (list #~(format #f \"content_by_lua_file ~s;\"\n"
"                                                        #$(local-file \"index.lua\"))))))))))))))\n"

#. type: cindex
#: doc/guix-cookbook.texi:3132
#, no-wrap
msgid "mpd"
msgstr "mpd"

#. type: cindex
#: doc/guix-cookbook.texi:3133
#, no-wrap
msgid "music server, headless"
msgstr "servidor de música, headless"

#. type: cindex
#: doc/guix-cookbook.texi:3134
#, no-wrap
msgid "bluetooth, ALSA configuration"
msgstr "Bluetooth, configuração ALSA"

#. type: Plain text
#: doc/guix-cookbook.texi:3141
msgid "MPD, the Music Player Daemon, is a flexible server-side application for playing music.  Client programs on different machines on the network --- a mobile phone, a laptop, a desktop workstation --- can connect to it to control the playback of audio files from your local music collection.  MPD decodes the audio files and plays them back on one or many outputs."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3148
msgid "By default MPD will play to the default audio device.  In the example below we make things a little more interesting by setting up a headless music server.  There will be no graphical user interface, no Pulseaudio daemon, and no local audio output.  Instead we will configure MPD with two outputs: a bluetooth speaker and a web server to serve audio streams to any streaming media player."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3154
msgid "Bluetooth is often rather frustrating to set up.  You will have to pair your Bluetooth device and make sure that the device is automatically connected as soon as it powers on.  The Bluetooth system service returned by the @code{bluetooth-service} procedure provides the infrastructure needed to set this up."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3157
msgid "Reconfigure your system with at least the following services and packages:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3167
#, no-wrap
msgid ""
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3174
msgid "Start the @code{bluetooth} service and then use @command{bluetoothctl} to scan for Bluetooth devices.  Try to identify your Bluetooth speaker and pick out its device ID from the resulting list of devices that is indubitably dominated by a baffling smorgasbord of your neighbors' home automation gizmos.  This only needs to be done once:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3178
#, no-wrap
msgid ""
"$ bluetoothctl \n"
"[NEW] Controller 00:11:22:33:95:7F BlueZ 5.40 [default]\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3181
#, no-wrap
msgid ""
"[bluetooth]# power on\n"
"[bluetooth]# Changing power on succeeded\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3184
#, no-wrap
msgid ""
"[bluetooth]# agent on\n"
"[bluetooth]# Agent registered\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3187
#, no-wrap
msgid ""
"[bluetooth]# default-agent\n"
"[bluetooth]# Default agent request successful\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3194
#, no-wrap
msgid ""
"[bluetooth]# scan on\n"
"[bluetooth]# Discovery started\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: yes\n"
"[NEW] Device AA:BB:CC:A4:AA:CD My Bluetooth Speaker\n"
"[NEW] Device 44:44:FF:2A:20:DC My Neighbor's TV\n"
"@dots{}\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3198
#, no-wrap
msgid ""
"[bluetooth]# pair AA:BB:CC:A4:AA:CD\n"
"Attempting to pair with AA:BB:CC:A4:AA:CD\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3204
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# [CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110b-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110c-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD UUIDs: 0000110e-0000-1000-8000-00xxxxxxxxxx\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Paired: yes\n"
"Pairing successful\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3206
#, no-wrap
msgid ""
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: no\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3211
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# trust AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD Trusted: yes\n"
"Changing AA:BB:CC:A4:AA:CD trust succeeded\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3218
#, no-wrap
msgid ""
"[bluetooth]# \n"
"[bluetooth]# connect AA:BB:CC:A4:AA:CD\n"
"Attempting to connect to AA:BB:CC:A4:AA:CD\n"
"[bluetooth]# [CHG] Device AA:BB:CC:A4:AA:CD RSSI: -63\n"
"[CHG] Device AA:BB:CC:A4:AA:CD Connected: yes\n"
"Connection successful\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3223
#, no-wrap
msgid ""
"[My Bluetooth Speaker]# scan off\n"
"[CHG] Device AA:BB:CC:A4:AA:CD RSSI is nil\n"
"Discovery stopped\n"
"[CHG] Controller 00:11:22:33:95:7F Discovering: no\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3227
msgid "Congratulations, you can now automatically connect to your Bluetooth speaker!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3237
msgid "It is now time to configure ALSA to use the @emph{bluealsa} Bluetooth module, so that you can define an ALSA pcm device corresponding to your Bluetooth speaker.  For a headless server using @emph{bluealsa} with a fixed Bluetooth device is likely simpler than configuring Pulseaudio and its stream switching behavior.  We configure ALSA by crafting a custom @code{alsa-configuration} for the @code{alsa-service-type}.  The configuration will declare a @code{pcm} type @code{bluealsa} from the @code{bluealsa} module provided by the @code{bluez-alsa} package, and then define a @code{pcm} device of that type for your Bluetooth speaker."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3244
msgid "All that is left then is to make MPD send audio data to this ALSA device.  We also add a secondary MPD output that makes the currently played audio files available as a stream through a web server on port 8080.  When enabled a device on the network could listen to the audio stream by connecting any capable media player to the HTTP server on port 8080, independent of the status of the Bluetooth speaker."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3247
msgid "What follows is the outline of an @code{operating-system} declaration that should accomplish the above-mentioned tasks:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3296
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-service-modules audio dbus sound #;… etc)\n"
"(use-package-modules audio linux #;… etc)\n"
"(operating-system\n"
"  ;; …\n"
"  (packages (cons* bluez bluez-alsa\n"
"                   %base-packages))\n"
"  (services\n"
"   ;; …\n"
"   (service mpd-service-type\n"
"            (mpd-configuration\n"
"             (user \"your-username\")\n"
"             (music-dir \"/path/to/your/music\")\n"
"             (address \"192.168.178.20\")\n"
"             (outputs (list (mpd-output\n"
"                             (type \"alsa\")\n"
"                             (name \"MPD\")\n"
"                             (extra-options\n"
"                              ;; Use the same name as in the ALSA\n"
"                              ;; configuration below.\n"
"                              '((device . \"pcm.btspeaker\"))))\n"
"                            (mpd-output\n"
"                             (type \"httpd\")\n"
"                             (name \"streaming\")\n"
"                             (enabled? #false)\n"
"                             (always-on? #true)\n"
"                             (tags? #true)\n"
"                             (mixer-type 'null)\n"
"                             (extra-options\n"
"                              '((encoder . \"vorbis\")\n"
"                                (port    . \"8080\")\n"
"                                (bind-to-address . \"192.168.178.20\")\n"
"                                (max-clients . \"0\") ;no limit\n"
"                                (quality . \"5.0\")\n"
"                                (format  . \"44100:16:1\"))))))))\n"
"   (dbus-service #:services (list bluez-alsa))\n"
"   (bluetooth-service #:auto-enable? #t)\n"
"   (service alsa-service-type\n"
"            (alsa-configuration\n"
"             (pulseaudio? #false) ;we don't need it\n"
"             (extra-options\n"
"              #~(string-append \"\\\n"
"# Declare Bluetooth audio device type \\\"bluealsa\\\" from bluealsa module\n"
"pcm_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_pcm_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3302
#, no-wrap
msgid ""
"# Declare control device type \\\"bluealsa\\\" from the same module\n"
"ctl_type.bluealsa @{\n"
"    lib \\\"\"\n"
"#$(file-append bluez-alsa \"/lib/alsa-lib/libasound_module_ctl_bluealsa.so\") \"\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3309
#, no-wrap
msgid ""
"# Define the actual Bluetooth audio device.\n"
"pcm.btspeaker @{\n"
"    type bluealsa\n"
"    device \\\"AA:BB:CC:A4:AA:CD\\\" # unique device identifier\n"
"    profile \\\"a2dp\\\"\n"
"@}\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3315
#, no-wrap
msgid ""
"# Define an associated controller.\n"
"ctl.btspeaker @{\n"
"    type bluealsa\n"
"@}\n"
"\"))))))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3319
msgid "Enjoy the music with the MPD client of your choice or a media player capable of streaming via HTTP!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3332
msgid "The kernel Linux provides a number of shared facilities that are available to processes in the system.  These facilities include a shared view on the file system, other processes, network devices, user and group identities, and a few others.  Since Linux 3.19 a user can choose to @emph{unshare} some of these shared facilities for selected processes, providing them (and their child processes) with a different view on the system."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3338
msgid "A process with an unshared @code{mount} namespace, for example, has its own view on the file system --- it will only be able to see directories that have been explicitly bound in its mount namespace.  A process with its own @code{proc} namespace will consider itself to be the only process running on the system, running as PID 1."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3345
msgid "Guix uses these kernel features to provide fully isolated environments and even complete Guix System containers, lightweight virtual machines that share the host system's kernel.  This feature comes in especially handy when using Guix on a foreign distribution to prevent interference from foreign libraries or configuration files that are available system-wide."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3357
msgid "The easiest way to get started is to use @command{guix shell} with the @option{--container} option.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual} for a reference of valid options."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3364
msgid "The following snippet spawns a minimal shell process with most namespaces unshared from the system.  The current working directory is visible to the process, but anything else on the file system is unavailable.  This extreme isolation can be very useful when you want to rule out any sort of interference from environment variables, globally installed libraries, or configuration files."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3367
#, no-wrap
msgid "guix shell --container\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3374
msgid "It is a bleak environment, barren, desolate.  You will find that not even the GNU coreutils are available here, so to explore this deserted wasteland you need to use built-in shell commands.  Even the usually gigantic @file{/gnu/store} directory is reduced to a faint shadow of itself."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3384
#, no-wrap
msgid ""
"$ echo /gnu/store/*\n"
"/gnu/store/@dots{}-gcc-10.3.0-lib\n"
"/gnu/store/@dots{}-glibc-2.33\n"
"/gnu/store/@dots{}-bash-static-5.1.8\n"
"/gnu/store/@dots{}-ncurses-6.2.20210619\n"
"/gnu/store/@dots{}-bash-5.1.8\n"
"/gnu/store/@dots{}-profile\n"
"/gnu/store/@dots{}-readline-8.1.1\n"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3386
#, no-wrap
msgid "exiting a container"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3390
msgid "There isn't much you can do in an environment like this other than exiting it.  You can use @key{^D} or @command{exit} to terminate this limited shell environment."
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3391
#, no-wrap
msgid "exposing directories, container"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3392
#, no-wrap
msgid "sharing directories, container"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3393
#, no-wrap
msgid "mapping locations, container"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3402
msgid "You can make other directories available inside of the container environment; use @option{--expose=DIRECTORY} to bind-mount the given directory as a read-only location inside the container, or use @option{--share=DIRECTORY} to make the location writable.  With an additional mapping argument after the directory name you can control the name of the directory inside the container.  In the following example we map @file{/etc} on the host system to @file{/the/host/etc} inside a container in which the GNU coreutils are installed."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3406
#, no-wrap
msgid ""
"$ guix shell --container --share=/etc=/the/host/etc coreutils\n"
"$ ls /the/host/etc\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3413
msgid "Similarly, you can prevent the current working directory from being mapped into the container with the @option{--no-cwd} option.  Another good idea is to create a dedicated directory that will serve as the container's home directory, and spawn the container shell from that directory."
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3414
#, no-wrap
msgid "hide system libraries, container"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3415
#, no-wrap
msgid "avoid ABI mismatch, container"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3425
msgid "On a foreign system a container environment can be used to compile software that cannot possibly be linked with system libraries or with the system's compiler toolchain.  A common use-case in a research context is to install packages from within an R session.  Outside of a container environment there is a good chance that the foreign compiler toolchain and incompatible system libraries are found first, resulting in incompatible binaries that cannot be used by R.  In a container shell this problem disappears, as system libraries and executables simply aren't available due to the unshared @code{mount} namespace."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3428
msgid "Let's take a comprehensive manifest providing a comfortable development environment for use with R:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3432
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  (list \"r-minimal\"\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3437
#, no-wrap
msgid ""
"        ;; base packages\n"
"        \"bash-minimal\"\n"
"        \"glibc-locales\"\n"
"        \"nss-certs\"\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3444
#, no-wrap
msgid ""
"        ;; Common command line tools lest the container is too empty.\n"
"        \"coreutils\"\n"
"        \"grep\"\n"
"        \"which\"\n"
"        \"wget\"\n"
"        \"sed\"\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3447
#, no-wrap
msgid ""
"        ;; R markdown tools\n"
"        \"pandoc\"\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3463
#, no-wrap
msgid ""
"        ;; Toolchain and common libraries for \"install.packages\"\n"
"        \"gcc-toolchain@@10\"\n"
"        \"gfortran-toolchain\"\n"
"        \"gawk\"\n"
"        \"tar\"\n"
"        \"gzip\"\n"
"        \"unzip\"\n"
"        \"make\"\n"
"        \"cmake\"\n"
"        \"pkg-config\"\n"
"        \"cairo\"\n"
"        \"libxt\"\n"
"        \"openssl\"\n"
"        \"curl\"\n"
"        \"zlib\"))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3469
msgid "Let's use this to run R inside a container environment.  For convenience we share the @code{net} namespace to use the host system's network interfaces.  Now we can build R packages from source the traditional way without having to worry about ABI mismatch or incompatibilities."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3472
#, no-wrap
msgid ""
"$ guix shell --container --network --manifest=manifest.scm -- R\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3485
#, no-wrap
msgid ""
"R version 4.2.1 (2022-06-23) -- \"Funny-Looking Kid\"\n"
"Copyright (C) 2022 The R Foundation for Statistical Computing\n"
"@dots{}\n"
"> e <- Sys.getenv(\"GUIX_ENVIRONMENT\")\n"
"> Sys.setenv(GIT_SSL_CAINFO=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_FILE=paste0(e, \"/etc/ssl/certs/ca-certificates.crt\"))\n"
"> Sys.setenv(SSL_CERT_DIR=paste0(e, \"/etc/ssl/certs\"))\n"
"> install.packages(\"Cairo\", lib=paste0(getwd()))\n"
"@dots{}\n"
"* installing *source* package 'Cairo' ...\n"
"@dots{}\n"
"* DONE (Cairo)\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3490
#, no-wrap
msgid ""
"The downloaded source packages are in\n"
"\t'/tmp/RtmpCuwdwM/downloaded_packages'\n"
"> library(\"Cairo\", lib=getwd())\n"
"> # success!\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3498
msgid "Using container shells is fun, but they can become a little cumbersome when you want to go beyond just a single interactive process.  Some tasks become a lot easier when they sit on the rock solid foundation of a proper Guix System and its rich set of system services.  The next section shows you how to launch a complete Guix System inside of a container."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3512
msgid "The Guix System provides a wide array of interconnected system services that are configured declaratively to form a dependable stateless GNU System foundation for whatever tasks you throw at it.  Even when using Guix on a foreign distribution you can benefit from the design of Guix System by running a system instance as a container.  Using the same kernel features of unshared namespaces mentioned in the previous section, the resulting Guix System instance is isolated from the host system and only shares file system locations that you explicitly declare."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3523
msgid "A Guix System container differs from the shell process created by @command{guix shell --container} in a number of important ways.  While in a container shell the containerized process is a Bash shell process, a Guix System container runs the Shepherd as PID 1.  In a system container all system services (@pxref{Services,,, guix, GNU Guix Reference Manual}) are set up just as they would be on a Guix System in a virtual machine or on bare metal---this includes daemons managed by the GNU@tie{}Shepherd (@pxref{Shepherd Services,,, guix, GNU Guix Reference Manual}) as well as other kinds of extensions to the operating system (@pxref{Service Composition,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3530
msgid "The perceived increase in complexity of running a Guix System container is easily justified when dealing with more complex applications that have higher or just more rigid requirements on their execution contexts---configuration files, dedicated user accounts, directories for caches or log files, etc.  In Guix System the demands of this kind of software are satisfied through the deployment of system services."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3543
msgid "A good example might be a PostgreSQL database server.  Much of the complexity of setting up such a database server is encapsulated in this deceptively short service declaration:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3548
#, no-wrap
msgid ""
"(service postgresql-service-type\n"
"         (postgresql-configuration\n"
"          (postgresql postgresql-14)))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3552
msgid "A complete operating system declaration for use with a Guix System container would look something like this:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3557
#, no-wrap
msgid ""
"(use-modules (gnu))\n"
"(use-package-modules databases)\n"
"(use-service-modules databases)\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:3591
#, no-wrap
msgid ""
"(operating-system\n"
"  (host-name \"container\")\n"
"  (timezone \"Europe/Berlin\")\n"
"  (file-systems (cons (file-system\n"
"                        (device (file-system-label \"does-not-matter\"))\n"
"                        (mount-point \"/\")\n"
"                        (type \"ext4\"))\n"
"                      %base-file-systems))\n"
"  (bootloader (bootloader-configuration\n"
"               (bootloader grub-bootloader)\n"
"               (targets '(\"/dev/sdX\"))))\n"
"  (services\n"
"   (cons* (service postgresql-service-type\n"
"                   (postgresql-configuration\n"
"                    (postgresql postgresql-14)\n"
"                    (config-file\n"
"                     (postgresql-config-file\n"
"                      (log-destination \"stderr\")\n"
"                      (hba-file\n"
"                       (plain-file \"pg_hba.conf\"\n"
"                                   \"\\\n"
"local\tall\tall\t\t\ttrust\n"
"host\tall\tall\t10.0.0.1/32 \ttrust\"))\n"
"                      (extra-config\n"
"                       '((\"listen_addresses\" \"*\")\n"
"                         (\"log_directory\"    \"/var/log/postgresql\")))))))\n"
"          (service postgresql-role-service-type\n"
"                   (postgresql-role-configuration\n"
"                    (roles\n"
"                     (list (postgresql-role\n"
"                            (name \"test\")\n"
"                            (create-database? #t))))))\n"
"          %base-services)))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3599
msgid "With @code{postgresql-role-service-type} we define a role ``test'' and create a matching database, so that we can test right away without any further manual setup.  The @code{postgresql-config-file} settings allow a client from IP address 10.0.0.1 to connect without requiring authentication---a bad idea in production systems, but convenient for this example."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3605
msgid "Let's build a script that will launch an instance of this Guix System as a container.  Write the @code{operating-system} declaration above to a file @file{os.scm} and then use @command{guix system container} to build the launcher.  (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3613
#, no-wrap
msgid ""
"$ guix system container os.scm\n"
"The following derivations will be built:\n"
"  /gnu/store/@dots{}-run-container.drv\n"
"  @dots{}\n"
"building /gnu/store/@dots{}-run-container.drv...\n"
"/gnu/store/@dots{}-run-container\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3619
msgid "Now that we have a launcher script we can run it to spawn the new system with a running PostgreSQL service.  Note that due to some as yet unresolved limitations we need to run the launcher as the root user, for example with @command{sudo}."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3624
#, no-wrap
msgid ""
"$ sudo /gnu/store/@dots{}-run-container\n"
"system container is running as PID 5983\n"
"@dots{}\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3631
msgid "Background the process with @key{Ctrl-z} followed by @command{bg}.  Note the process ID in the output; we will need it to connect to the container later.  You know what? Let's try attaching to the container right now.  We will use @command{nsenter}, a tool provided by the @code{util-linux} package:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3644
#, no-wrap
msgid ""
"$ guix shell util-linux\n"
"$ sudo nsenter -a -t 5983\n"
"root@@container /# pgrep -a postgres\n"
"49 /gnu/store/@dots{}-postgresql-14.4/bin/postgres -D /var/lib/postgresql/data --config-file=/gnu/store/@dots{}-postgresql.conf -p 5432\n"
"51 postgres: checkpointer\n"
"52 postgres: background writer\n"
"53 postgres: walwriter\n"
"54 postgres: autovacuum launcher\n"
"55 postgres: stats collector\n"
"56 postgres: logical replication launcher\n"
"root@@container /# exit\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3647
msgid "The PostgreSQL service is running in the container!"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3651
#, no-wrap
msgid "container networking"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3657
msgid "What good is a Guix System running a PostgreSQL database service as a container when we can only talk to it with processes originating in the container? It would be much better if we could talk to the database over the network."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3663
msgid "The easiest way to do this is to create a pair of connected virtual Ethernet devices (known as @code{veth}).  We move one of the devices (@code{ceth-test}) into the @code{net} namespace of the container and leave the other end (@code{veth-test}) of the connection on the host system."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3669
#, no-wrap
msgid ""
"pid=5983\n"
"ns=\"guix-test\"\n"
"host=\"veth-test\"\n"
"client=\"ceth-test\"\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3672
#, no-wrap
msgid ""
"# Attach the new net namespace \"guix-test\" to the container PID.\n"
"sudo ip netns attach $ns $pid\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3675
#, no-wrap
msgid ""
"# Create the pair of devices\n"
"sudo ip link add $host type veth peer name $client\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3678
#, no-wrap
msgid ""
"# Move the client device into the container's net namespace\n"
"sudo ip link set $client netns $ns\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3681
msgid "Then we configure the host side:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3685
#, no-wrap
msgid ""
"sudo ip link set $host up\n"
"sudo ip addr add 10.0.0.1/24 dev $host\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3688
msgid "@dots{}and then we configure the client side:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3693
#, no-wrap
msgid ""
"sudo ip netns exec $ns  ip link set lo up\n"
"sudo ip netns exec $ns  ip link set $client up\n"
"sudo ip netns exec $ns  ip addr add 10.0.0.2/24 dev $client\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3699
msgid "At this point the host can reach the container at IP address 10.0.0.2, and the container can reach the host at IP 10.0.0.1.  This is all we need to talk to the database server inside the container from the host system on the outside."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3704
#, no-wrap
msgid ""
"$ psql -h 10.0.0.2 -U test\n"
"psql (14.4)\n"
"Type \"help\" for help.\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3714
#, no-wrap
msgid ""
"test=> CREATE TABLE hello (who TEXT NOT NULL);\n"
"CREATE TABLE\n"
"test=> INSERT INTO hello (who) VALUES ('world');\n"
"INSERT 0 1\n"
"test=> SELECT * FROM hello;\n"
"  who\n"
"-------\n"
" world\n"
"(1 row)\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3717
msgid "Now that we're done with this little demonstration let's clean up:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3722
#, no-wrap
msgid ""
"sudo kill $pid\n"
"sudo ip netns del $ns\n"
"sudo ip link del $host\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3731
msgid "Guix can produce disk images (@pxref{Invoking guix system,,, guix, GNU Guix Reference Manual}) that can be used with virtual machines solutions such as virt-manager, GNOME Boxes or the more bare QEMU, among others."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3734
msgid "This chapter aims to provide hands-on, practical examples that relates to the usage and configuration of virtual machines on a Guix System."
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3742
#, no-wrap
msgid "Network bridge interface"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3743
#, no-wrap
msgid "networking, bridge"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3744
#, no-wrap
msgid "qemu, network bridge"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3756
msgid "By default, QEMU uses a so-called ``user mode'' host network back-end, which is convenient as it does not require any configuration.  Unfortunately, it is also quite limited.  In this mode, the guest @abbr{VM, virtual machine} can access the network the same way the host would, but it cannot be reached from the host.  Additionally, since the QEMU user networking mode relies on ICMP, ICMP-based networking tools such as @command{ping} do @emph{not} work in this mode.  Thus, it is often desirable to configure a network bridge, which enables the guest to fully participate in the network.  This is necessary, for example, when the guest is to be used as a server."
msgstr ""

#. type: subsection
#: doc/guix-cookbook.texi:3757
#, no-wrap
msgid "Creating a network bridge interface"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3763
msgid "There are many ways to create a network bridge.  The following command shows how to use NetworkManager and its @command{nmcli} command line interface (CLI) tool, which should already be available if your operating system declaration is based on one of the desktop templates:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3766
#, no-wrap
msgid "# nmcli con add type bridge con-name br0 ifname br0\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3772
msgid "To have this bridge be part of your network, you must associate your network bridge with the Ethernet interface used to connect with the network.  Assuming your interface is named @samp{enp2s0}, the following command can be used to do so:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3775
#, no-wrap
msgid "# nmcli con add type bridge-slave ifname enp2s0 master br0\n"
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:3777 doc/guix-cookbook.texi:3817
#, no-wrap
msgid "Important"
msgstr "Importante"

#. type: quotation
#: doc/guix-cookbook.texi:3781
msgid "Only Ethernet interfaces can be added to a bridge.  For wireless interfaces, consider the routed network approach detailed in @xref{Routed network for libvirt}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3787
msgid "By default, the network bridge will allow your guests to obtain their IP address via DHCP, if available on your local network.  For simplicity, this is what we will use here.  To easily find the guests, they can be configured to advertise their host names via mDNS."
msgstr ""

#. type: subsection
#: doc/guix-cookbook.texi:3788
#, no-wrap
msgid "Configuring the QEMU bridge helper script"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3796
msgid "QEMU comes with a helper program to conveniently make use of a network bridge interface as an unprivileged user @pxref{Network options,,, QEMU, QEMU Documentation}.  The binary must be made setuid root for proper operation; this can be achieved by adding it to the @code{setuid-programs} field of your (host) @code{operating-system} definition, as shown below:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3801
#, no-wrap
msgid ""
"(setuid-programs\n"
" (cons (file-append qemu \"/libexec/qemu-bridge-helper\")\n"
"       %setuid-programs))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3806
msgid "The file @file{/etc/qemu/bridge.conf} must also be made to allow the bridge interface, as the default is to deny all.  Add the following to your list of services to do so:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3809
#, no-wrap
msgid "(extra-special-file \"/etc/qemu/host.conf\" \"allow br0\\n\")\n"
msgstr ""

#. type: subsection
#: doc/guix-cookbook.texi:3811
#, no-wrap
msgid "Invoking QEMU with the right command line options"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3816
msgid "When invoking QEMU, the following options should be provided so that the network bridge is used, after having selected a unique MAC address for the guest."
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:3821
msgid "By default, a single MAC address is used for all guests, unless provided.  Failing to provide different MAC addresses to each virtual machine making use of the bridge would cause networking issues."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3828
#, no-wrap
msgid ""
"$ qemu-system-x86_64 [...] \\\n"
"    -device virtio-net-pci,netdev=user0,mac=XX:XX:XX:XX:XX:XX \\\n"
"    -netdev bridge,id=user0,br=br0 \\\n"
"    [...]\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3832
msgid "To generate MAC addresses that have the QEMU registered prefix, the following snippet can be employed:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3838
#, no-wrap
msgid ""
"mac_address=\"52:54:00:$(dd if=/dev/urandom bs=512 count=1 2>/dev/null \\\n"
"                           | md5sum \\\n"
"                           | sed -E 's/^(..)(..)(..).*$/\\1:\\2:\\3/')\"\n"
"echo $mac_address\n"
msgstr ""

#. type: subsection
#: doc/guix-cookbook.texi:3840
#, no-wrap
msgid "Networking issues caused by Docker"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3847
msgid "If you use Docker on your machine, you may experience connectivity issues when attempting to use a network bridge, which are caused by Docker also relying on network bridges and configuring its own routing rules.  The solution is add the following @code{iptables} snippet to your @code{operating-system} declaration:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3859
#, no-wrap
msgid ""
"(service iptables-service-type\n"
"             (iptables-configuration\n"
"              (ipv4-rules (plain-file \"iptables.rules\" \"\\\n"
"*filter\n"
":INPUT ACCEPT [0:0]\n"
":FORWARD DROP [0:0]\n"
":OUTPUT ACCEPT [0:0]\n"
"-A FORWARD -i br0 -o br0 -j ACCEPT\n"
"COMMIT\n"
"\"))\n"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3863
#, no-wrap
msgid "Virtual network bridge interface"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3864
#, no-wrap
msgid "networking, virtual bridge"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:3865
#, no-wrap
msgid "libvirt, virtual network bridge"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3879
msgid "If the machine hosting your virtual machines is connected wirelessly to the network, you won't be able to use a true network bridge as explained in the preceding section (@pxref{Network bridge for QEMU}).  In this case, the next best option is to use a @emph{virtual} bridge with static routing and to configure a libvirt-powered virtual machine to use it (via the @command{virt-manager} GUI for example).  This is similar to the default mode of operation of QEMU/libvirt, except that instead of using @abbr{NAT, Network Address Translation}, it relies on static routes to join the @abbr{VM, virtual machine} IP address to the @abbr{LAN, local area network}.  This provides two-way connectivity to and from the virtual machine, which is needed for exposing services hosted on the virtual machine."
msgstr ""

#. type: subsection
#: doc/guix-cookbook.texi:3880
#, no-wrap
msgid "Creating a virtual network bridge"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3890
msgid "A virtual network bridge consists of a few components/configurations, such as a @abbr{TUN, network tunnel} interface, DHCP server (dnsmasq)  and firewall rules (iptables).  The @command{virsh} command, provided by the @code{libvirt} package, makes it very easy to create a virtual bridge.  You first need to choose a network subnet for your virtual bridge; if your home LAN is in the @samp{192.168.1.0/24} network, you could opt to use e.g.@: @samp{192.168.2.0/24}.  Define an XML file, e.g.@: @file{/tmp/virbr0.xml}, containing the following:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3902
#, no-wrap
msgid ""
"<network>\n"
"  <name>virbr0</name>\n"
"  <bridge name=\"virbr0\" />\n"
"  <forward mode=\"route\"/>\n"
"  <ip address=\"192.168.2.0\" netmask=\"255.255.255.0\">\n"
"    <dhcp>\n"
"      <range start=\"192.168.2.1\" end=\"192.168.2.254\"/>\n"
"    </dhcp>\n"
"  </ip>\n"
"</network>\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3906
msgid "Then create and configure the interface using the @command{virsh} command, as root:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:3911
#, no-wrap
msgid ""
"virsh net-define /tmp/virbr0.xml\n"
"virsh net-autostart virbr0\n"
"virsh net-start virbr0\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3916
msgid "The @samp{virbr0} interface should now be visible e.g.@: via the @samp{ip address} command.  It will be automatically started every time your libvirt virtual machine is started."
msgstr ""

#. type: subsection
#: doc/guix-cookbook.texi:3917
#, no-wrap
msgid "Configuring the static routes for your virtual bridge"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3925
msgid "If you configured your virtual machine to use your newly created @samp{virbr0} virtual bridge interface, it should already receive an IP via DHCP such as @samp{192.168.2.15} and be reachable from the server hosting it, e.g.@: via @samp{ping 192.168.2.15}.  There's one last configuration needed so that the VM can reach the external network: adding static routes to the network's router."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3934
msgid "In this example, the LAN network is @samp{192.168.1.0/24} and the router configuration web page may be accessible via e.g.@: the @url{http://192.168.1.1} page.  On a router running the @url{https://librecmc.org/, libreCMC} firmware, you would navigate to the @clicksequence{Network @click{} Static Routes} page (@url{https://192.168.1.1/cgi-bin/luci/admin/network/routes}), and you would add a new entry to the @samp{Static IPv4 Routes} with the following information:"
msgstr ""

#. type: item
#: doc/guix-cookbook.texi:3936
#, no-wrap
msgid "Interface"
msgstr ""

#. type: table
#: doc/guix-cookbook.texi:3938
msgid "lan"
msgstr ""

#. type: item
#: doc/guix-cookbook.texi:3938
#, no-wrap
msgid "Target"
msgstr ""

#. type: table
#: doc/guix-cookbook.texi:3940
msgid "192.168.2.0"
msgstr ""

#. type: item
#: doc/guix-cookbook.texi:3940
#, no-wrap
msgid "IPv4-Netmask"
msgstr ""

#. type: table
#: doc/guix-cookbook.texi:3942
msgid "255.255.255.0"
msgstr ""

#. type: item
#: doc/guix-cookbook.texi:3942
#, no-wrap
msgid "IPv4-Gateway"
msgstr ""

#. type: var{#1}
#: doc/guix-cookbook.texi:3944
msgid "server-ip"
msgstr ""

#. type: item
#: doc/guix-cookbook.texi:3944
#, no-wrap
msgid "Route type"
msgstr ""

#. type: table
#: doc/guix-cookbook.texi:3946
msgid "unicast"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3950
msgid "where @var{server-ip} is the IP address of the machine hosting the VMs, which should be static."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3954
msgid "After saving/applying this new static route, external connectivity should work from within your VM; you can e.g.@: run @samp{ping gnu.org} to verify that it functions correctly."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3964
msgid "Guix is a functional package manager that offers many features beyond what more traditional package managers can do.  To the uninitiated, those features might not have obvious use cases at first.  The purpose of this chapter is to demonstrate some advanced package management concepts."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3967
msgid "@pxref{Package Management,,, guix, GNU Guix Reference Manual} for a complete reference."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3978
msgid "Guix provides a very useful feature that may be quite foreign to newcomers: @dfn{profiles}.  They are a way to group package installations together and all users on the same system are free to use as many profiles as they want."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3983
msgid "Whether you're a developer or not, you may find that multiple profiles bring you great power and flexibility.  While they shift the paradigm somewhat compared to @emph{traditional package managers}, they are very convenient to use once you've understood how to set them up."
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:3988
msgid "This section is an opinionated guide on the use of multiple profiles.  It predates @command{guix shell} and its fast profile cache (@pxref{Invoking guix shell,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:3992
msgid "In many cases, you may find that using @command{guix shell} to set up the environment you need, when you need it, is less work that maintaining a dedicated profile.  Your call!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:3999
msgid "If you are familiar with Python's @samp{virtualenv}, you can think of a profile as a kind of universal @samp{virtualenv} that can hold any kind of software whatsoever, not just Python software.  Furthermore, profiles are self-sufficient: they capture all the runtime dependencies which guarantees that all programs within a profile will always work at any point in time."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4001
msgid "Multiple profiles have many benefits:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4005
msgid "Clean semantic separation of the various packages a user needs for different contexts."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4009
msgid "Multiple profiles can be made available into the environment either on login or within a dedicated shell."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4013
msgid "Profiles can be loaded on demand.  For instance, the user can use multiple shells, each of them running different profiles."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4018
msgid "Isolation: Programs from one profile will not use programs from the other, and the user can even install different versions of the same programs to the two profiles without conflict."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4022
msgid "Deduplication: Profiles share dependencies that happens to be the exact same.  This makes multiple profiles storage-efficient."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4030
msgid "Reproducible: when used with declarative manifests, a profile can be fully specified by the Guix commit that was active when it was set up.  This means that the exact same profile can be @uref{https://guix.gnu.org/blog/2018/multi-dimensional-transactions-and-rollbacks-oh-my/, set up anywhere and anytime}, with just the commit information.  See the section on @ref{Reproducible profiles}."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4034
msgid "Easier upgrades and maintenance: Multiple profiles make it easy to keep package listings at hand and make upgrades completely frictionless."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4037
msgid "Concretely, here follows some typical profiles:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4041
msgid "The dependencies of a project you are working on."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4044
msgid "Your favourite programming language libraries."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4047
msgid "Laptop-specific programs (like @samp{powertop}) that you don't need on a desktop."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4051
msgid "@TeX{}live (this one can be really useful when you need to install just one package for this one document you've just received over email)."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4054
msgid "Games."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4057
msgid "Let's dive in the set up!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4072
msgid "A Guix profile can be set up @i{via} a @dfn{manifest}.  A manifest is a snippet of Scheme code that specifies the set of packages you want to have in your profile; it looks like this:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4082
#, no-wrap
msgid ""
"(specifications->manifest\n"
"  '(\"package-1\"\n"
"    ;; Version 1.3 of package-2.\n"
"    \"package-2@@1.3\"\n"
"    ;; The \"lib\" output of package-3.\n"
"    \"package-3:lib\"\n"
"    ; ...\n"
"    \"package-N\"))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4086
msgid "@xref{Writing Manifests,,, guix, GNU Guix Reference Manual}, for more information about the syntax."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4088
msgid "We can create a manifest specification per profile and install them this way:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4094
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"mkdir -p \"$GUIX_EXTRA_PROFILES\"/my-project # if it does not exist yet\n"
"guix package --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4098
msgid "Here we set an arbitrary variable @samp{GUIX_EXTRA_PROFILES} to point to the directory where we will store our profiles in the rest of this article."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4104
msgid "Placing all your profiles in a single directory, with each profile getting its own sub-directory, is somewhat cleaner.  This way, each sub-directory will contain all the symlinks for precisely one profile.  Besides, ``looping over profiles'' becomes obvious from any programming language (e.g.@: a shell script) by simply looping over the sub-directories of @samp{$GUIX_EXTRA_PROFILES}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4106
msgid "Note that it's also possible to loop over the output of"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4109
#, no-wrap
msgid "guix package --list-profiles\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4112
msgid "although you'll probably have to filter out @file{~/.config/guix/current}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4114
msgid "To enable all profiles on login, add this to your @file{~/.bash_profile} (or similar):"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4124
#, no-wrap
msgid ""
"for i in $GUIX_EXTRA_PROFILES/*; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4129
msgid "Note to Guix System users: the above reflects how your default profile @file{~/.guix-profile} is activated from @file{/etc/profile}, that latter being loaded by @file{~/.bashrc} by default."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4131
msgid "You can obviously choose to only enable a subset of them:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4141
#, no-wrap
msgid ""
"for i in \"$GUIX_EXTRA_PROFILES\"/my-project-1 \"$GUIX_EXTRA_PROFILES\"/my-project-2; do\n"
"  profile=$i/$(basename \"$i\")\n"
"  if [ -f \"$profile\"/etc/profile ]; then\n"
"    GUIX_PROFILE=\"$profile\"\n"
"    . \"$GUIX_PROFILE\"/etc/profile\n"
"  fi\n"
"  unset profile\n"
"done\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4145
msgid "When a profile is off, it's straightforward to enable it for an individual shell without \"polluting\" the rest of the user session:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4148
#, no-wrap
msgid "GUIX_PROFILE=\"path/to/my-project\" ; . \"$GUIX_PROFILE\"/etc/profile\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4155
msgid "The key to enabling a profile is to @emph{source} its @samp{etc/profile} file.  This file contains shell code that exports the right environment variables necessary to activate the software contained in the profile.  It is built automatically by Guix and meant to be sourced.  It contains the same variables you would get if you ran:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4158
#, no-wrap
msgid "guix package --search-paths=prefix --profile=$my_profile\"\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4162
msgid "Once again, see (@pxref{Invoking guix package,,, guix, GNU Guix Reference Manual})  for the command line options."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4164
msgid "To upgrade a profile, simply install the manifest again:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4168
#, no-wrap
msgid ""
"guix package -m /path/to/guix-my-project-manifest.scm \\\n"
" -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4174
msgid "To upgrade all profiles, it's easy enough to loop over them.  For instance, assuming your manifest specifications are stored in @file{~/.guix-manifests/guix-$profile-manifest.scm}, with @samp{$profile} being the name of the profile (e.g.@: \"project1\"), you could do the following in Bourne shell:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4180
#, no-wrap
msgid ""
"for profile in \"$GUIX_EXTRA_PROFILES\"/*; do\n"
"  guix package --profile=\"$profile\" \\\n"
"   --manifest=\"$HOME/.guix-manifests/guix-$profile-manifest.scm\"\n"
"done\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4183
msgid "Each profile has its own generations:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4186
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --list-generations\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4189
msgid "You can roll-back to any generation of a given profile:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4192
#, no-wrap
msgid "guix package -p \"$GUIX_EXTRA_PROFILES\"/my-project/my-project --switch-generations=17\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4196
msgid "Finally, if you want to switch to a profile without inheriting from the current environment, you can activate it from an empty shell:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4200
#, no-wrap
msgid ""
"env -i $(which bash) --login --noprofile --norc\n"
". my-project/etc/profile\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4208
msgid "Activating a profile essentially boils down to exporting a bunch of environmental variables.  This is the role of the @samp{etc/profile} within the profile."
msgstr ""

#. type: emph{#1}
#: doc/guix-cookbook.texi:4211
msgid "Note: Only the environmental variables of the packages that consume them will be set."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4215
msgid "For instance, @samp{MANPATH} won't be set if there is no consumer application for man pages within the profile.  So if you need to transparently access man pages once the profile is loaded, you've got two options:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4219
msgid "Either export the variable manually, e.g."
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4221
#, no-wrap
msgid "export MANPATH=/path/to/profile$@{MANPATH:+:@}$MANPATH\n"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4225
msgid "Or include @samp{man-db} to the profile manifest."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4229
msgid "The same is true for @samp{INFOPATH} (you can install @samp{info-reader}), @samp{PKG_CONFIG_PATH} (install @samp{pkg-config}), etc."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4234
msgid "What about the default profile that Guix keeps in @file{~/.guix-profile}?"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4237
msgid "You can assign it the role you want.  Typically you would install the manifest of the packages you want to use all the time."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4241
msgid "Alternatively, you could keep it ``manifest-less'' for throw-away packages that you would just use for a couple of days.  This way makes it convenient to run"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4245
#, no-wrap
msgid ""
"guix install package-foo\n"
"guix upgrade package-bar\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4248
msgid "without having to specify the path to a profile."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4256
msgid "Manifests let you @dfn{declare} the set of packages you'd like to have in a profile (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual}).  They are a convenient way to keep your package lists around and, say, to synchronize them across multiple machines using a version control system."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4260
msgid "A common complaint about manifests is that they can be slow to install when they contain large number of packages.  This is especially cumbersome when you just want get an upgrade for one package within a big manifest."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4265
msgid "This is one more reason to use multiple profiles, which happen to be just perfect to break down manifests into multiple sets of semantically connected packages.  Using multiple, small profiles provides more flexibility and usability."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4267
msgid "Manifests come with multiple benefits.  In particular, they ease maintenance:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4275
msgid "When a profile is set up from a manifest, the manifest itself is self-sufficient to keep a ``package listing'' around and reinstall the profile later or on a different system.  For ad-hoc profiles, we would need to generate a manifest specification manually and maintain the package versions for the packages that don't use the default version."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4280
msgid "@code{guix package --upgrade} always tries to update the packages that have propagated inputs, even if there is nothing to do.  Guix manifests remove this problem."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4286
msgid "When partially upgrading a profile, conflicts may arise (due to diverging dependencies between the updated and the non-updated packages) and they can be annoying to resolve manually.  Manifests remove this problem altogether since all packages are always upgraded at once."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4292
msgid "As mentioned above, manifests allow for reproducible profiles, while the imperative @code{guix install}, @code{guix upgrade}, etc. do not, since they produce different profiles every time even when they hold the same packages.  See @uref{https://issues.guix.gnu.org/issue/33285, the related discussion on the matter}."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4300
msgid "Manifest specifications are usable by other @samp{guix} commands.  For example, you can run @code{guix weather -m manifest.scm} to see how many substitutes are available, which can help you decide whether you want to try upgrading today or wait a while.  Another example: you can run @code{guix pack -m manifest.scm} to create a pack containing all the packages in the manifest (and their transitive references)."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4304
msgid "Finally, manifests have a Scheme representation, the @samp{<manifest>} record type.  They can be manipulated in Scheme and passed to the various Guix @uref{https://en.wikipedia.org/wiki/Api, APIs}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4315
msgid "It's important to understand that while manifests can be used to declare profiles, they are not strictly equivalent: profiles have the side effect that they ``pin'' packages in the store, which prevents them from being garbage-collected (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual})  and ensures that they will still be available at any point in the future.  The @command{guix shell} command also protects recently-used profiles from garbage collection; profiles that have not been used for a while may be garbage-collected though, along with the packages they refer to."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4320
msgid "To be 100% sure that a given profile will never be collected, install the manifest to a profile and use @code{GUIX_PROFILE=/the/profile; . \"$GUIX_PROFILE\"/etc/profile} as explained above: this guarantees that our hacking environment will be available at all times."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4323
msgid "@emph{Security warning:} While keeping old profiles around can be convenient, keep in mind that outdated packages may not have received the latest security fixes."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4328
msgid "To reproduce a profile bit-for-bit, we need two pieces of information:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4332
msgid "a manifest (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual});"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4335
msgid "a Guix channel specification (@pxref{Replicating Guix,,, guix, GNU Guix Reference Manual})."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4339
msgid "Indeed, manifests alone might not be enough: different Guix versions (or different channels) can produce different outputs for a given manifest."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4344
msgid "You can output the Guix channel specification with @samp{guix describe --format=channels} (@pxref{Invoking guix describe,,, guix, GNU Guix Reference Manual}).  Save this to a file, say @samp{channel-specs.scm}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4347
msgid "On another computer, you can use the channel specification file and the manifest to reproduce the exact same profile:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4351
#, no-wrap
msgid ""
"GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles\n"
"GUIX_EXTRA=$HOME/.guix-extra\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4354
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA\"/my-project\n"
"guix pull --channels=channel-specs.scm --profile=\"$GUIX_EXTRA/my-project/guix\"\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4359
#, no-wrap
msgid ""
"mkdir -p \"$GUIX_EXTRA_PROFILES/my-project\"\n"
"\"$GUIX_EXTRA\"/my-project/guix/bin/guix package \\\n"
" --manifest=/path/to/guix-my-project-manifest.scm \\\n"
" --profile=\"$GUIX_EXTRA_PROFILES\"/my-project/my-project\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4363
msgid "It's safe to delete the Guix channel profile you've just installed with the channel specification, the project profile does not depend on it."
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:4367
#, no-wrap
msgid "development, with Guix"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:4368
#, no-wrap
msgid "software development, with Guix"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4378
msgid "Guix is a handy tool for developers; @command{guix shell}, in particular, gives a standalone development environment for your package, no matter what language(s) it's written in (@pxref{Invoking guix shell,,, guix, GNU Guix Reference Manual}).  To benefit from it, you have to initially write a package definition and have it either in Guix proper, or in a channel, or directly in your project's source tree as a @file{guix.scm} file.  This last option is appealing: all developers have to do to get set up is clone the project's repository and run @command{guix shell}, with no arguments."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4388
msgid "Development needs go beyond development environments though.  How can developers perform continuous integration of their code in Guix build environments? How can they deliver their code straight to adventurous users? This chapter describes a set of files developers can add to their repository to set up Guix-based development environments, continuous integration, and continuous delivery---all at once@footnote{This chapter is adapted from a @uref{https://guix.gnu.org/en/blog/2023/from-development-environments-to-continuous-integrationthe-ultimate-guide-to-software-development-with-guix/, blog post} published in June 2023 on the Guix web site.}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4411
msgid "How do we go about ``Guixifying'' a repository? The first step, as we've seen, will be to add a @file{guix.scm} at the root of the repository in question. We'll take @uref{https://www.gnu.org/software/guile,Guile} as an example in this chapter: it's written in Scheme (mostly) and C, and has a number of dependencies---a C compilation tool chain, C libraries, Autoconf and its friends, LaTeX, and so on. The resulting @file{guix.scm} looks like the usual package definition (@pxref{Defining Packages,,, guix, GNU Guix Reference Manual}), just without the @code{define-public} bit:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4414
#, no-wrap
msgid ""
";; The ‘guix.scm’ file for Guile, for use by ‘guix shell’.\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4435
#, no-wrap
msgid ""
"(use-modules (guix)\n"
"             (guix build-system gnu)\n"
"             ((guix licenses) #:prefix license:)\n"
"             (gnu packages autotools)\n"
"             (gnu packages base)\n"
"             (gnu packages bash)\n"
"             (gnu packages bdw-gc)\n"
"             (gnu packages compression)\n"
"             (gnu packages flex)\n"
"             (gnu packages gdb)\n"
"             (gnu packages gettext)\n"
"             (gnu packages gperf)\n"
"             (gnu packages libffi)\n"
"             (gnu packages libunistring)\n"
"             (gnu packages linux)\n"
"             (gnu packages pkg-config)\n"
"             (gnu packages readline)\n"
"             (gnu packages tex)\n"
"             (gnu packages texinfo)\n"
"             (gnu packages version-control))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4457
#, no-wrap
msgid ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ;funky version number\n"
"  (source #f)                                     ;no source\n"
"  (build-system gnu-build-system)\n"
"  (native-inputs\n"
"   (append (list autoconf\n"
"                 automake\n"
"                 libtool\n"
"                 gnu-gettext\n"
"                 flex\n"
"                 texinfo\n"
"                 texlive-base                 ;for \"make pdf\"\n"
"                 texlive-epsf\n"
"                 gperf\n"
"                 git\n"
"                 gdb\n"
"                 strace\n"
"                 readline\n"
"                 lzip\n"
"                 pkg-config)\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4467
#, no-wrap
msgid ""
"           ;; When cross-compiling, a native version of Guile itself is\n"
"           ;; needed.\n"
"           (if (%current-target-system)\n"
"               (list this-package)\n"
"               '())))\n"
"  (inputs\n"
"   (list libffi bash-minimal))\n"
"  (propagated-inputs\n"
"   (list libunistring libgc))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4481
#, no-wrap
msgid ""
"  (native-search-paths\n"
"   (list (search-path-specification\n"
"          (variable \"GUILE_LOAD_PATH\")\n"
"          (files '(\"share/guile/site/3.0\")))\n"
"         (search-path-specification\n"
"          (variable \"GUILE_LOAD_COMPILED_PATH\")\n"
"          (files '(\"lib/guile/3.0/site-ccache\")))))\n"
"  (synopsis \"Scheme implementation intended especially for extensions\")\n"
"  (description\n"
"   \"Guile is the GNU Ubiquitous Intelligent Language for Extensions,\n"
"and it's actually a full-blown Scheme implementation!\")\n"
"  (home-page \"https://www.gnu.org/software/guile/\")\n"
"  (license license:lgpl3+))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4485
msgid "Quite a bit of boilerplate, but now someone who'd like to hack on Guile now only needs to run:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4488
#, no-wrap
msgid "guix shell\n"
msgstr "guix shell\n"

#. type: Plain text
#: doc/guix-cookbook.texi:4494
msgid "That gives them a shell containing all the dependencies of Guile: those listed above, but also @emph{implicit dependencies} such as the GCC tool chain, GNU@ Make, sed, grep, and so on.  @xref{Invoking guix shell,,, guix, GNU Guix Reference Manual}, for more info on @command{guix shell}."
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:4495
#, no-wrap
msgid "The chef's recommendation"
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:4497
msgid "Our suggestion is to create development environments like this:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4500
#, no-wrap
msgid "guix shell --container --link-profile\n"
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:4504
msgid "... or, for short:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4507
#, no-wrap
msgid "guix shell -CP\n"
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:4517
msgid "That gives a shell in an isolated container, and all the dependencies show up in @code{$HOME/.guix-profile}, which plays well with caches such as @file{config.cache} (@pxref{Cache Files,,, autoconf, Autoconf}) and absolute file names recorded in generated @code{Makefile}s and the likes. The fact that the shell runs in a container brings peace of mind: nothing but the current directory and Guile's dependencies is visible inside the container; nothing from the system can possibly interfere with your development."
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:4520
#, no-wrap
msgid "Level 1: Building with Guix"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4527
msgid "Now that we have a package definition (@pxref{Getting Started}), why not also take advantage of it so we can build Guile with Guix? We had left the @code{source} field empty, because @command{guix shell} above only cares about the @emph{inputs} of our package---so it can set up the development environment---not about the package itself."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4530
msgid "To build the package with Guix, we'll need to fill out the @code{source} field, along these lines:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4535
#, no-wrap
msgid ""
"(use-modules (guix)\n"
"             (guix git-download)  ;for ‘git-predicate’\n"
"             @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4540
#, no-wrap
msgid ""
"(define vcs-file?\n"
"  ;; Return true if the given file is under version control.\n"
"  (or (git-predicate (current-source-directory))\n"
"      (const #t)))                                ;not in a Git checkout\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4548
#, no-wrap
msgid ""
"(package\n"
"  (name \"guile\")\n"
"  (version \"3.0.99-git\")                          ;funky version number\n"
"  (source (local-file \".\" \"guile-checkout\"\n"
"                      #:recursive? #t\n"
"                      #:select? vcs-file?))\n"
"  @dots{})\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4551
msgid "Here's what we changed compared to the previous section:"
msgstr ""

#. type: enumerate
#: doc/guix-cookbook.texi:4556
msgid "We added @code{(guix git-download)} to our set of imported modules, so we can use its @code{git-predicate} procedure."
msgstr ""

#. type: enumerate
#: doc/guix-cookbook.texi:4560
msgid "We defined @code{vcs-file?} as a procedure that returns true when passed a file that is under version control. For good measure, we add a fallback case for when we're not in a Git checkout: always return true."
msgstr ""

#. type: enumerate
#: doc/guix-cookbook.texi:4565
msgid "We set @code{source} to a @uref{https://guix.gnu.org/manual/devel/en/html_node/G_002dExpressions.html#index-local_002dfile,@code{local-file}}---a recursive copy of the current directory (@code{\".\"}), limited to files under version control (the @code{#:select?} bit)."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4572
msgid "From there on, our @file{guix.scm} file serves a second purpose: it lets us build the software with Guix. The whole point of building with Guix is that it's a ``clean'' build---you can be sure nothing from your working tree or system interferes with the build result---and it lets you test a variety of things. First, you can do a plain native build:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4575
#, no-wrap
msgid "guix build -f guix.scm\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4582
msgid "But you can also build for another system (possibly after setting up @pxref{Daemon Offload Setup, offloading,, guix, GNU Guix Reference Manual} or @pxref{Virtualization Services, transparent emulation,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4585
#, no-wrap
msgid "guix build -f guix.scm -s aarch64-linux -s riscv64-linux\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4589
msgid "@dots{} or cross-compile:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4592
#, no-wrap
msgid "guix build -f guix.scm --target=x86_64-w64-mingw32\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4596
msgid "You can also use @dfn{package transformations} to test package variants (@pxref{Package Transformation Options,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4601
#, no-wrap
msgid ""
"# What if we built with Clang instead of GCC?\n"
"guix build -f guix.scm \\\n"
"  --with-c-toolchain=guile@@3.0.99-git=clang-toolchain\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4605
#, no-wrap
msgid ""
"# What about that under-tested configure flag?\n"
"guix build -f guix.scm \\\n"
"  --with-configure-flag=guile@@3.0.99-git=--disable-networking\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4608
msgid "Handy!"
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:4610
#, no-wrap
msgid "Level 2: The Repository as a Channel"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4617
msgid "We now have a Git repository containing (among other things) a package definition (@pxref{Building with Guix}).  Can't we turn it into a @dfn{channel} (@pxref{Channels,,, guix, GNU Guix Reference Manual})? After all, channels are designed to ship package definitions to users, and that's exactly what we're doing with our @file{guix.scm}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4624
msgid "Turns out we can indeed turn it into a channel, but with one caveat: we must create a separate directory for the @code{.scm} file(s) of our channel so that @command{guix pull} doesn't load unrelated @code{.scm} files when someone pulls the channel---and in Guile, there are lots of them! So we'll start like this, keeping a top-level @file{guix.scm} symlink for the sake of @command{guix shell}:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4629
#, no-wrap
msgid ""
"mkdir -p .guix/modules\n"
"mv guix.scm .guix/modules/guile-package.scm\n"
"ln -s .guix/modules/guile-package.scm guix.scm\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4640
msgid "To make it usable as part of a channel, we need to turn our @file{guix.scm} file into a @dfn{package module} (@pxref{Package Modules,,, guix, GNU Guix Reference Manual}): we do that by changing the @code{use-modules} form at the top to a @code{define-module} form. We also need to actually @emph{export} a package variable, with @code{define-public}, while still returning the package value at the end of the file so we can still use @command{guix shell} and @command{guix build -f guix.scm}. The end result looks like this (not repeating things that haven't changed):"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4646
#, no-wrap
msgid ""
"(define-module (guile-package)\n"
"  #:use-module (guix)\n"
"  #:use-module (guix git-download)   ;for ‘git-predicate’\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4651
#, no-wrap
msgid ""
"(define vcs-file?\n"
"  ;; Return true if the given file is under version control.\n"
"  (or (git-predicate (dirname (dirname (current-source-directory))))\n"
"      (const #t)))                                ;not in a Git checkout\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4660
#, no-wrap
msgid ""
"(define-public guile\n"
"  (package\n"
"    (name \"guile\")\n"
"    (version \"3.0.99-git\")                          ;funky version number\n"
"    (source (local-file \"../..\" \"guile-checkout\"\n"
"                        #:recursive? #t\n"
"                        #:select? vcs-file?))\n"
"    @dots{}))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4663
#, no-wrap
msgid ""
";; Return the package object define above at the end of the module.\n"
"guile\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4668
msgid "We need one last thing: a @uref{https://guix.gnu.org/manual/devel/en/html_node/Package-Modules-in-a-Sub_002ddirectory.html,@code{.guix-channel} file} so Guix knows where to look for package modules in our repository:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4671
#, no-wrap
msgid ""
";; This file lets us present this repo as a Guix channel.\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4675
#, no-wrap
msgid ""
"(channel\n"
"  (version 0)\n"
"  (directory \".guix/modules\"))  ;look for package modules under .guix/modules/\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4678
msgid "To recap, we now have these files:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4686
#, no-wrap
msgid ""
".\n"
"├── .guix-channel\n"
"├── guix.scm → .guix/modules/guile-package.scm\n"
"└── .guix\n"
"    └── modules\n"
"       └── guile-package.scm\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4695
msgid "And that's it: we have a channel! (We could do better and support @uref{https://guix.gnu.org/manual/devel/en/html_node/Specifying-Channel-Authorizations.html,@emph{channel authentication}} so users know they're pulling genuine code. We'll spare you the details here but it's worth considering!) Users can pull from this channel by @uref{https://guix.gnu.org/manual/devel/en/html_node/Specifying-Additional-Channels.html,adding it to @code{~/.config/guix/channels.scm}}, along these lines:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4702
#, no-wrap
msgid ""
"(append (list (channel\n"
"                (name 'guile)\n"
"                (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                (branch \"main\")))\n"
"        %default-channels)\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4705
msgid "After running @command{guix pull}, we can see the new package:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4727
#, no-wrap
msgid ""
"$ guix describe\n"
"Generation 264  May 26 2023 16:00:35    (current)\n"
"  guile 36fd2b4\n"
"    repository URL: https://git.savannah.gnu.org/git/guile.git\n"
"    branch: main\n"
"    commit: 36fd2b4920ae926c79b936c29e739e71a6dff2bc\n"
"  guix c5bc698\n"
"    repository URL: https://git.savannah.gnu.org/git/guix.git\n"
"    commit: c5bc698e8922d78ed85989985cc2ceb034de2f23\n"
"$ guix package -A ^guile$\n"
"guile   3.0.99-git      out,debug       guile-package.scm:51:4\n"
"guile   3.0.9           out,debug       gnu/packages/guile.scm:317:2\n"
"guile   2.2.7           out,debug       gnu/packages/guile.scm:258:2\n"
"guile   2.2.4           out,debug       gnu/packages/guile.scm:304:2\n"
"guile   2.0.14          out,debug       gnu/packages/guile.scm:148:2\n"
"guile   1.8.8           out             gnu/packages/guile.scm:77:2\n"
"$ guix build guile@@3.0.99-git\n"
"[@dots{}]\n"
"/gnu/store/axnzbl89yz7ld78bmx72vpqp802dwsar-guile-3.0.99-git-debug\n"
"/gnu/store/r34gsij7f0glg2fbakcmmk0zn4v62s5w-guile-3.0.99-git\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4732
msgid "That's how, as a developer, you get your software delivered directly into the hands of users! No intermediaries, yet no loss of transparency and provenance tracking."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4736
msgid "With that in place, it also becomes trivial for anyone to create Docker images, Deb/RPM packages, or a plain tarball with @command{guix pack} (@pxref{Invoking guix pack,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4740
#, no-wrap
msgid ""
"# How about a Docker image of our Guile snapshot?\n"
"guix pack -f docker -S /bin=bin guile@@3.0.99-git\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:4743
#, no-wrap
msgid ""
"# And a relocatable RPM?\n"
"guix pack -f rpm -R -S /bin=bin guile@@3.0.99-git\n"
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:4746
#, no-wrap
msgid "Bonus: Package Variants"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4754
msgid "We now have an actual channel, but it contains only one package (@pxref{The Repository as a Channel}).  While we're at it, we can define @dfn{package variants} (@pxref{Defining Package Variants,,, guix, GNU Guix Reference Manual}) in our @file{guile-package.scm} file, variants that we want to be able to test as Guile developers---similar to what we did above with transformation options. We can add them like so:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4757
#, no-wrap
msgid ""
";; This is the ‘.guix/modules/guile-package.scm’ file.\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4760
#, no-wrap
msgid ""
"(define-module (guile-package)\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4763
#, no-wrap
msgid ""
"(define-public guile\n"
"  @dots{})\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4771
#, no-wrap
msgid ""
"(define (package-with-configure-flags p flags)\n"
"  \"Return P with FLAGS as additional 'configure' flags.\"\n"
"  (package/inherit p\n"
"    (arguments\n"
"     (substitute-keyword-arguments (package-arguments p)\n"
"       ((#:configure-flags original-flags #~(list))\n"
"        #~(append #$original-flags #$flags))))))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4777
#, no-wrap
msgid ""
"(define-public guile-without-threads\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--without-threads\")))\n"
"    (name \"guile-without-threads\")))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4783
#, no-wrap
msgid ""
"(define-public guile-without-networking\n"
"  (package\n"
"    (inherit (package-with-configure-flags guile\n"
"                                           #~(list \"--disable-networking\")))\n"
"    (name \"guile-without-networking\")))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4787
#, no-wrap
msgid ""
";; Return the package object defined above at the end of the module.\n"
"guile\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4792
msgid "We can build these variants as regular packages once we've pulled the channel. Alternatively, from a checkout of Guile, we can run a command like this one from the top level:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4795
#, no-wrap
msgid "guix build -L $PWD/.guix/modules guile-without-threads\n"
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:4798
#, no-wrap
msgid "Level 3: Setting Up Continuous Integration"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:4800
#, no-wrap
msgid "continuous integration (CI)"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4805
msgid "The channel we defined above (@pxref{The Repository as a Channel})  becomes even more interesting once we set up @uref{https://en.wikipedia.org/wiki/Continuous_integration, @dfn{continuous integration}} (CI). There are several ways to do that."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4811
msgid "You can use one of the mainstream continuous integration tools, such as GitLab-CI. To do that, you need to make sure you run jobs in a Docker image or virtual machine that has Guix installed. If we were to do that in the case of Guile, we'd have a job that runs a shell command like this one:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4814
#, no-wrap
msgid "guix build -L $PWD/.guix/modules guile@@3.0.99-git\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4818
msgid "Doing this works great and has the advantage of being easy to achieve on your favorite CI platform."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4827
msgid "That said, you'll really get the most of it by using @uref{https://guix.gnu.org/en/cuirass,Cuirass}, a CI tool designed for and tightly integrated with Guix. Using it is more work than using a hosted CI tool because you first need to set it up, but that setup phase is greatly simplified if you use its Guix System service (@pxref{Continuous Integration,,, guix, GNU Guix Reference Manual}).  Going back to our example, we give Cuirass a spec file that goes like this:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4839
#, no-wrap
msgid ""
";; Cuirass spec file to build all the packages of the ‘guile’ channel.\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(channels guile))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4842
msgid "It differs from what you'd do with other CI tools in two important ways:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4851
msgid "Cuirass knows it's tracking @emph{two} channels, @code{guile} and @code{guix}. Indeed, our own @code{guile} package depends on many packages provided by the @code{guix} channel---GCC, the GNU libc, libffi, and so on. Changes to packages from the @code{guix} channel can potentially influence our @code{guile} build and this is something we'd like to see as soon as possible as Guile developers."
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4856
msgid "Build results are not thrown away: they can be distributed as @dfn{substitutes} so that users of our @code{guile} channel transparently get pre-built binaries! (@pxref{Substitutes,,, guix, GNU Guix Reference Manual}, for background info on substitutes.)"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4864
msgid "From a developer's viewpoint, the end result is this @uref{https://ci.guix.gnu.org/jobset/guile,status page} listing @emph{evaluations}: each evaluation is a combination of commits of the @code{guix} and @code{guile} channels providing a number of @emph{jobs}---one job per package defined in @file{guile-package.scm} times the number of target architectures."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4871
msgid "As for substitutes, they come for free! As an example, since our @code{guile} jobset is built on ci.guix.gnu.org, which runs @command{guix publish} (@pxref{Invoking guix publish,,, guix, GNU Guix Reference Manual}) in addition to Cuirass, one automatically gets substitutes for @code{guile} builds from ci.guix.gnu.org; no additional work is needed for that."
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:4873
#, no-wrap
msgid "Bonus: Build manifest"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4880
msgid "The Cuirass spec above is convenient: it builds every package in our channel, which includes a few variants (@pxref{Setting Up Continuous Integration}).  However, this might be insufficiently expressive in some cases: one might want specific cross-compilation jobs, transformations, Docker images, RPM/Deb packages, or even system tests."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4885
msgid "To achieve that, you can write a @dfn{manifest} (@pxref{Writing Manifests,,, guix, GNU Guix Reference Manual}).  The one we have for Guile has entries for the package variants we defined above, as well as additional variants and cross builds:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4888
#, no-wrap
msgid ""
";; This is ‘.guix/manifest.scm’.\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4892
#, no-wrap
msgid ""
"(use-modules (guix)\n"
"             (guix profiles)\n"
"             (guile-package))   ;import our own package module\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4906
#, no-wrap
msgid ""
"(define* (package->manifest-entry* package system\n"
"                                   #:key target)\n"
"  \"Return a manifest entry for PACKAGE on SYSTEM, optionally cross-compiled to\n"
"TARGET.\"\n"
"  (manifest-entry\n"
"    (inherit (package->manifest-entry package))\n"
"    (name (string-append (package-name package) \".\" system\n"
"                         (if target\n"
"                             (string-append \".\" target)\n"
"                             \"\")))\n"
"    (item (with-parameters ((%current-system system)\n"
"                            (%current-target-system target))\n"
"            package))))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4911
#, no-wrap
msgid ""
"(define native-builds\n"
"  (manifest\n"
"   (append (map (lambda (system)\n"
"                  (package->manifest-entry* guile system))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4928
#, no-wrap
msgid ""
"                '(\"x86_64-linux\" \"i686-linux\"\n"
"                  \"aarch64-linux\" \"armhf-linux\"\n"
"                  \"powerpc64le-linux\"))\n"
"           (map (lambda (guile)\n"
"                  (package->manifest-entry* guile \"x86_64-linux\"))\n"
"                (cons (package\n"
"                        (inherit (package-with-c-toolchain\n"
"                                  guile\n"
"                                  `((\"clang-toolchain\"\n"
"                                     ,(specification->package\n"
"                                       \"clang-toolchain\")))))\n"
"                        (name \"guile-clang\"))\n"
"                      (list guile-without-threads\n"
"                            guile-without-networking\n"
"                            guile-debug\n"
"                            guile-strict-typing))))))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4939
#, no-wrap
msgid ""
"(define cross-builds\n"
"  (manifest\n"
"   (map (lambda (target)\n"
"          (package->manifest-entry* guile \"x86_64-linux\"\n"
"                                    #:target target))\n"
"        '(\"i586-pc-gnu\"\n"
"          \"aarch64-linux-gnu\"\n"
"          \"riscv64-linux-gnu\"\n"
"          \"i686-w64-mingw32\"\n"
"          \"x86_64-linux-gnu\"))))\n"
"\n"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4941
#, no-wrap
msgid "(concatenate-manifests (list native-builds cross-builds))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4947
msgid "We won't go into the details of this manifest; suffice to say that it provides additional flexibility. We now need to tell Cuirass to build this manifest, which is done with a spec slightly different from the previous one:"
msgstr ""

#. type: lisp
#: doc/guix-cookbook.texi:4959
#, no-wrap
msgid ""
";; Cuirass spec file to build all the packages of the ‘guile’ channel.\n"
"(list (specification\n"
"        (name \"guile\")\n"
"        (build '(manifest \".guix/manifest.scm\"))\n"
"        (channels\n"
"         (append (list (channel\n"
"                         (name 'guile)\n"
"                         (url \"https://git.savannah.gnu.org/git/guile.git\")\n"
"                         (branch \"main\")))\n"
"                 %default-channels))))\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4964
msgid "We changed the @code{(build @dots{})} part of the spec to @code{'(manifest \".guix/manifest.scm\")} so that it would pick our manifest, and that's it!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4970
msgid "We picked Guile as the running example in this chapter and you can see the result here:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4974
msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix-channel?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix-channel}};"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4977
msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/modules/guile-package.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/modules/guile-package.scm}} with the top-level @file{guix.scm} symlink;"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4979
msgid "@uref{https://git.savannah.gnu.org/cgit/guile.git/tree/.guix/manifest.scm?id=cd57379b3df636198d8cd8e76c1bfbc523762e79,@code{.guix/manifest.scm}}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4988
msgid "These days, repositories are commonly peppered with dot files for various tools: @code{.envrc}, @code{.gitlab-ci.yml}, @code{.github/workflows}, @code{Dockerfile}, @code{.buildpacks}, @code{Aptfile}, @code{requirements.txt}, and whatnot. It may sound like we're proposing a bunch of @emph{additional} files, but in fact those files are expressive enough to @emph{supersede} most or all of those listed above."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:4990
msgid "With a couple of files, we get support for:"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4994
msgid "development environments (@command{guix shell});"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4997
msgid "pristine test builds, including for package variants and for cross-compilation (@command{guix build});"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:4999
msgid "continuous integration (with Cuirass or with some other tool);"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:5002
msgid "continuous delivery to users (@emph{via} the channel and with pre-built binaries);"
msgstr ""

#. type: itemize
#: doc/guix-cookbook.texi:5005
msgid "generation of derivative build artifacts such as Docker images or Deb/RPM packages (@command{guix pack})."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5010
msgid "This a nice (in our view!) unified tool set for reproducible software deployment, and an illustration of how you as a developer can benefit from it!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5018
msgid "Guix provides multiple tools to manage environment.  This chapter demonstrate such utilities."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5029
msgid "Guix provides a @samp{direnv} package, which could extend shell after directory change.  This tool could be used to prepare a pure Guix environment."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5035
msgid "The following example provides a shell function for @file{~/.direnvrc} file, which could be used from Guix Git repository in @file{~/src/guix/.envrc} file to setup a build environment similar to described in @pxref{Building from Git,,, guix, GNU Guix Reference Manual}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5037
msgid "Create a @file{~/.direnvrc} with a Bash code:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5055
#, no-wrap
msgid ""
"# Thanks <https://github.com/direnv/direnv/issues/73#issuecomment-152284914>\n"
"export_function()\n"
"@{\n"
"  local name=$1\n"
"  local alias_dir=$PWD/.direnv/aliases\n"
"  mkdir -p \"$alias_dir\"\n"
"  PATH_add \"$alias_dir\"\n"
"  local target=\"$alias_dir/$name\"\n"
"  if declare -f \"$name\" >/dev/null; then\n"
"    echo \"#!$SHELL\" > \"$target\"\n"
"    declare -f \"$name\" >> \"$target\" 2>/dev/null\n"
"    # Notice that we add shell variables to the function trigger.\n"
"    echo \"$name \\$*\" >> \"$target\"\n"
"    chmod +x \"$target\"\n"
"  fi\n"
"@}\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5060
#, no-wrap
msgid ""
"use_guix()\n"
"@{\n"
"    # Set GitHub token.\n"
"    export GUIX_GITHUB_TOKEN=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5063
#, no-wrap
msgid ""
"    # Unset 'GUIX_PACKAGE_PATH'.\n"
"    export GUIX_PACKAGE_PATH=\"\"\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5072
#, no-wrap
msgid ""
"    # Recreate a garbage collector root.\n"
"    gcroots=\"$HOME/.config/guix/gcroots\"\n"
"    mkdir -p \"$gcroots\"\n"
"    gcroot=\"$gcroots/guix\"\n"
"    if [ -L \"$gcroot\" ]\n"
"    then\n"
"        rm -v \"$gcroot\"\n"
"    fi\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5087
#, no-wrap
msgid ""
"    # Miscellaneous packages.\n"
"    PACKAGES_MAINTENANCE=(\n"
"        direnv\n"
"        git\n"
"        git:send-email\n"
"        git-cal\n"
"        gnupg\n"
"        guile-colorized\n"
"        guile-readline\n"
"        less\n"
"        ncurses\n"
"        openssh\n"
"        xdot\n"
"    )\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5090
#, no-wrap
msgid ""
"    # Environment packages.\n"
"    PACKAGES=(help2man guile-sqlite3 guile-gcrypt)\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5094
#, no-wrap
msgid ""
"    # Thanks <https://lists.gnu.org/archive/html/guix-devel/2016-09/msg00859.html>\n"
"    eval \"$(guix shell --search-paths --root=\"$gcroot\" --pure \\\n"
"     --development guix $@{PACKAGES[@@]@} $@{PACKAGES_MAINTENANCE[@@]@} \"$@@\")\"\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5101
#, no-wrap
msgid ""
"    # Predefine configure flags.\n"
"    configure()\n"
"    @{\n"
"        ./configure\n"
"    @}\n"
"    export_function configure\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5112
#, no-wrap
msgid ""
"    # Run make and optionally build something.\n"
"    build()\n"
"    @{\n"
"        make -j 2\n"
"        if [ $# -gt 0 ]\n"
"        then\n"
"            ./pre-inst-env guix build \"$@@\"\n"
"        fi\n"
"    @}\n"
"    export_function build\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5119
#, no-wrap
msgid ""
"    # Predefine push Git command.\n"
"    push()\n"
"    @{\n"
"        git push --set-upstream origin\n"
"    @}\n"
"    export_function push\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5122
#, no-wrap
msgid ""
"    clear                        # Clean up the screen.\n"
"    git-cal --author='Your Name' # Show contributions calendar.\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5130
#, no-wrap
msgid ""
"    # Show commands help.\n"
"    echo \"\n"
"build          build a package or just a project if no argument provided\n"
"configure      run ./configure with predefined parameters\n"
"push           push to upstream Git repository\n"
"\"\n"
"@}\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5134
msgid "Every project containing @file{.envrc} with a string @code{use guix} will have predefined environment variables and procedures."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5136
msgid "Run @command{direnv allow} to setup the environment for the first time."
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:5142
#, fuzzy, no-wrap
#| msgid "System administration"
msgid "cluster installation"
msgstr "Administração de Sistemas"

#. type: cindex
#: doc/guix-cookbook.texi:5143
#, no-wrap
msgid "high-performance computing, HPC"
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:5144
#, no-wrap
msgid "HPC, high-performance computing"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5150
msgid "Guix is appealing to scientists and @acronym{HPC, high-performance computing} practitioners: it makes it easy to deploy potentially complex software stacks, and it lets you do so in a reproducible fashion---you can redeploy the exact same software on different machines and at different points in time."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5156
msgid "In this chapter we look at how a cluster sysadmin can install Guix for system-wide use, such that it can be used on all the cluster nodes, and discuss the various tradeoffs@footnote{This chapter is adapted from a @uref{https://hpc.guix.info/blog/2017/11/installing-guix-on-a-cluster/, blog post published on the Guix-HPC web site in 2017}.}."
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:5160
msgid "Here we assume that the cluster is running a GNU/Linux distro other than Guix System and that we are going to install Guix on top of it."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5176
msgid "The recommended approach is to set up one @emph{head node} running @command{guix-daemon} and exporting @file{/gnu/store} over NFS to compute nodes."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5186
msgid "Remember that @command{guix-daemon} is responsible for spawning build processes and downloads on behalf of clients (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}), and more generally accessing @file{/gnu/store}, which contains all the package binaries built by all the users (@pxref{The Store,,, guix, GNU Guix Reference Manual}).  ``Client'' here refers to all the Guix commands that users see, such as @code{guix install}.  On a cluster, these commands may be running on the compute nodes and we'll want them to talk to the head node's @code{guix-daemon} instance."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5191
msgid "To begin with, the head node can be installed following the usual binary installation instructions (@pxref{Binary Installation,,, guix, GNU Guix Reference Manual}).  Thanks to the installation script, this should be quick.  Once installation is complete, we need to make some adjustments."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5199
msgid "Since we want @code{guix-daemon} to be reachable not just from the head node but also from the compute nodes, we need to arrange so that it listens for connections over TCP/IP.  To do that, we'll edit the systemd startup file for @command{guix-daemon}, @file{/etc/systemd/system/guix-daemon.service}, and add a @code{--listen} argument to the @code{ExecStart} line so that it looks something like this:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5208
#, no-wrap
msgid ""
"ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon \\\n"
"    --build-users-group=guixbuild \\\n"
"    --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5213
#, no-wrap
msgid "ExecStart=/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon --build-users-group=guixbuild --listen=/var/guix/daemon-socket/socket --listen=0.0.0.0\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5217
msgid "For these changes to take effect, the service needs to be restarted:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5221
#, no-wrap
msgid ""
"systemctl daemon-reload\n"
"systemctl restart guix-daemon\n"
msgstr ""

#. type: quotation
#: doc/guix-cookbook.texi:5230
msgid "The @code{--listen=0.0.0.0} bit means that @code{guix-daemon} will process @emph{all} incoming TCP connections on port 44146 (@pxref{Invoking guix-daemon,,, guix, GNU Guix Reference Manual}). This is usually fine in a cluster setup where the head node is reachable exclusively from the cluster's local area network---you don't want that to be exposed to the Internet!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5235
msgid "The next step is to define our NFS exports in @uref{https://linux.die.net/man/5/exports,@file{/etc/exports}} by adding something along these lines:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5240
#, no-wrap
msgid ""
"/gnu/store    *(ro)\n"
"/var/guix     *(rw, async)\n"
"/var/log/guix *(ro)\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5247
msgid "The @file{/gnu/store} directory can be exported read-only since only @command{guix-daemon} on the master node will ever modify it.  @file{/var/guix} contains @emph{user profiles} as managed by @code{guix package}; thus, to allow users to install packages with @code{guix package}, this must be read-write."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5257
msgid "Users can create as many profiles as they like in addition to the default profile, @file{~/.guix-profile}.  For instance, @code{guix package -p ~/dev/python-dev -i python} installs Python in a profile reachable from the @code{~/dev/python-dev} symlink.  To make sure that this profile is protected from garbage collection---i.e., that Python will not be removed from @file{/gnu/store} while this profile exists---, @emph{home directories should be mounted on the head node} as well so that @code{guix-daemon} knows about these non-standard profiles and avoids collecting software they refer to."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5262
msgid "It may be a good idea to periodically remove unused bits from @file{/gnu/store} by running @command{guix gc} (@pxref{Invoking guix gc,,, guix, GNU Guix Reference Manual}).  This can be done by adding a crontab entry on the head node:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5265
#, no-wrap
msgid "root@@master# crontab -e\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5269
msgid "... with something like this:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5274
#, no-wrap
msgid ""
"# Every day at 5AM, run the garbage collector to make sure\n"
"# at least 10 GB are free on /gnu/store.\n"
"0 5 * * 1  /usr/local/bin/guix gc -F10G\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5277
msgid "We're done with the head node! Let's look at compute nodes now."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5284
msgid "First of all, we need compute nodes to mount those NFS directories that the head node exports.  This can be done by adding the following lines to @uref{https://linux.die.net/man/5/fstab,@file{/etc/fstab}}:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5289
#, no-wrap
msgid ""
"@var{head-node}:/gnu/store    /gnu/store    nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/guix     /var/guix     nfs  defaults,_netdev,vers=3 0 0\n"
"@var{head-node}:/var/log/guix /var/log/guix nfs  defaults,_netdev,vers=3 0 0\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5295
msgid "... where @var{head-node} is the name or IP address of your head node.  From there on, assuming the mount points exist, you should be able to mount each of these on the compute nodes."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5301
msgid "Next, we need to provide a default @command{guix} command that users can run when they first connect to the cluster (eventually they will invoke @command{guix pull}, which will provide them with their ``own'' @command{guix} command).  Similar to what the binary installation script did on the head node, we'll store that in @file{/usr/local/bin}:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5306
#, no-wrap
msgid ""
"mkdir -p /usr/local/bin\n"
"ln -s /var/guix/profiles/per-user/root/current-guix/bin/guix \\\n"
"      /usr/local/bin/guix\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5310
msgid "We then need to tell @code{guix} to talk to the daemon running on our master node, by adding these lines to @code{/etc/profile}:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5314
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=\"guix://@var{head-node}\"\n"
"export GUIX_DAEMON_SOCKET\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5319
msgid "To avoid warnings and make sure @code{guix} uses the right locale, we need to tell it to use locale data provided by Guix (@pxref{Application Setup,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5323
#, no-wrap
msgid ""
"GUIX_LOCPATH=/var/guix/profiles/per-user/root/guix-profile/lib/locale\n"
"export GUIX_LOCPATH\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5328
#, no-wrap
msgid ""
"# Here we must use a valid locale name.  Try \"ls $GUIX_LOCPATH/*\"\n"
"# to see what names can be used.\n"
"LC_ALL=fr_FR.utf8\n"
"export LC_ALL\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5336
msgid "For convenience, @code{guix package} automatically generates @file{~/.guix-profile/etc/profile}, which defines all the environment variables necessary to use the packages---@code{PATH}, @code{C_INCLUDE_PATH}, @code{PYTHONPATH}, etc.  Likewise, @command{guix pull} does that under @file{~/.config/guix/current}.  Thus it's a good idea to source both from @code{/etc/profile}:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5344
#, no-wrap
msgid ""
"for GUIX_PROFILE in \"$HOME/.config/guix/current\" \"$HOME/.guix-profile\"\n"
"do\n"
"  if [ -f \"$GUIX_PROFILE/etc/profile\" ]; then\n"
"    . \"$GUIX_PROFILE/etc/profile\"\n"
"  fi\n"
"done\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5348
msgid "Last but not least, Guix provides command-line completion notably for Bash and zsh.  In @code{/etc/bashrc}, consider adding this line:"
msgstr ""

#. type: verbatim
#: doc/guix-cookbook.texi:5351
#, no-wrap
msgid ". /var/guix/profiles/per-user/root/current-guix/etc/bash_completion.d/guix\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5354
msgid "Voilà!"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5357
msgid "You can check that everything's in place by logging in on a compute node and running:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5360
#, no-wrap
msgid "guix install hello\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5366
msgid "The daemon on the head node should download pre-built binaries on your behalf and unpack them in @file{/gnu/store}, and @command{guix install} should create @file{~/.guix-profile} containing the @file{~/.guix-profile/bin/hello} command."
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:5368
#, no-wrap
msgid "Network Access"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5373
msgid "Guix requires network access to download source code and pre-built binaries.  The good news is that only the head node needs that since compute nodes simply delegate to it."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5379
msgid "It is customary for cluster nodes to have access at best to a @emph{white list} of hosts.  Our head node needs at least @code{ci.guix.gnu.org} in this white list since this is where it gets pre-built binaries from by default, for all the packages that are in Guix proper."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5384
msgid "Incidentally, @code{ci.guix.gnu.org} also serves as a @emph{content-addressed mirror} of the source code of those packages.  Consequently, it is sufficient to have @emph{only} @code{ci.guix.gnu.org} in that white list."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5393
msgid "Software packages maintained in a separate repository such as one of the various @uref{https://hpc.guix.info/channels, HPC channels} are of course unavailable from @code{ci.guix.gnu.org}.  For these packages, you may want to extend the white list such that source and pre-built binaries (assuming this-party servers provide binaries for these packages) can be downloaded.  As a last resort, users can always download source on their workstation and add it to the cluster's @file{/gnu/store}, like this:"
msgstr ""

#. type: verbatim
#: doc/guix-cookbook.texi:5397
#, no-wrap
msgid ""
"GUIX_DAEMON_SOCKET=ssh://compute-node.example.org \\\n"
"  guix download http://starpu.gforge.inria.fr/files/starpu-1.2.3/starpu-1.2.3.tar.gz\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5401
msgid "The above command downloads @code{starpu-1.2.3.tar.gz} @emph{and} sends it to the cluster's @code{guix-daemon} instance over SSH."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5408
msgid "Air-gapped clusters require more work.  At the moment, our suggestion would be to download all the necessary source code on a workstation running Guix.  For instance, using the @option{--sources} option of @command{guix build} (@pxref{Invoking guix build,,, guix, GNU Guix Reference Manual}), the example below downloads all the source code the @code{openmpi} package depends on:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5411
#, no-wrap
msgid ""
"$ guix build --sources=transitive openmpi\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5413
#, no-wrap
msgid ""
"@dots{}\n"
"\n"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5425
#, no-wrap
msgid ""
"/gnu/store/xc17sm60fb8nxadc4qy0c7rqph499z8s-openmpi-1.10.7.tar.bz2\n"
"/gnu/store/s67jx92lpipy2nfj5cz818xv430n4b7w-gcc-5.4.0.tar.xz\n"
"/gnu/store/npw9qh8a46lrxiwh9xwk0wpi3jlzmjnh-gmp-6.0.0a.tar.xz\n"
"/gnu/store/hcz0f4wkdbsvsdky3c0vdvcawhdkyldb-mpfr-3.1.5.tar.xz\n"
"/gnu/store/y9akh452n3p4w2v631nj0injx7y0d68x-mpc-1.0.3.tar.gz\n"
"/gnu/store/6g5c35q8avfnzs3v14dzl54cmrvddjm2-glibc-2.25.tar.xz\n"
"/gnu/store/p9k48dk3dvvk7gads7fk30xc2pxsd66z-hwloc-1.11.8.tar.bz2\n"
"/gnu/store/cry9lqidwfrfmgl0x389cs3syr15p13q-gcc-5.4.0.tar.xz\n"
"/gnu/store/7ak0v3rzpqm2c5q1mp3v7cj0rxz0qakf-libfabric-1.4.1.tar.bz2\n"
"/gnu/store/vh8syjrsilnbfcf582qhmvpg1v3rampf-rdma-core-14.tar.gz\n"
"…\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5429
msgid "(In case you're wondering, that's more than 320@ MiB of @emph{compressed} source code.)"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5432
msgid "We can then make a big archive containing all of this (@pxref{Invoking guix archive,,, guix, GNU Guix Reference Manual}):"
msgstr ""

#. type: verbatim
#: doc/guix-cookbook.texi:5437
#, no-wrap
msgid ""
"$ guix archive --export \\\n"
"    `guix build --sources=transitive openmpi` \\\n"
"    > openmpi-source-code.nar\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5441
msgid "@dots{} and we can eventually transfer that archive to the cluster on removable storage and unpack it there:"
msgstr ""

#. type: verbatim
#: doc/guix-cookbook.texi:5444
#, no-wrap
msgid "$ guix archive --import < openmpi-source-code.nar\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5448
msgid "This process has to be repeated every time new source code needs to be brought to the cluster."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5452
msgid "As we write this, the research institutes involved in Guix-HPC do not have air-gapped clusters though. If you have experience with such setups, we would like to hear feedback and suggestions."
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:5454
#, no-wrap
msgid "Disk Usage"
msgstr "Uso do Disco"

#. type: cindex
#: doc/guix-cookbook.texi:5456
#, no-wrap
msgid "disk usage, on a cluster"
msgstr "uso do disco, em um cluster"

#. type: Plain text
#: doc/guix-cookbook.texi:5463
msgid "A common concern of sysadmins' is whether this is all going to eat a lot of disk space.  If anything, if something is going to exhaust disk space, it's going to be scientific data sets rather than compiled software---that's our experience with almost ten years of Guix usage on HPC clusters.  Nevertheless, it's worth taking a look at how Guix contributes to disk usage."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5468
msgid "First, having several versions or variants of a given package in @file{/gnu/store} does not necessarily cost much, because @command{guix-daemon} implements deduplication of identical files, and package variants are likely to have a number of common files."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5475
msgid "As mentioned above, we recommend having a cron job to run @code{guix gc} periodically, which removes @emph{unused} software from @file{/gnu/store}. However, there's always a possibility that users will keep lots of software in their profiles, or lots of old generations of their profiles, which is ``live'' and cannot be deleted from the viewpoint of @command{guix gc}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5479
msgid "The solution to this is for users to regularly remove old generations of their profile. For instance, the following command removes generations that are more than two-month old:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5482
#, no-wrap
msgid "guix package --delete-generations=2m\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5487
msgid "Likewise, it's a good idea to invite users to regularly upgrade their profile, which can reduce the number of variants of a given piece of software stored in @file{/gnu/store}:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5491
#, no-wrap
msgid ""
"guix pull\n"
"guix upgrade\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5497
msgid "As a last resort, it is always possible for sysadmins to do some of this on behalf of their users. Nevertheless, one of the strengths of Guix is the freedom and control users get on their software environment, so we strongly recommend leaving users in control."
msgstr ""

#. type: section
#: doc/guix-cookbook.texi:5499
#, fuzzy, no-wrap
#| msgid "System Configuration"
msgid "Security Considerations"
msgstr "Configuração do sistema"

#. type: cindex
#: doc/guix-cookbook.texi:5501
#, no-wrap
msgid "security, on a cluster"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5506
msgid "On an HPC cluster, Guix is typically used to manage scientific software.  Security-critical software such as the operating system kernel and system services such as @code{sshd} and the batch scheduler remain under control of sysadmins."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5511
msgid "The Guix project has a good track record delivering security updates in a timely fashion (@pxref{Security Updates,,, guix, GNU Guix Reference Manual}).  To get security updates, users have to run @code{guix pull && guix upgrade}."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5517
msgid "Because Guix uniquely identifies software variants, it is easy to see if a vulnerable piece of software is in use. For instance, to check whether the glibc@ 2.25 variant without the mitigation patch against ``@uref{https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt,Stack Clash}'', one can check whether user profiles refer to it at all:"
msgstr ""

#. type: example
#: doc/guix-cookbook.texi:5520
#, no-wrap
msgid "guix gc --referrers /gnu/store/…-glibc-2.25\n"
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5524
msgid "This will report whether profiles exist that refer to this specific glibc variant."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5537
msgid "Guix is based on the @uref{https://nixos.org/nix/, Nix package manager}, which was designed and implemented by Eelco Dolstra, with contributions from other people (see the @file{nix/AUTHORS} file in Guix.)  Nix pioneered functional package management, and promoted unprecedented features, such as transactional package upgrades and rollbacks, per-user profiles, and referentially transparent build processes.  Without this work, Guix would not exist."
msgstr ""

#. type: Plain text
#: doc/guix-cookbook.texi:5540
msgid "The Nix-based software distributions, Nixpkgs and NixOS, have also been an inspiration for Guix."
msgstr "As distribuições de software baseadas em Nix, Nixpkgs e NixOS, também foram uma inspiração para o Guix."

#. type: Plain text
#: doc/guix-cookbook.texi:5546
msgid "GNU@tie{}Guix itself is a collective work with contributions from a number of people.  See the @file{AUTHORS} file in Guix for more information on these fine people.  The @file{THANKS} file lists people who have helped by reporting bugs, taking care of the infrastructure, providing artwork and themes, making suggestions, and more---thank you!"
msgstr "O GNU@tie{}Guix em si é um trabalho coletivo com contribuições de várias pessoas. Veja o arquivo @file{AUTHORS} no Guix para obter mais informações sobre essas pessoas legais. O arquivo @file{THANKS} lista as pessoas que ajudaram a relatar erros, cuidar da infraestrutura, fornecer ilustrações e temas, fazer sugestões e muito mais -- obrigado!"

#. type: Plain text
#: doc/guix-cookbook.texi:5551
msgid "This document includes adapted sections from articles that have previously been published on the Guix blog at @uref{https://guix.gnu.org/blog} and on the Guix-HPC blog at @uref{https://hpc.guix.info/blog}."
msgstr ""

#. type: cindex
#: doc/guix-cookbook.texi:5556
#, no-wrap
msgid "license, GNU Free Documentation License"
msgstr "licença, Licença de Documentação Livre GNU"

#. type: include
#: doc/guix-cookbook.texi:5557
#, no-wrap
msgid "fdl-1.3.texi"
msgstr "fdl-1.3.texi"

#, no-wrap
#~ msgid "(define (%source-directory) \"/path-to-spinning-disk-goes-here/tmp\") ;; \"source-directory\" can be named any valid variable name.\n"
#~ msgstr "(define (%source-directory) \"/caminho_para_ o_disco_vai_aqui/tmp\") ;; \"%source-directory\" pode receber qualquer nome de variável válido.\n"

#, fuzzy
#~| msgid "Running Guix on a Linode Server"
#~ msgid "Running Guix on a Linode Server.  Running Guix on a Linode Server"
#~ msgstr "Executando Guix em um Servidor Linode"

#~ msgid "GUIX_PACKAGE_PATH"
#~ msgstr "GUIX_PACKAGE_PATH"
